[{"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\index.js":"1","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js":"2","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\App.js":"3","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js":"4","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js":"5","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js":"6","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js":"7","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js":"8","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js":"9","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js":"10","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js":"11","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js":"12","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\config.js":"13","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js":"14","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js":"15","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\index.js":"16","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js":"17","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\App.js":"18","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js":"19","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js":"20","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js":"21","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js":"22","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js":"23","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js":"24","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js":"25","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js":"26","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js":"27","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\config.js":"28","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js":"29","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js":"30"},{"size":952,"mtime":1611550006694,"results":"31","hashOfConfig":"32"},{"size":375,"mtime":1611550006700,"results":"33","hashOfConfig":"32"},{"size":935,"mtime":1611550006689,"results":"34","hashOfConfig":"32"},{"size":3908,"mtime":1611550006690,"results":"35","hashOfConfig":"32"},{"size":1284,"mtime":1611550006701,"results":"36","hashOfConfig":"32"},{"size":7337,"mtime":1611550006695,"results":"37","hashOfConfig":"32"},{"size":38337,"mtime":1611557929723,"results":"38","hashOfConfig":"32"},{"size":18711,"mtime":1611550006696,"results":"39","hashOfConfig":"32"},{"size":17587,"mtime":1611557929706,"results":"40","hashOfConfig":"32"},{"size":14250,"mtime":1611557929723,"results":"41","hashOfConfig":"32"},{"size":15681,"mtime":1611557929723,"results":"42","hashOfConfig":"32"},{"size":548,"mtime":1611550006699,"results":"43","hashOfConfig":"32"},{"size":465,"mtime":1611550006693,"results":"44","hashOfConfig":"32"},{"size":7213,"mtime":1611550006692,"results":"45","hashOfConfig":"32"},{"size":5536,"mtime":1611550006692,"results":"46","hashOfConfig":"32"},{"size":952,"mtime":1613386815621,"results":"47","hashOfConfig":"48"},{"size":375,"mtime":1611324565793,"results":"49","hashOfConfig":"48"},{"size":937,"mtime":1612326380576,"results":"50","hashOfConfig":"48"},{"size":4630,"mtime":1613029579231,"results":"51","hashOfConfig":"48"},{"size":1284,"mtime":1611480109083,"results":"52","hashOfConfig":"48"},{"size":13629,"mtime":1613354197313,"results":"53","hashOfConfig":"48"},{"size":33525,"mtime":1614227566676,"results":"54","hashOfConfig":"48"},{"size":61344,"mtime":1614219207416,"results":"55","hashOfConfig":"48"},{"size":548,"mtime":1611324565793,"results":"56","hashOfConfig":"48"},{"size":19016,"mtime":1614246929602,"results":"57","hashOfConfig":"48"},{"size":19228,"mtime":1614245860188,"results":"58","hashOfConfig":"48"},{"size":52902,"mtime":1614250996034,"results":"59","hashOfConfig":"48"},{"size":2467,"mtime":1614566071126,"results":"60","hashOfConfig":"48"},{"size":7216,"mtime":1611714630266,"results":"61","hashOfConfig":"48"},{"size":5802,"mtime":1611759754775,"results":"62","hashOfConfig":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1brhldy",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"bhares",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"99"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"99"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"99"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"99"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"99"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\index.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\App.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js",["140","141","142","143"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js",["144"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js",["145","146","147","148","149","150","151","152","153","154","155"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from 'antd';\r\nimport { HomeOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst format = 'HH:mm A';\r\nconst Option = Select.Option;\r\n\r\nlet data = [{\r\n    projectId: null,\r\n    typeId: null,\r\n    workDate: null,\r\n    workDetail: null,\r\n    workUrl: null,\r\n    workManhour: null,\r\n    workTimeIn: null,\r\n    workTimeOut: null,\r\n}]\r\n\r\nlet projectList = [];\r\nlet typeList = [];\r\nlet timeHours = [];\r\nlet timeMin = [];\r\n\r\nclass ActionsWork extends React.Component {\r\n        state = {\r\n            isOpen: false\r\n        };\r\n\r\n        openModal = () => this.setState({ isOpen: true });\r\n        closeModal = () => this.setState({ isOpen: false });\r\n\r\n        constructor(props) {\r\n            console.log(\"ActionsWork -> constructor -> props\", props)\r\n            let query = _.cloneDeep(props.match.params.query);\r\n            let tempQuery = JSON.parse(JSON.stringify(query))\r\n            let param = JSON.parse(tempQuery)\r\n\r\n            super(props);\r\n            this.state = {\r\n                isPopupSuccess: false, // alert success case\r\n                isPopupError: false, // alert error case\r\n                isPopupMsg: '', // alert msg\r\n                isOpen: false, // open popup confirm\r\n                isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n                isDataPopUp: {}, // ข้อมูลที่ใช้\r\n                isTextMsg: '', // msg ของ Popup\r\n                isDelete: false, // ใช้เช็คว่าเป็นการลบไหม\r\n                data: [{\r\n                    projectId: null,\r\n                    typeId: null,\r\n                    workDate: null,\r\n                    workDetail: null,\r\n                    workUrl: null,\r\n                    workManhour: null,\r\n                    workTimeIn: null,\r\n                    workTimeOut: null,\r\n                }],\r\n                projectList: [],\r\n                typeList: [],\r\n                params: param\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n\r\n            // console.log(\"ActionsWork -> componentDidMount -> s\", this.state.data)\r\n            this.getTypeList();\r\n            this.getProjectList();\r\n            this.setDdlTime();\r\n\r\n\r\n        }\r\n\r\n        getProjectList() {\r\n                this.setState({\r\n                    projectList: [{\r\n                            projectId: '001',\r\n                            projectName: 'test1'\r\n                        },\r\n                        {\r\n                            projectId: '002',\r\n                            projectName: 'test2'\r\n                        }\r\n                    ]\r\n                })\r\n\r\n                let resData = [{\r\n                        projectId: '001',\r\n                        projectName: 'test1'\r\n                    },\r\n                    {\r\n                        projectId: '002',\r\n                        projectName: 'test2'\r\n                    }\r\n                ]\r\n                let temp = [];\r\n                for (let i = 0; i < resData.length; i++) {\r\n                    temp.push( < Option key = { resData[i].projectId } > { resData[i].projectName } < /Option>);\r\n                    }\r\n\r\n                    this.projectList = temp\r\n                }\r\n\r\n                getTypeList() {\r\n                        this.setState({\r\n                            jobtypeList: [{\r\n                                    typeId: '001',\r\n                                    typeName: 'test1'\r\n                                },\r\n                                {\r\n                                    typeId: '002',\r\n                                    typeName: 'test2'\r\n                                }\r\n                            ]\r\n                        })\r\n\r\n                        let resData = [{\r\n                                typeId: '001',\r\n                                typeName: 'test1'\r\n                            },\r\n                            {\r\n                                typeId: '002',\r\n                                typeName: 'test2'\r\n                            }\r\n                        ]\r\n                        let temp = []\r\n                        for (let i = 0; i < resData.length; i++) {\r\n                            temp.push( < Option key = { resData[i].typeId } > { resData[i].typeName } < /Option>);\r\n                                console.log(\"ActionsWork -> getJobtypeList -> resData[i].typeId\", resData[i].typeId)\r\n                            }\r\n\r\n                            this.typeList = temp\r\n                        }\r\n\r\n                        handleProjectChange = (value, i) => {\r\n                            console.log(\"ActionsWork -> handleProjectChange -> i\", i)\r\n                            console.log(\"ActionsWork -> handleProjectChange -> value\", value)\r\n\r\n                            // let temp = _.cloneDeep(this.state.filter)\r\n                            // temp.projectId = value\r\n                            // this.setState({\r\n                            //     filter: {\r\n                            //         dateFrom: temp.dateFrom,\r\n                            //         dateTo: temp.dateTo,\r\n                            //         typeId: temp.typeId,\r\n                            //         projectId: value\r\n                            //     }\r\n                            // });\r\n                        }\r\n                        handleTypeChange = (event) => {\r\n\r\n                            let temp = _.cloneDeep(this.state.filter)\r\n                            temp.typeId = event.target.value\r\n                            this.setState({\r\n                                filter: {\r\n                                    dateFrom: temp.dateFrom,\r\n                                    dateTo: temp.dateTo,\r\n                                    typeId: temp.typeId,\r\n                                    projectId: temp.projectId\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        setDdlTime() {\r\n                            // let maxMin = 60;\r\n                            // let maxHours = 24;\r\n\r\n                            // let tmpMin = []\r\n                            // let tmpHours = []\r\n                            // for (let i = 0; i < maxHours; i++) {\r\n                            //     tmpMin.push()\r\n                            // }\r\n\r\n\r\n                            // TODO :: get hours\r\n                            var hours = []; // time array\r\n                            var th = 0; // start time\r\n                            //loop to increment the time and push results in array\r\n                            for (var i = 0; th < 24 * 60; i++) {\r\n                                var hh = Math.floor(th / 60); // gething hours of day in 0-24 format\r\n                                var mm = (th % 60); // gething minutes of the hour in 0-55 format\r\n                                hours[i] = (\"0\" + (hh)).slice(-2); // pushing data in array in [00:00 - 12:00 AM/PM format]\r\n                                th++;\r\n                            }\r\n                            hours = _.uniq(hours)\r\n                            console.log(\"ActionsWork -> setDdlTime -> hours\", hours)\r\n                                // timeHours\r\n                                // timeMin\r\n\r\n                            // TODO :: get min\r\n                            // var min = []; // time array\r\n                            // var tm = 0;\r\n                            // for (var j = 0; th < 60 *60; j++) {\r\n                            //     // var hh = Math.floor(th / 60); // gething hours of day in 0-24 format\r\n                            //     var mm = (tm % 60); // gething minutes of the hour in 0-55 format\r\n                            //     min[i] = (\"0\" + (mm)).slice(-2); // pushing data in array in [00:00 - 12:00 AM/PM format]\r\n                            //     tm +=10;\r\n                            // }\r\n                            // min = _.uniq(min)\r\n                            // console.log(\"ActionsWork -> setDdlTime -> min\", min)\r\n                            // timeHours\r\n                        }\r\n\r\n                        // TODO :: Select\r\n\r\n                        handleChangeProject = (value, index) => {\r\n                            let data = [...this.state.data];\r\n                            let item = {...data[index] };\r\n                            item.projectId = value;\r\n                            data[index] = item;\r\n                            this.setState({ data });\r\n                        }\r\n\r\n                        handleBlurProject = () => {\r\n                            console.log('blur ---- ', this.typeList);\r\n                        }\r\n\r\n                        handleFocusProject = () => {\r\n                            console.log('focus ....', this.typeList);\r\n                        }\r\n                        handleChangeType = (value, index) => {\r\n                            let data = [...this.state.data];\r\n                            let item = {...data[index] };\r\n                            item.typeId = value;\r\n                            data[index] = item;\r\n                            this.setState({ data });\r\n                        }\r\n\r\n                        handleBlurType = () => {\r\n                            console.log('blur ---- ', this.typeList);\r\n                        }\r\n\r\n                        handleFocusType = () => {\r\n                            console.log('focus ....', this.typeList);\r\n                        }\r\n\r\n                        onChangeTimeIn = (time, timestring, index) => {\r\n                            // console.log(\"ActionsWork -> onChangeTimeIn -> time, timestring, index\", time, timestring, index)\r\n                            let data = [...this.state.data];\r\n                            let item = {...data[index] };\r\n                            item.workTimeIn = time;\r\n                            data[index] = item;\r\n                            this.setState({ data });\r\n                        }\r\n                        onChangeTimeOut = (time, timestring, index) => {\r\n                            console.log(\"ActionsWork -> onChangeTimeOut -> time, timestring, index\", time, timestring, index)\r\n                            let data = [...this.state.data];\r\n                            let item = {...data[index] };\r\n                            item.workTimeOut = time;\r\n                            data[index] = item;\r\n                            this.setState({ data });\r\n                        }\r\n\r\n                        calManHours = () => {\r\n\r\n                        }\r\n\r\n                        handleAddData = () => {\r\n                            console.log(\"ActionsWork -> handleAddData -> handleAddData\")\r\n                            this.state.data.push({\r\n                                projectId: null,\r\n                                typeId: null,\r\n                                workDate: null,\r\n                                workDetail: null,\r\n                                workUrl: null,\r\n                                workManhour: null,\r\n                                workTimeIn: null,\r\n                                workTimeOut: null,\r\n                            })\r\n                            let a = this.state.data\r\n                            this.setState({ data: a })\r\n                            console.log(\"ActionsWork -> handleAddData ->  this.state.data\", this.state.data)\r\n                        }\r\n\r\n                        render() {\r\n\r\n                                return ( < >\r\n\r\n                                        <\r\n                                        div className = \"App\" >\r\n                                        <\r\n                                        div id = \"boxType\"\r\n                                        className = \"container-box-content\" >\r\n                                        <\r\n                                        div className = \"row wrap-container\" >\r\n\r\n                                        <\r\n                                        Breadcrumb >\r\n                                        <\r\n                                        Breadcrumb.Item href = \"/work\" >\r\n                                        <\r\n                                        HomeOutlined / >\r\n                                        <\r\n                                        span className = \"breadcrum-custom\" > work < /span> <\r\n                                        /Breadcrumb.Item> {\r\n                                            this.state.params.action === 'create' ? < span className = \"breadcrum-custom\" > Create work < /span> : null} {\r\n                                                    this.state.params.action === 'edit' ? < span className = \"breadcrum-custom\" > Update work < /span> : null} <\r\n                                                        /Breadcrumb>\r\n\r\n                                                    <\r\n                                                    div className = \"wrap-content\" >\r\n                                                        <\r\n                                                        div className = \"box-action\" >\r\n                                                        <\r\n                                                        div className = \"box-title-search\" > {\r\n                                                            this.state.params.action === 'create' ? < p className = \"font-size-search\" > Create Work < /p> : null} {\r\n                                                                this.state.params.action === 'edit' ? < p className = \"font-size-search\" > Update Work < /p> : null} <\r\n                                                                    /div> <\r\n                                                                    div className = \"box-content\"\r\n                                                                style = {\r\n                                                                        { marginBottom: 0 } } >\r\n                                                                    <\r\n                                                                    div className = \"box-action-date\" >\r\n                                                                    <\r\n                                                                    div className = \"row form-group\" >\r\n                                                                    <\r\n                                                                    div className = \"col-3\"\r\n                                                                style = {\r\n                                                                    { textAlign: 'right' } } > < label className = \"title-field\"\r\n                                                                for = \"ddlDate\" > Date: < span style = {\r\n                                                                        { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                    div className = \"col-4\"\r\n                                                                style = {\r\n                                                                        { paddingLeft: 0, paddingRight: 0 } } >\r\n                                                                    <\r\n                                                                    DateBox\r\n                                                                value = { null }\r\n                                                                type = \"date\" / >\r\n                                                                    <\r\n                                                                    /div> <\r\n                                                                    /div> <\r\n                                                                    /div> <\r\n                                                                    hr className = \"hr-action\" > < /hr> <\r\n                                                                    div style = {\r\n                                                                        { textAlign: 'right' } } >\r\n                                                                    <\r\n                                                                    p className = \"title-field\" > < span style = {\r\n                                                                        { color: 'red' } } > * < /span> Items marked with an asterisk are required</p >\r\n                                                                    <\r\n                                                                    /div> {\r\n                                                                        this.state.data.map((data, i) => {\r\n                                                                                    console.log(\"ActionsWork -> render -> data\", data)\r\n                                                                                    console.log(\"ActionsWork -> render -> i\", i);\r\n                                                                                    return ( <\r\n                                                                                        >\r\n                                                                                        <\r\n                                                                                        div className = \"box-action-content\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row form-group\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"ddlProjectName\" > Project Name < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label >\r\n                                                                                        <\r\n                                                                                        /div> <\r\n                                                                                        div className = \"col-8\" >\r\n                                                                                        <\r\n                                                                                        Select showSearch style = {\r\n                                                                                            { width: 200 } }\r\n                                                                                        placeholder = \"Please selete project\"\r\n                                                                                        optionFilterProp = \"children\"\r\n                                                                                        onChange = {\r\n                                                                                            (e) => { this.handleChangeProject(e, i) } }\r\n                                                                                        onFocus = {\r\n                                                                                            (e) => { this.handleFocusProject(e, i) } }\r\n                                                                                        onBlur = {\r\n                                                                                            (e) => { this.handleBlurProject(e, i) } }\r\n                                                                                        filterOption = {\r\n                                                                                            (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0 }\r\n                                                                                        value = { data.projectId } >\r\n                                                                                        { this.projectList } <\r\n                                                                                        /Select> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"ddlJobType\" > Job Type < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label >\r\n                                                                                        <\r\n                                                                                        /div> <\r\n                                                                                        div className = \"col-8\" >\r\n                                                                                        <\r\n                                                                                        Select showSearch style = {\r\n                                                                                            { width: 200 } }\r\n                                                                                        placeholder = \"Please selete Type\"\r\n                                                                                        optionFilterProp = \"children\"\r\n                                                                                        onChange = {\r\n                                                                                            (e) => { this.handleChangeType(e, i) } }\r\n                                                                                        onFocus = {\r\n                                                                                            (e) => { this.handleFocusType(e, i) } }\r\n                                                                                        onBlur = {\r\n                                                                                            (e) => { this.handleBlurType(e, i) } }\r\n                                                                                        filterOption = {\r\n                                                                                            (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0 }\r\n                                                                                        value = { data.typeId } >\r\n                                                                                        { this.typeList } <\r\n                                                                                        /Select> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div>\r\n\r\n                                                                                        { /* Time in */ } <\r\n                                                                                        div className = \"row form-group\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"ddlTimeIn\" > Time in < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                                        div className = \"col-8\" >\r\n                                                                                        <\r\n                                                                                        TimePicker showNow = { true }\r\n                                                                                        className = \"font-14pt\"\r\n                                                                                        style = {\r\n                                                                                            { fontSize: '14pt' } }\r\n                                                                                        use12Hours placeholder = \"Select time in\"\r\n                                                                                        format = { format }\r\n                                                                                        value = { data.workTimeIn }\r\n                                                                                        showNow = { true }\r\n                                                                                        onChange = {\r\n                                                                                            (time, timestring) => { this.onChangeTimeIn(time, timestring, i) } }\r\n                                                                                        /> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div>\r\n\r\n                                                                                        { /* Time out */ } <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"ddlTimeOut\" > Time out < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                                        div className = \"col-8\" >\r\n                                                                                        <\r\n                                                                                        TimePicker showNow = { true }\r\n                                                                                        className = \"font-14pt\"\r\n                                                                                        style = {\r\n                                                                                            { fontSize: '14pt' } }\r\n                                                                                        use12Hours placeholder = \"Select Time out\"\r\n                                                                                        format = { format }\r\n                                                                                        value = { data.workTimeOut }\r\n                                                                                        showNow = { true }\r\n                                                                                        onChange = {\r\n                                                                                            (time, timestring) => { this.onChangeTimeOut(time, timestring, i) } }\r\n                                                                                        /> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div>\r\n\r\n                                                                                        { /* Man hours */ } <\r\n                                                                                        div className = \"row form-group\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"txtManHours\" > Man hours < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                                        div className = \"col-4\" >\r\n                                                                                        <\r\n                                                                                        input type = \"text\"\r\n                                                                                        class = \"form-control\"\r\n                                                                                        id = \"txtManHours\" / >\r\n\r\n                                                                                        <\r\n                                                                                        /div> <\r\n                                                                                        div className = \"col-3\" >\r\n\r\n                                                                                        <\r\n                                                                                        button class = \"btn-custom btn-calculate\"\r\n                                                                                        onClick = { this.calManHours } > Calculate < /button> <\r\n                                                                                        /div> <\r\n                                                                                        /div> <\r\n                                                                                        /div>\r\n\r\n                                                                                        { /* Url */ } <\r\n                                                                                        div className = \"col-6\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-4\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"txtUrl\" > Url < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                                        div className = \"col-8\" >\r\n                                                                                        <\r\n                                                                                        input type = \"text\"\r\n                                                                                        class = \"form-control\"\r\n                                                                                        id = \"txtUrl\" / >\r\n\r\n                                                                                        <\r\n                                                                                        /div>  </div > < /div> </div >\r\n\r\n                                                                                        { /* Detail */ } <\r\n                                                                                        div className = \"row form-group\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-12\" >\r\n                                                                                        <\r\n                                                                                        div className = \"row\" >\r\n                                                                                        <\r\n                                                                                        div className = \"col-2\"\r\n                                                                                        style = {\r\n                                                                                            { textAlign: 'right' } } >\r\n                                                                                        <\r\n                                                                                        label className = \"title-field\"\r\n                                                                                        for = \"txtDetail\" > Detail < span style = {\r\n                                                                                            { color: 'red' } } > * < /span></label > < /div> <\r\n                                                                                        div className = \"col-10\" >\r\n                                                                                        <\r\n                                                                                        textarea rows = \"3\"\r\n                                                                                        type = \"text\"\r\n                                                                                        class = \"form-control\"\r\n                                                                                        id = \"txtDetail\" / >\r\n\r\n                                                                                        <\r\n                                                                                        /div> </div > < /div> </div >\r\n\r\n\r\n                                                                                        <\r\n                                                                                        /div> {\r\n                                                                                            this.state.data.length > 1 ? < div style = {\r\n                                                                                                    { textAlign: 'end', marginTop: 20, marginBottom: 10 } } >\r\n                                                                                                <\r\n                                                                                                button type = \"button\"\r\n                                                                                            style = {\r\n                                                                                                { background: 'red', color: '#fff', width: 300 } }\r\n                                                                                            className = \"btn btn-popup-custom error\"\r\n                                                                                            onClick = {\r\n                                                                                                    () => {\r\n                                                                                                        console.log(\"ActionsWork -> render -> d\");\r\n                                                                                                        this.setState({ isOpen: true, isTypeShowConfirm: 'del', isTextMsg: msgPopupTitle.deleted, isDataPopUp: this.state.data, isDelete: true })\r\n                                                                                                    }\r\n                                                                                                } >\r\n\r\n                                                                                                Delete <\r\n                                                                                                /button> <\r\n                                                                                                /div> : null} <\r\n                                                                                                hr className = \"hr-action\" > < /hr> <\r\n                                                                                                />\r\n                                                                                        )\r\n\r\n                                                                                    })\r\n                                                                            } <\r\n                                                                            br / >\r\n                                                                            <\r\n                                                                            div >\r\n                                                                            <\r\n                                                                            button type = \"button\"\r\n                                                                        class = \"btn btn-add-work\"\r\n                                                                        onClick = { this.handleAddData } > < span className = \"btn-add-work-icon\" > < PlusOutlined / > < /span></button >\r\n                                                                            <\r\n                                                                            /div> <\r\n                                                                            /div> <\r\n                                                                            div className = \"row form-group\" >\r\n                                                                            <\r\n                                                                            div className = \"col-12\"\r\n                                                                        style = {\r\n                                                                                { textAlign: 'right' } } >\r\n                                                                            <\r\n                                                                            Link to = '/work' >\r\n                                                                            <\r\n                                                                            button class = \"btn-custom btn-reset\"\r\n                                                                        style = {\r\n                                                                                { marginRight: 20 } } > CANCEL < /button> <\r\n                                                                            /Link> <\r\n                                                                            button class = \"btn-custom btn-search\"\r\n                                                                        style = {\r\n                                                                            { marginRight: 70 } }\r\n                                                                        onClick = {\r\n                                                                                () => {\r\n                                                                                    this.setState({ isOpen: true, isTypeShowConfirm: 'save', isTextMsg: msgPopupTitle.saved, isDataPopUp: this.state.data, isDelete: false })\r\n                                                                                }\r\n                                                                            } > { this.state.params.action === 'edit' ? 'UPDATE' : 'CREATE' } < /button> <\r\n                                                                            /div> <\r\n                                                                            /div>\r\n\r\n\r\n                                                                        <\r\n                                                                        /div> <\r\n                                                                        /div>\r\n\r\n                                                                        <\r\n                                                                        /div>\r\n\r\n                                                                        <\r\n                                                                        /div> <\r\n                                                                        /div> { /* POPUP */ } <\r\n                                                                        AlertPopUp successStatus = { this.state.isPopupSuccess }\r\n                                                                        errorStatus = { this.state.isPopupError }\r\n                                                                        message = { this.state.isPopupMsg }\r\n                                                                        clearActive = {\r\n                                                                            () => {\r\n                                                                                this.setState({ isPopupError: false })\r\n                                                                                this.setState({ isPopupSuccess: false })\r\n\r\n\r\n                                                                            }\r\n                                                                        }\r\n                                                                        />\r\n\r\n                                                                        <\r\n                                                                        ConfirmPopup open = { this.state.isOpen }\r\n                                                                        type = { this.state.isTypeShowConfirm }\r\n                                                                        text = { this.state.isTextMsg }\r\n                                                                        data = { this.state.isDataPopUp }\r\n                                                                        del = { false }\r\n                                                                        onClose = {\r\n                                                                            () => { this.setState({ isOpen: false }) } }\r\n                                                                        clearActive = {\r\n                                                                            (e) => { this.setState({ isOpen: false }) } }\r\n                                                                        confirmActive = {\r\n                                                                            (e) => {\r\n                                                                                this.setState({ isOpen: false })\r\n                                                                                this.setState({ isPopupError: false })\r\n                                                                                this.setState({ isPopupSuccess: true })\r\n                                                                                this.setState({ isPopupMsg: this.state.isDelete === false && this.state.params.action === 'edit' ? msgAlertTitle.updated : this.state.isDelete === false ? msgAlertTitle.saved : msgAlertTitle.deleted })\r\n                                                                                console.log(\"Work -> render -> e\", e)\r\n                                                                            }\r\n                                                                        }\r\n                                                                        /> <\r\n                                                                        />\r\n                                                                    );\r\n\r\n                                                            }\r\n                                                        }\r\n\r\n                                                    export default ActionsWork;",["171","172"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js",["173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport { HomeOutlined, EyeOutlined, DeleteOutlined, FormOutlined } from '@ant-design/icons';\r\nimport DropDownButton from 'devextreme-react/drop-down-button';\r\nimport moment from 'moment';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport DataGrid, {\r\n  Column,\r\n  Grouping,\r\n  GroupPanel,\r\n  Paging,\r\n  SearchPanel,\r\n  Editing,\r\n  Pager,\r\n  Button\r\n} from 'devextreme-react/data-grid';\r\nimport AspNetData from 'devextreme-aspnet-data-nojquery';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from 'antd';\r\nimport configService from '../../config';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst url = 'https://js.devexpress.com/Demos/Mvc/api/TreeListTasks';\r\n{/* <span role=\"img\" aria-label=\"delete\" class=\"anticon anticon-delete\"><svg viewBox=\"64 64 896 896\" focusable=\"false\" data-icon=\"delete\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\"></path></svg></span> */ }\r\n\r\nconst tasksData = AspNetData.createStore({\r\n  key: 'Task_ID',\r\n  loadUrl: `${url}/Tasks`,\r\n  insertUrl: `${url}/InsertTask`,\r\n  updateUrl: `${url}/UpdateTask`,\r\n  deleteUrl: `${url}/DeleteTask`,\r\n  onBeforeSend: function (method, ajaxOptions) {\r\n    ajaxOptions.xhrFields = { withCredentials: true };\r\n  }\r\n});\r\n\r\nlet d = <FormOutlined />\r\n\r\nconst employeesData = AspNetData.createStore({\r\n  key: 'ID',\r\n  loadUrl: `${url}/TaskEmployees`\r\n});\r\n\r\nconst statusesData = [\r\n  'Not Started',\r\n  'Need Assistance',\r\n  'In Progress',\r\n  'Deferred',\r\n  'Completed'\r\n];\r\n\r\n\r\n\r\nclass Work extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      itembar: [false, false, false],\r\n      filter: {\r\n        dateFrom: new Date(),\r\n        dateTo: new Date(),\r\n        projectId: null,\r\n        typeId: null\r\n      },\r\n      projectList: [],\r\n      jobtypeList: [],\r\n      isPopupSuccess: false, // alert success case\r\n      isPopupError: false,  // alert error case\r\n      isPopupMsg: '',  // alert msg\r\n      isOpen: false, // open popup confirm\r\n      isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n      isDataPopUp: {}, // ข้อมูลที่ใช้\r\n      isTextMsg: '', // msg ของ Popup\r\n      data: [\r\n        {\r\n          'id': 1,\r\n          'workId': '0001',\r\n          'projectId': '0001',\r\n          'projectName': 'test1',\r\n          'projectPhase': '1',\r\n          'typeId': '0001',\r\n          'typeName': 'test1',\r\n          'workDate': '20/12/2020',\r\n          'workDetail': '....',\r\n          'workUrl': '-',\r\n          'workManhour': '8',\r\n          'workTimeIn': '09:00 AM',\r\n          'workTimeOut': '18:00 PM',\r\n          'updateDate': null,\r\n          'updateBy': null,\r\n          'createDate': '20/11/2020',\r\n          'createBy': 'joon',\r\n          'groupId': 0\r\n        }, {\r\n          'workId': '0002',\r\n          'projectId': '0002',\r\n          'projectName': 'test2',\r\n          'projectPhase': '1',\r\n          'typeId': '0002',\r\n          'typeName': 'test2',\r\n          'workDate': '25/01/2021',\r\n          'workDetail': '....',\r\n          'workUrl': '-',\r\n          'workManhour': '8',\r\n          'workTimeIn': '09:00 AM',\r\n          'workTimeOut': '18:00 PM',\r\n          'updateDate': null,\r\n          'updateBy': null,\r\n          'createDate': '20/11/2020',\r\n          'createBy': 'joon',\r\n          'groupId': 0,\r\n          'id': 2\r\n        }, {\r\n          'workId': '0003',\r\n          'projectId': '0003',\r\n          'projectName': 'test3',\r\n          'projectPhase': '1',\r\n          'typeId': '0003',\r\n          'typeName': 'test3',\r\n          'workDate': '20/11/2020',\r\n          'workDetail': '....',\r\n          'workUrl': '-',\r\n          'workManhour': '8',\r\n          'workTimeIn': '09:00 AM',\r\n          'workTimeOut': '18:00 PM',\r\n          'updateDate': null,\r\n          'updateBy': null,\r\n          'createDate': '20/11/2020',\r\n          'createBy': 'joon',\r\n          'groupId': 0,\r\n          'id': 3\r\n        }, {\r\n          'workId': '0003',\r\n          'projectId': '0003',\r\n          'projectName': 'test3',\r\n          'projectPhase': '1',\r\n          'typeId': '0003',\r\n          'typeName': 'test3',\r\n          'workDate': '20/02/2020',\r\n          'workDetail': '....',\r\n          'workUrl': '-',\r\n          'workManhour': '8',\r\n          'workTimeIn': '09:00 AM',\r\n          'workTimeOut': '18:00 PM',\r\n          'updateDate': null,\r\n          'updateBy': null,\r\n          'createDate': '20/11/2020',\r\n          'createBy': 'joon',\r\n          'groupId': 3,\r\n          'id': 4\r\n        }]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getProjectList()\r\n    this.getJobtypeList()\r\n  }\r\n\r\n  getProjectList() {\r\n    this.setState({\r\n      projectList: [{\r\n        projectId: '001',\r\n        projectName: 'test1'\r\n      },\r\n      {\r\n        projectId: '002',\r\n        projectName: 'test2'\r\n      }]\r\n    })\r\n  }\r\n\r\n  getJobtypeList() {\r\n    this.setState({\r\n      jobtypeList: [{\r\n        typeId: '001',\r\n        typeName: 'test1'\r\n      },\r\n      {\r\n        typeId: '002',\r\n        typeName: 'test2'\r\n      }]\r\n    })\r\n    console.log(\"Work -> getJobtypeList -> this.state.jobtypeList\", this.state.jobtypeList)\r\n  }\r\n\r\n  handleProjectChange = (event) => {\r\n\r\n    let temp = _.cloneDeep(this.state.filter)\r\n    temp.projectId = event.target.value\r\n    this.setState({\r\n      filter: {\r\n        dateFrom: temp.dateFrom,\r\n        dateTo: temp.dateTo,\r\n        typeId: temp.typeId,\r\n        projectId: event.target.value\r\n      }\r\n    });\r\n  }\r\n  handleTypeChange = (event) => {\r\n\r\n    let temp = _.cloneDeep(this.state.filter)\r\n    temp.typeId = event.target.value\r\n    this.setState({\r\n      filter: {\r\n        dateFrom: temp.dateFrom,\r\n        dateTo: temp.dateTo,\r\n        typeId: temp.typeId,\r\n        projectId: temp.projectId\r\n      }\r\n    });\r\n  }\r\n\r\n  handleChangeDate = (event, type) => {\r\n    let temp = _.cloneDeep(this.state.filter)\r\n    if (type === 'from') {\r\n      this.setState({\r\n        filter: {\r\n          dateFrom: event.value,\r\n          dateTo: temp.dateTo,\r\n          typeId: temp.typeId,\r\n          projectId: temp.projectId\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filter: {\r\n          dateFrom: temp.dateFrom,\r\n          dateTo: event.value,\r\n          typeId: temp.typeId,\r\n          projectId: temp.projectId\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    console.log(\"Work -> handleReset -> this.state.filter\", this.state.filter)\r\n    this.setState({\r\n      filter: {\r\n        dateFrom: new Date(),\r\n        dateTo: new Date(),\r\n        projectId: null,\r\n        typeId: null\r\n      }\r\n    })\r\n    setTimeout(() => {\r\n      console.log(\"Work -> handleReset -> ll\", this.state.filter)\r\n    }, 100);\r\n  }\r\n\r\n  groupRender = (data) => {\r\n    console.log(\"groupRender -> data\", data)\r\n    let day = moment(data.value, 'DD/MM/YYYY').format('dddd')\r\n    let id = data.data.items && data.data.items.length > 0 ? data.data.items[0].workId : data.data.collapsedItems && data.data.collapsedItems.length > 0 ? data.data.collapsedItems[0].workId : null\r\n    let name = `DATE : ${data.value}  ${day}`\r\n    let now = moment().format('DD/MM/YYYY');\r\n    console.log(\"groupRender -> name\", name)\r\n    return (<div className=\"row\">\r\n      <div style={{ fontSize: '14pt' }} className={`col-6 ${day === 'Sunday' || day === 'Saturday' ? 'color-red' : data.value === now ? 'color-blue' : 'color-black'}`}>\r\n        {name}\r\n      </div>\r\n\r\n      <div className=\"col-6\" style={{ textAlign: 'end' }}>\r\n        <Link to={\"/work\" + `/{\"action\":\"edit\",\"workId\":\"${id}\"}`}>\r\n          <span style={{ color: 'black', fontSize: '14pt', marginRight: 15 }}><FormOutlined /></span>\r\n        </Link>\r\n        <a onClick={() => {\r\n          this.setState({ isOpen: true, isTypeShowConfirm: 'del', isTextMsg: msgPopupTitle.deleted, isDataPopUp: this.state.data })\r\n          console.log(\"project -> DelcellRender -> data\", id)\r\n        }}><span style={{ color: '#111', fontSize: '14pt' }}><DeleteOutlined /></span></a>\r\n      </div>\r\n\r\n    </div>\r\n    )\r\n\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (<>\r\n\r\n      <div className=\"App\">\r\n        <div id=\"boxType\" className=\"container-box-content\">\r\n          <div className=\"row wrap-container\">\r\n            <Breadcrumb>\r\n              {/* <Breadcrumb.Item href=\"#\"> */}\r\n              <HomeOutlined />\r\n              <span className=\"breadcrum-custom\"> Work</span>\r\n              {/* </Breadcrumb.Item> */}\r\n            </Breadcrumb>\r\n\r\n            <div className=\"wrap-content\">\r\n              <div className=\"box-search\">\r\n                <div className=\"box-title-search\">\r\n                  <p className=\"font-size-search\">Search Work</p>\r\n\r\n                </div>\r\n                <div className=\"box-content\">\r\n                  <div className=\"box-search-border\">\r\n                    <form>\r\n\r\n                      {/*  Dropdown */}\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlProjectName\" className=\"title-field\">Project Name</label></div>\r\n                            <select class=\"form-control col-7\" id=\"ddlProjectName\" value={this.state.filter.projectId} onChange={this.handleProjectChange}>\r\n                              {\r\n                                this.state.projectList.map(r => {\r\n                                  console.log(r, r.projectId == this.state.filter.projectId)\r\n                                  return <option value={r.projectId} selected={r.projectId == this.state.filter.projectId}>{r.projectName}</option>\r\n\r\n                                })\r\n                              }\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlJobType\" className=\"title-field\">Job Type</label></div>\r\n                            <select class=\"form-control col-7\" id=\"ddlJobType\" value={this.state.filter.typeId} onChange={this.handleTypeChange}>\r\n                              {\r\n                                this.state.jobtypeList.map(r => {\r\n                                  console.log(\"Work -> render -> r\", r)\r\n                                  return <option value={r.typeId} selected={r.typeId == this.state.filter.typeId}>{r.typeName}</option>\r\n                                })\r\n                              }\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/*  วันที่ */}\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlDateFrom\" className=\"title-field\">Date : From</label></div>\r\n                            <div className=\"col-7\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                              <DateBox\r\n                                value={this.state.filter.dateFrom}\r\n                                type=\"date\" onValueChanged={(e) => {\r\n                                  this.handleChangeDate(e, 'from')\r\n                                }} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlDateTo\" className=\"title-field\">Date : To</label></div>\r\n                            <div className=\"col-7\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                              <DateBox value={this.state.filter.dateTo}\r\n                                type=\"date\" type=\"date\" onValueChanged={(e) => {\r\n                                  this.handleChangeDate(e, 'to')\r\n                                }} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n\r\n                      </div>\r\n                    </form>\r\n\r\n                    <div className=\"row form-group\">\r\n                      <div className=\"col-12\" style={{ textAlign: 'center' }}>\r\n                        <button class=\"btn-custom btn-reset \" style={{ marginRight: 20 }} onClick={this.handleReset}>RESET</button>\r\n                        <button class=\"btn-custom btn-search \">SEARCH</button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n            {/* content start*/}\r\n            <div className=\"wrap-content\">\r\n              <div className=\"box-search\" style={{ padding: 30 }}>\r\n                <div style={{ textAlign: 'end', padding: 15 }}>\r\n                  <Link to='/work/{\"action\":\"create\"}'>\r\n                    <button className=\"btn-custom btn-search \" style={{ width: 250 }}><span className=\"btn-icon\"><IoAddOutline /></span> <span className=\"btn-txt-icon\">Create Work</span></button>\r\n\r\n                  </Link>\r\n                </div>\r\n                <div style={{ padding: 20 }}>\r\n                  <DataGrid\r\n                    dataSource={this.state.data}\r\n                    allowColumnReordering={false}\r\n                    showBorders={true}\r\n                  >\r\n                    <Editing\r\n                      allowUpdating={true}\r\n                      allowDeleting={true}\r\n                      // allowAdding={false}\r\n                      mode=\"form\"\r\n                      useIcons={true}\r\n                    />\r\n                    <GroupPanel visible={false} />\r\n                    <SearchPanel visible={false} />\r\n                    <Grouping autoExpandAll={true} />\r\n                    <Paging defaultPageSize={10} />\r\n                    <Pager\r\n                      showPageSizeSelector={true}\r\n                      allowedPageSizes={[5, 10, 20]}\r\n                      showInfo={true}\r\n                      showNavigationButtons={true}\r\n                    />\r\n\r\n                    <Column dataField=\"projectName\" caption=\"PROJECT\" dataType=\"string\" />\r\n                    <Column dataField=\"projectPhase\" caption=\"PHASE\" dataType=\"string\" />\r\n                    <Column dataField=\"typeName\" caption=\"TYPE\" dataType=\"string\" />\r\n                    <Column dataField=\"workDetail\" caption=\"DETAIL\" dataType=\"string\" />\r\n                    <Column dataField=\"workManhour\" caption=\"MANHOURS\" dataType=\"string\" />\r\n                    <Column dataField=\"workTimeIn\" caption=\"TIMEIN\" dataType=\"string\" />\r\n                    <Column dataField=\"workTimeOut\" caption=\"TIMEOUT\" dataType=\"string\" />\r\n                    <Column type=\"buttons\" caption=\"EDIT DELETE\" width={110}>\r\n                      <DropDownButton\r\n                        text=\"...\"\r\n                        icon=\"print\"\r\n                        dropDownOptions={{ width: 230 }}\r\n                        items={['edit', 'delete']}\r\n                        onItemClick={this.onItemClick}\r\n                      />\r\n                      {/* <Button ... /> */}\r\n                      {/* <Button name=\"edit\" />\r\n                      <Button name=\"delete\" /> */}\r\n                    </Column>\r\n                    <Column className=\"color-red\" dataField=\"workDate\" groupIndex={0} groupCellRender={this.groupRender} />\r\n                  </DataGrid>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* content end*/}\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      {/* POPUP */}\r\n      <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg}\r\n        clearActive={() => {\r\n          this.setState({ isPopupError: false })\r\n          this.setState({ isPopupSuccess: false })\r\n        }} />\r\n\r\n      <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n        onClose={() => { this.setState({ isOpen: false }) }}\r\n        clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n        confirmActive={(e) => {\r\n          this.setState({ isOpen: false })\r\n          this.setState({ isPopupError: false })\r\n          this.setState({ isPopupSuccess: true })\r\n          this.setState({ isPopupMsg: msgAlertTitle.deleted })\r\n          console.log(\"Work -> render -> e\", e)\r\n        }}\r\n      />\r\n    </>);\r\n  }\r\n}\r\n\r\n\r\nexport default Work;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js",["205","206","207","208","209","210","211","212","213","214"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BsFillCalendarFill } from \"react-icons/bs\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport { FaClipboardList } from \"react-icons/fa\";\r\nimport { AiOutlineStepBackward } from \"react-icons/ai\";\r\nimport { AiFillStepForward } from \"react-icons/ai\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport AspNetData from 'devextreme-aspnet-data-nojquery';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from 'antd';\r\nimport { HomeOutlined, EyeOutlined, DeleteOutlined, FormOutlined } from '@ant-design/icons';\r\nimport DataGrid, { Column, Pager, Paging } from 'devextreme-react/data-grid';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\n\r\nconst url = 'https://js.devexpress.com/Demos/Mvc/api/TreeListTasks';\r\n\r\nconst tasksData = AspNetData.createStore({\r\n    key: 'Task_ID',\r\n    loadUrl: `${url}/Tasks`,\r\n    insertUrl: `${url}/InsertTask`,\r\n    updateUrl: `${url}/UpdateTask`,\r\n    deleteUrl: `${url}/DeleteTask`,\r\n    onBeforeSend: function(method, ajaxOptions) {\r\n        ajaxOptions.xhrFields = { withCredentials: true };\r\n    }\r\n});\r\n\r\nconst employeesData = AspNetData.createStore({\r\n    key: 'ID',\r\n    loadUrl: `${url}/TaskEmployees`\r\n});\r\n\r\nconst statusesData = [\r\n    'Not Started',\r\n    'Need Assistance',\r\n    'In Progress',\r\n    'Deferred',\r\n    'Completed'\r\n];\r\n\r\n\r\n\r\nclass Project extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: '', // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: '', // msg ของ Popup\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null\r\n            },\r\n            projectList: [],\r\n            jobtypeList: [],\r\n            data: [{\r\n                    projectId: '0001',\r\n                    projectName: 'name1',\r\n                    projectPhase: '1',\r\n                    projectDetail: '....',\r\n                    projectStartDate: '20/01/2020',\r\n                    projectEndDate: '31/12/2021',\r\n                    projectManDays: '50',\r\n                    customerEmail: 'test@test.com',\r\n                    updateDate: '01/01/2020',\r\n                    updateBy: 'joon',\r\n                    createDate: '01/01/2020',\r\n                    createBy: 'joon',\r\n                },\r\n                {\r\n                    projectId: '0002',\r\n                    projectName: 'name2',\r\n                    projectPhase: '1',\r\n                    projectDetail: '....',\r\n                    projectStartDate: '20/01/2020',\r\n                    projectEndDate: '31/12/2021',\r\n                    projectManDays: '50',\r\n                    customerEmail: 'test@test.com',\r\n                    updateDate: '01/01/2020',\r\n                    updateBy: 'joon',\r\n                    createDate: '01/01/2020',\r\n                    createBy: 'joon',\r\n                },\r\n                {\r\n                    projectId: '0003',\r\n                    projectName: 'name3',\r\n                    projectPhase: '1',\r\n                    projectDetail: '....',\r\n                    projectStartDate: '20/01/2020',\r\n                    projectEndDate: '31/12/2021',\r\n                    projectManDays: '50',\r\n                    customerEmail: 'test@test.com',\r\n                    updateDate: '01/01/2020',\r\n                    updateBy: 'joon',\r\n                    createDate: '01/01/2020',\r\n                    createBy: 'joon',\r\n                },\r\n                {\r\n                    projectId: '0004',\r\n                    projectName: 'name4',\r\n                    projectPhase: '1',\r\n                    projectDetail: '....',\r\n                    projectStartDate: '20/01/2020',\r\n                    projectEndDate: '31/12/2021',\r\n                    projectManDays: '50',\r\n                    customerEmail: 'test@test.com',\r\n                    updateDate: '01/01/2020',\r\n                    updateBy: 'joon',\r\n                    createDate: '01/01/2020',\r\n                    createBy: 'joon',\r\n                }\r\n            ]\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProjectList()\r\n        this.getJobtypeList()\r\n    }\r\n\r\n    getProjectList() {\r\n        this.setState({\r\n            projectList: [{\r\n                    projectId: '001',\r\n                    projectName: 'test1'\r\n                },\r\n                {\r\n                    projectId: '002',\r\n                    projectName: 'test2'\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    getJobtypeList() {\r\n        this.setState({\r\n            jobtypeList: [{\r\n                    typeId: '001',\r\n                    typeName: 'test1'\r\n                },\r\n                {\r\n                    typeId: '002',\r\n                    typeName: 'test2'\r\n                }\r\n            ]\r\n        })\r\n        console.log(\"Work -> getJobtypeList -> this.state.jobtypeList\", this.state.jobtypeList)\r\n    }\r\n\r\n    handleProjectChange = (event) => {\r\n\r\n        let temp = _.cloneDeep(this.state.filter)\r\n        temp.projectId = event.target.value\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: event.target.value\r\n            }\r\n        });\r\n    }\r\n    handleTypeChange = (event) => {\r\n\r\n        let temp = _.cloneDeep(this.state.filter)\r\n        temp.typeId = event.target.value\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: temp.projectId\r\n            }\r\n        });\r\n    }\r\n\r\n    handleChangeDate = (event, type) => {\r\n        let temp = _.cloneDeep(this.state.filter)\r\n        if (type === 'from') {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: event.value,\r\n                    dateTo: temp.dateTo,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: temp.dateFrom,\r\n                    dateTo: event.value,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    handleReset = () => {\r\n        console.log(\"Work -> handleReset -> this.state.filter\", this.state.filter)\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            console.log(\"Work -> handleReset -> ll\", this.state.filter)\r\n        }, 100);\r\n    }\r\n\r\n\r\n    delCellRender = (data) => {\r\n        console.log(\"project -> DelcellRender -> data\", data)\r\n        return <a onClick = {\r\n            () => {\r\n                console.log(\"project -> DelcellRender -> data\", data.data.typeId)\r\n                this.setState({ isOpen: true, isTypeShowConfirm: 'del', isTextMsg: msgPopupTitle.deleted, isDataPopUp: this.state.data })\r\n            }\r\n        } > < span style = {\r\n            { color: '#111', fontSize: '14pt' } } > < DeleteOutlined / > < /span></a > ;\r\n    }\r\n\r\n    editCellRender = (data) => {\r\n        return <Link to = { \"/project\" + `/{\"action\":\"edit\",\"projectId\":\"${data.data.typeId}\"}` } >\r\n            <\r\n            span style = {\r\n                { color: 'black', fontSize: '14pt' } } > < FormOutlined / > < /span> <\r\n            /Link>\r\n    }\r\n    viewCellRender = (data) => {\r\n        return <Link to = { \"/project\" + `/{\"action\":\"view\",\"projectId\":\"${data.data.typeId}\"}` } >\r\n            <\r\n            span style = {\r\n                { color: 'black', fontSize: '14pt' } } > < EyeOutlined / > < /span> <\r\n            /Link>\r\n    }\r\n    noCellRender = (data) => {\r\n        return <span style = {\r\n            { color: 'black', fontSize: '14pt' } } > { data.component.pageIndex() * data.component.pageSize() + data.rowIndex + 1 } < /span>\r\n    }\r\n\r\n    render() {\r\n\r\n        return ( < >\r\n\r\n            <\r\n            div className = \"App\" >\r\n            <\r\n            div id = \"boxType\"\r\n            className = \"container-box-content\" >\r\n            <\r\n            div className = \"row wrap-container\" >\r\n            <\r\n            Breadcrumb >\r\n            <\r\n            Breadcrumb.Item href = \"#\" >\r\n            <\r\n            HomeOutlined / >\r\n            <\r\n            span className = \"breadcrum-custom\" > Project < /span> <\r\n            /Breadcrumb.Item> <\r\n            /Breadcrumb>\r\n\r\n            <\r\n            div className = \"wrap-content\" >\r\n            <\r\n            div className = \"box-search\" >\r\n            <\r\n            div className = \"box-title-search\" >\r\n            <\r\n            p className = \"font-size-search\" > Search Project < /p>\r\n\r\n            <\r\n            /div> <\r\n            div className = \"box-content\" >\r\n            <\r\n            div className = \"box-search-border\" >\r\n            <\r\n            form >\r\n\r\n            <\r\n            div className = \"row form-group\" >\r\n            <\r\n            div className = \"col-4\"\r\n            style = {\r\n                { textAlign: 'right' } } >\r\n\r\n            <\r\n            /div>\r\n\r\n\r\n            <\r\n            /div> { /* Job Type Name */ } <\r\n            div className = \"row form-group\" >\r\n            <\r\n            div className = \"col-3\"\r\n            style = {\r\n                { textAlign: 'right' } } > < label className = \"title-field\"\r\n            for = \"txtProject Name\" > Project Name < span style = {\r\n                { color: 'red' } } > * < /span></label > < /div> <\r\n            input type = \"text\"\r\n            class = \"form-control col-6\"\r\n            id = \"txtJob Type\" / >\r\n            <\r\n            /div>\r\n\r\n            { /* </div> */ }\r\n\r\n            <\r\n            /form>\r\n\r\n            <\r\n            div className = \"row form-group\" >\r\n            <\r\n            div className = \"col-12\"\r\n            style = {\r\n                { textAlign: 'center' } } >\r\n            <\r\n            button class = \"btn-custom btn-reset \"\r\n            style = {\r\n                { marginRight: 20 } }\r\n            onClick = { this.handleReset } > RESET < /button> <\r\n            button class = \"btn-custom btn-search \" > SEARCH < /button> <\r\n            /div> <\r\n            /div> <\r\n            /div>\r\n\r\n            <\r\n            /div>\r\n\r\n            <\r\n            /div> <\r\n            /div>\r\n\r\n            { /* content start*/ } <\r\n            div className = \"wrap-content\" >\r\n            <\r\n            div className = \"box-search\"\r\n            style = {\r\n                { padding: 30 } } >\r\n            <\r\n            div style = {\r\n                { textAlign: 'end', padding: 15 } } >\r\n            <\r\n            Link to = '/project/{\"action\":\"create\"}' >\r\n            <\r\n            button className = \"btn-custom btn-search \"\r\n            style = {\r\n                { width: 250 } } > < span className = \"btn-icon\" > < IoAddOutline / > < /span> <span className=\"btn-txt-icon\">Create Project</span > < /button> <\r\n            /Link> <\r\n            /div>\r\n\r\n            { /* data grid */ }\r\n\r\n            <\r\n            div style = {\r\n                { padding: 20 } } >\r\n            <\r\n            DataGrid dataSource = { this.state.data }\r\n            showBorders = { true }\r\n            showRowLines = { true } >\r\n            <\r\n            Paging defaultPageSize = { 3 }\r\n            /> <\r\n            Pager showPageSizeSelector = { true }\r\n            allowedPageSizes = {\r\n                [5, 10, 20] }\r\n            showInfo = { true }\r\n            showNavigationButtons = { true }\r\n            />\r\n\r\n            <\r\n            Column width = \"100\"\r\n            caption = \"No\"\r\n            alignment = \"center\"\r\n            cellRender = { this.noCellRender }\r\n            dataType = \"string\" / >\r\n            <\r\n            Column caption = \"Project Name\"\r\n            dataField = \"projectName\"\r\n            dataType = \"string\" / >\r\n            <\r\n            Column caption = \"Phase\"\r\n            dataField = \"projectPhase\"\r\n            dataType = \"string\" / >\r\n            <\r\n            Column width = \"100\"\r\n            alignment = \"center\"\r\n            caption = \"View\"\r\n            cellRender = { this.viewCellRender }\r\n            /> <\r\n            Column width = \"100\"\r\n            alignment = \"center\"\r\n            caption = \"Edit\"\r\n            cellRender = { this.editCellRender }\r\n            /> <\r\n            Column width = \"100\"\r\n            alignment = \"center\"\r\n            cellRender = { this.delCellRender }\r\n            caption = \"Delete\" / >\r\n\r\n            <\r\n            /DataGrid> <\r\n            /div>\r\n\r\n\r\n            <\r\n            /div> <\r\n            /div> { /* content end*/ }\r\n\r\n\r\n\r\n            <\r\n            /div>\r\n\r\n            <\r\n            /div> <\r\n            /div> { /* POPUP */ } <\r\n            AlertPopUp successStatus = { this.state.isPopupSuccess }\r\n            errorStatus = { this.state.isPopupError }\r\n            message = { this.state.isPopupMsg }\r\n            clearActive = {\r\n                () => {\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: false })\r\n                }\r\n            }\r\n            />\r\n\r\n            <\r\n            ConfirmPopup open = { this.state.isOpen }\r\n            type = { this.state.isTypeShowConfirm }\r\n            text = { this.state.isTextMsg }\r\n            data = { this.state.isDataPopUp }\r\n            del = { false }\r\n            onClose = {\r\n                () => { this.setState({ isOpen: false }) } }\r\n            clearActive = {\r\n                (e) => { this.setState({ isOpen: false }) } }\r\n            confirmActive = {\r\n                (e) => {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.deleted })\r\n                    console.log(\"Work -> render -> e\", e)\r\n                }\r\n            }\r\n            />\r\n\r\n            <\r\n            />\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Project;","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js",["233"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\config.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js",["234","235","236","237","238","239","240","241","242","243"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js",["244","245","246","247","248","249","250","251","252","253","254","255"],"C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\index.js",[],["256","257"],"C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js",[],"C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\App.js",[],"C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js",["258","259","260","261","262","263"],"import React, { Component } from 'react';\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { IoPersonCircleOutline } from \"react-icons/io5\";\r\nimport { NavLink, Link } from 'react-router-dom'\r\n// import { GrWorkshop } from \"react-icons/gr\";\r\nimport { PartitionOutlined, ProjectOutlined, FundProjectionScreenOutlined  } from '@ant-design/icons';\r\n\r\nimport { AiOutlineFundProjectionScreen } from \"react-icons/ai\";\r\nimport { VscGroupByRefType } from \"react-icons/vsc\";\r\n\r\nclass Head extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"gx-header-horizontal gx-header-horizontal-dark gx-below-header-horizontal\" style={{position: 'sticky', top: 0, zIndex: 9999}}>\r\n          <header class=\"ant-layout-header gx-header-horizontal-main\">\r\n            <div class=\"gx-container\">\r\n              <div class=\"gx-header-horizontal-main-flex\">\r\n                <div class=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n                  <div class=\"gx-search-bar gx-lt-icon-search-bar-lg\">\r\n                    <div class=\"gx-form-group\">\r\n                      {/* <input class=\"ant-input\" type=\"search\" placeholder=\"Search in app...\" value=\"\" />\r\n                      <span class=\"gx-search-icon gx-pointer\">\r\n                        <i class=\"icon icon-search\"></i>\r\n                      </span> */}\r\n\r\n                      <span style={{ color: '#fff', fontSize: '22pt', fontWeight: 700 }}>SMARTADMIN</span>\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <ul class=\"gx-header-notifications gx-ml-auto\">\r\n                  <li class=\"gx-notify\" style={{fontSize: '20pt'}}>\r\n                  <Link to=\"/work\" >\r\n                    <span class=\"gx-pointer gx-d-block\">\r\n\r\n              {/* Icon Work*/} \r\n                        <span className=\"icon-header\"> < PartitionOutlined style={{color: '#fff'}}/>  </span>\r\n                      Work\r\n                    </span>\r\n\r\n                </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\" style={{fontSize: '20pt'}}>\r\n                  <Link to=\"/project\" >\r\n                    <span class=\"gx-pointer gx-status-pos gx-d-block\">\r\n                     \r\n            {/* Icon  Project*/}\r\n            <span className=\"icon-header\"> < ProjectOutlined/>  </span>\r\n            \r\n                      Project\r\n                    </span>\r\n                    </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\">\r\n                  <Link to=\"/jobtype\" style={{fontSize: '20pt'}}>\r\n                    <span class=\"gx-pointer gx-status-pos gx-d-block\">\r\n\r\n          {/* Icon Job type */}\r\n                    <span className=\"icon-header\">  < FundProjectionScreenOutlined  />  </span>\r\n                    \r\n                      Job type\r\n                    </span>\r\n                    </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\" style={{color: '#fff'}}>\r\n                    <span style={{color: '#fff', fontSize: 36}} class=\"gx-pointer gx-status-pos gx-d-block\">\r\n                    <IoPersonCircleOutline />\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </header>\r\n        </div>\r\n        {/* <Navbar className=\"Navbar-color\" expand=\"lg\" >\r\n          <Navbar.Brand href=\"/\" className=\"Navbar-brand-Style\">SMARTADMIN</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"/work\" style={{ marginLeft: \"600px\" }}>work</Nav.Link>\r\n\r\n              <Nav.Link href=\"/projects\" style={{ marginLeft: \"20px\" }}>project</Nav.Link>\r\n\r\n              <Nav.Link href=\"/jobtype\" style={{ marginLeft: \"20px\" }}>job type</Nav.Link>\r\n            </Nav>\r\n\r\n            <Form inline>\r\n            </Form>\r\n          </Navbar.Collapse>\r\n        </Navbar> */}\r\n\r\n        {/* <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#features\">Features</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n          </Nav>\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-info\">Search</Button>\r\n          </Form>\r\n        </Navbar> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Head;","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js",["264"],"import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nimport Home from '../pages/home'\r\nimport Project from '../pages/Project'\r\nimport JobType from '../pages/JobType'\r\nimport Work from '../pages/Work'\r\nimport ActionsWork from '../pages/Work/create-edit-view'\r\nimport ActionJobType from '../pages/JobType/create-edit'\r\nimport ActionsProject from '../pages/Project/create-edit'\r\n\r\n\r\n\r\nexport default () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Home} />\r\n    <Route exact path=\"/jobtype\" component={JobType} />\r\n    <Route exact path=\"/project\" component={Project} />\r\n    <Route exact path=\"/work\" component={Work} />\r\n    <Route exact path=\"/work/:query?\" render={(props) => <ActionsWork {...props} /> } />\r\n    <Route exact path=\"/project/:query?\" render={(props) => <ActionsProject {...props} /> } />\r\n    <Route exact path=\"/jobtype/:query?\" render={(props) => <ActionJobType {...props} /> } />\r\n    {/* <Route exact path=\"/work/:action?/:workId?\" render={(props) => <ActionsWork {...props} /> } /> */}\r\n    {/* <Route exact path=\"/jobtype/:action?/:typeId\" render={(props) => <ActionJobType {...props} /> } />\r\n    <Route exact path=\"/project/:action?/:projectId\" render={(props) => <ActionsProject {...props} /> } /> */}\r\n   \r\n  </Switch>\r\n)","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js",["265","266","267","268","269","270","271","272","273","274","275","276","277"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from 'antd';\r\nimport { HomeOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\n\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst msgValid = configService.validDateFill;\r\nconst position = { of: '#App' };\r\nclass ActionJobType extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        console.log(\"Actionsjobtype -> constructor -> props\", props)\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query))\r\n        let param = JSON.parse(tempQuery)\r\n        console.log(\"ActionJobType -> constructor -> param\", param)\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false,  // alert error case\r\n            isPopupMsg: '',  // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: '', // msg ของ Popup\r\n            data: {\r\n                typeName: null,\r\n                typeCode: null,\r\n                typeId: null,\r\n            },\r\n            projectList: [],\r\n            typeList: [],\r\n            params: param,\r\n            isSubmit: false,\r\n            valid_typeName: false,\r\n            valid_typeCode: false,\r\n            loadPanelVisible: false\r\n        };\r\n\r\n        this.onTypeNameChange = this.onTypeNameChange.bind(this);\r\n        this.onTypeCodeChange = this.onTypeCodeChange.bind(this);\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.state.params.action === 'edit') {\r\n            this.fnGetDataView();\r\n        }\r\n      \r\n    }\r\n\r\n    onTypeNameChange(event) {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                typeName: event.target.value\r\n            }\r\n        });\r\n\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ valid_typeName: false })\r\n        }\r\n    }\r\n    onTypeCodeChange(event) {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                typeCode: event.target.value\r\n            }\r\n        });\r\n\r\n        console.log(\"TCL: ActionJobType -> onTypeCodeChange -> event.target.value\", event.target.value)\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ valid_typeCode: false })\r\n        }\r\n    }\r\n\r\n    checkValidate = () => {\r\n        console.log(this.state.data.typeName);\r\n        console.log(this.state.data.typeCode);\r\n        if (this.state.data.typeName && this.state.data.typeCode) {\r\n            this.setState({ isOpen: true, isTypeShowConfirm: 'save', isTextMsg: msgPopupTitle.saved, isDataPopUp: this.state.data, valid_typeName: false, valid_typeCode: false })\r\n        } else {\r\n            if (!this.state.data.typeName) {\r\n                this.setState({ valid_typeName: true })\r\n            }\r\n            if (!this.state.data.typeCode) {\r\n                this.setState({ valid_typeCode: true })\r\n            }\r\n        }\r\n    }\r\n\r\n    confirmSave = async (data) => {\r\n        this.setState({ loadPanelVisible: true })\r\n        console.log(\"TCL: ActionJobType -> confirmSave -> data\", data)\r\n        try {\r\n            let body = {}\r\n            body.typeName = data.typeName;\r\n            body.typeCode = data.typeCode;\r\n            var response;\r\n            if (this.state.params.action === 'edit') {\r\n                response = await axios.put(api + '/type/' + this.state.data.typeId, body)\r\n            } else {\r\n                response = await axios.post(api + '/type', body)\r\n            }\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: this.state.params.action === 'edit' ? msgAlertTitle.updated : msgAlertTitle.saved })\r\n                } else {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: true })\r\n                    this.setState({ isPopupSuccess: false })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n                }\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            this.setState({ isOpen: false })\r\n            this.setState({ isPopupError: true })\r\n            this.setState({ isPopupSuccess: false })\r\n            this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n            console.log(\"TCL: JobType -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    fnGetDataView = async () => {\r\n        try {\r\n\r\n            this.setState({ loadPanelVisible: true })\r\n            let filter = {\r\n                \"typeId\": this.state.params.jobTypeId\r\n            }\r\n            const response = await axios.get(api + '/type/' + this.state.params.jobTypeId)\r\n            console.log(\"TCL: ActionJobType -> fnGetDataView -> response\", response)\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({\r\n                        data: {\r\n                            typeName: response.data.resultData[0].typeName,\r\n                            typeCode: response.data.resultData[0].typeCode,\r\n                            typeId: response.data.resultData[0].typeId,\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        data: {\r\n                            typeName: null,\r\n                            typeCode: null,\r\n                            typeId: null,\r\n                        }\r\n                    })\r\n                }\r\n\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            console.log(\"TCL: ActionJobType -> fnGetDataView -> error\", error)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<>\r\n\r\n            <div className=\"App\">\r\n                <div id=\"boxType\" className=\"container-box-content\">\r\n                    <div className=\"row wrap-container\">\r\n\r\n                        <Breadcrumb>\r\n                            <Breadcrumb.Item href=\"/jobtype\">\r\n                                <HomeOutlined />\r\n                                <span className=\"breadcrum-custom\">Job Type</span>\r\n                            </Breadcrumb.Item>\r\n                            {/* <Breadcrumb.Item href=\"#\"> */}\r\n                            {this.state.params.action === 'create' ? <span className=\"breadcrum-custom\">  Create Job type</span> : null}\r\n                            {this.state.params.action === 'edit' ? <span className=\"breadcrum-custom\">  Update Job type</span> : null}\r\n\r\n                            {/* </Breadcrumb.Item> */}\r\n                        </Breadcrumb>\r\n\r\n                        <div className=\"wrap-content\">\r\n                            <div className=\"box-action\">\r\n                                <div className=\"box-title-search\">\r\n                                    <div className=\"box-action-content\">\r\n                                        {this.state.params.action === 'create' ? <p className=\"font-size-search\">Create Job type</p> : null}\r\n                                        {this.state.params.action === 'edit' ? <p className=\"font-size-search\">Update Job type</p> : null}\r\n\r\n                                        {/* Job Type Name */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className={`col-5`} style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtJobTypeName\">Job Type Name<span style={{ color: 'red' }}>*</span></label></div>\r\n                                            <div className=\"col-3\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class={`form-control ${this.state.valid_typeName && this.state.isSubmit ? 'has-error-input' : ''}`} id=\"txtJobTypeName\" value={this.state.data.typeName} onChange={this.onTypeNameChange} />\r\n                                                {this.state.valid_typeName && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                        {/* Code */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-5\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCode\">Code <span style={{ color: 'red' }}>*</span></label></div>\r\n                                            <div className=\"col-3\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class={`form-control  ${this.state.valid_typeCode && this.state.isSubmit ? 'has-error-input' : ''}`} id=\"txtCode\" value={this.state.data.typeCode} onChange={this.onTypeCodeChange} />\r\n                                                {this.state.valid_typeCode && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div style={{ textAlign: 'right' }}>\r\n\r\n                                            <p className=\"title-field\" ><span style={{ color: 'red' }}>*</span> Items marked with an asterisk are required</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row form-group\">\r\n                                    <div className=\"col-12\" style={{ textAlign: 'right' }}>\r\n                                        {this.state.params.action !== 'view' ?\r\n                                            <Link to='/jobtype'>\r\n                                                <button class=\"btn-custom btn-reset\" style={{ marginRight: 20 }} onClick={this.handleReset}>CANCEL</button>\r\n                                            </Link>\r\n                                            : null}\r\n\r\n                                        {this.state.params.action !== 'view' ? <button class=\"btn-custom btn-search\" style={{ marginRight: 20 }} onClick={() => {\r\n                                            this.setState({ isSubmit: true })\r\n                                            this.checkValidate()\r\n                                        }}>\r\n                                            {this.state.params.action === 'edit' ? 'UPDATE' : 'CREATE'}\r\n                                        </button> : null}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <LoadPanel\r\n                shadingColor=\"rgba(0,0,0,0.4)\"\r\n                position={position}\r\n                visible={this.state.loadPanelVisible}\r\n            />\r\n\r\n            {/* POPUP */}\r\n            <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg}\r\n                clearActive={() => {\r\n                    if (this.state.isPopupSuccess) {\r\n                        this.props.history.push('/jobtype')\r\n                    }\r\n                    this.setState({ isPopupError: false });\r\n                    this.setState({ isPopupSuccess: false });\r\n                }} />\r\n\r\n            <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n                onClose={() => { this.setState({ isOpen: false }) }}\r\n                clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n                confirmActive={(e) => {\r\n                    console.log(\"Work -> render -> e\", e)\r\n                    this.confirmSave(e)\r\n\r\n                }}\r\n            />\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionJobType;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js",["278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from 'antd';\r\nimport { HomeOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\n\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst msgValid = configService.validDateFill;\r\nconst format = 'HH:mm';\r\nconst Option = Select.Option;\r\nconst position = { of: '#App' };\r\nclass ActionsProject extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        console.log(\"Actionsproject -> constructor -> props\", props)\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query))\r\n        let param = JSON.parse(tempQuery)\r\n\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false,  // alert error case\r\n            isPopupMsg: '',  // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: '', // msg ของ Popup\r\n            data: {\r\n                projectId: null,\r\n                projectName: null,\r\n                projectPhase: null,\r\n                projectDetail: null,\r\n                projectStartDate: null,\r\n                projectEndDate: null,\r\n                projectManDays: null,\r\n                customerEmail: null,\r\n                createDate: null,\r\ncreateBy: null,\r\nupdateDate: null,\r\nupdateBy: null,\r\n            },\r\n            params: param,\r\n            isSubmit: false,\r\n            isValid_startDate: false,\r\n            isValid_endDate: false,\r\n            isValid_projectName: false,\r\n            isValid_phase: false,\r\n            isValid_detail: false,\r\n            isValid_email: false,\r\n            inputDate: {\r\n                startDate: '',\r\n                endDate: ''\r\n            },\r\n            greater: {\r\n                startDate: '',\r\n                endDate: ''\r\n            },\r\n            startGreater: false,\r\n            endGreater: false,\r\n            loadPanelVisible: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"TCL: ActionsProject -> componentDidMount -> this.state.params\", this.state.params)\r\n        if (this.state.params.action !== 'create') {\r\n            this.fnGetDataView();\r\n        }\r\n    }\r\n\r\n    handleChangeDate = (event, type) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        if (type === 'start') {\r\n            this.setState({\r\n                data: {\r\n                    ...this.state.data,\r\n                    projectStartDate: event.value,\r\n                }\r\n            });\r\n            this.setState({ isValid_startDate: false })\r\n        } else {\r\n            this.setState({\r\n                data: {\r\n                    ...this.state.data,\r\n                    projectEndDate: event.value,\r\n                }\r\n            });\r\n            this.setState({ isValid_endDate: false })\r\n\r\n        }\r\n        this.checkGreaterValue();\r\n        this.checkGreaterStartDateValue();\r\n        this.checkGreaterStopDateValue();\r\n    }\r\n\r\n    onProjectNameChange = (event) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                projectName: event.target.value\r\n            }\r\n        });\r\n\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ isValid_projectName: false })\r\n        }\r\n    }\r\n\r\n    onProjectPhaseChange = (event) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                projectPhase: event.target.value\r\n            }\r\n        });\r\n\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ isValid_phase: false })\r\n        }\r\n    }\r\n\r\n    onProjectDetailChange = (event) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                projectDetail: event.target.value\r\n            }\r\n        });\r\n\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ isValid_detail: false })\r\n        }\r\n    }\r\n\r\n    onCustomerEmailChange = (event) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                customerEmail: event.target.value\r\n            }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            if (this.state.data.customerEmail && !this.checkValidEmail()) {\r\n                this.setState({ isValid_email: true })\r\n            } else {\r\n                this.setState({ isValid_email: false })\r\n            }\r\n        }, 100);\r\n    }\r\n    onManDaysChange = (event) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                projectManDays: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    checkValidate = () => {\r\n        let vaildProjectName = this.checkValidValue('name');\r\n        let vaildProjectPhase = this.checkValidValue('phase');\r\n        let vaildProjectDetail = this.checkValidValue('detail');\r\n        let vaildProjectStart = this.checkValidValue('start');\r\n        let vaildProjectEnd = this.checkValidValue('end');\r\n        let vaildEmail = this.state.data.customerEmail ? this.checkValidEmail() : true;\r\n        if (vaildProjectStart && vaildProjectEnd) {\r\n            this.checkValidValue('date')\r\n        }\r\n        if (vaildProjectName && vaildProjectPhase && vaildProjectDetail && vaildProjectStart && vaildProjectEnd && !this.state.greater.startDate && !this.state.greater.endDate && !this.state.startGreater && !this.state.endGreater && vaildEmail) {\r\n            this.setState({ isOpen: true, isTypeShowConfirm: 'save', isTextMsg: this.state.params.action === 'edit' ? msgPopupTitle.saved : msgPopupTitle.saved, isDataPopUp: this.state.data })\r\n        } else {\r\n\r\n            console.log(\"TCL: ActionsProject -> checkValidate -> \", 'กรอกข้อมูลไม่ครบหรือ ติด valid')\r\n        }\r\n    }\r\n\r\n    checkValidValue = (type) => {\r\n        if (type === 'name') {\r\n            if (!this.state.data.projectName || this.state.data.projectName === '') {\r\n                this.setState({ isValid_projectName: true })\r\n                return false;\r\n            } else {\r\n                this.setState({ isValid_projectName: false })\r\n                return true;\r\n            }\r\n        } else if (type === 'phase') {\r\n            if (!this.state.data.projectPhase || this.state.data.projectPhase === '') {\r\n                this.setState({ isValid_phase: true })\r\n                return false;\r\n            } else {\r\n                this.setState({ isValid_phase: false })\r\n                return true;\r\n            }\r\n        } else if (type === 'detail') {\r\n            if (!this.state.data.projectDetail || this.state.data.projectDetail === '') {\r\n                this.setState({ isValid_detail: true })\r\n                return false;\r\n            } else {\r\n                this.setState({ isValid_detail: false })\r\n                return true;\r\n            }\r\n        } else if (type === 'start') {\r\n            if (!this.state.data.projectStartDate || this.state.data.projectStartDate === '') {\r\n                this.setState({ isValid_startDate: true })\r\n                return false;\r\n            } else {\r\n                this.setState({ isValid_startDate: false })\r\n                return true;\r\n            }\r\n        } else if (type === 'end') {\r\n            if (!this.state.data.projectEndDate || this.state.data.projectEndDate === '') {\r\n                this.setState({ isValid_endDate: true })\r\n                return false;\r\n            } else {\r\n                this.setState({ isValid_endDate: false })\r\n                return true;\r\n            }\r\n        } else if (type === 'date') {\r\n            this.checkGreaterValue()\r\n        }\r\n    }\r\n\r\n    checkGreaterValue = () => {\r\n        if (!this.state.data.projectEndDate || !this.state.data.projectStartDate || this.checkNullObjectMany(this.state.inputDate)) {\r\n            this.setState({\r\n                greater: {\r\n                    startDate: false,\r\n                    endDate: false,\r\n                }\r\n            })\r\n        }\r\n        let checkGreaterCreatedDate = this.checkGreater(this.state.data.projectEndDate, this.state.data.projectStartDate);\r\n        console.log(\"TCL: ActionsProject -> checkGreaterValue -> checkGreaterCreatedDate\", checkGreaterCreatedDate)\r\n        this.setState({\r\n            greater: {\r\n                startDate: checkGreaterCreatedDate,\r\n                endDate: checkGreaterCreatedDate,\r\n            }\r\n        })\r\n    }\r\n\r\n    checkNullObjectMany = (dataObject) => {\r\n        for (let key in dataObject) {\r\n\r\n            for (let item in dataObject[key]) {\r\n                if (dataObject[key][item]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    checkGreater(dateFrom, dateTo) {\r\n        let greater;\r\n        if (dateFrom && dateTo) {\r\n            greater = dateFrom < dateTo ? true : false;\r\n        } else {\r\n            greater = false;\r\n        }\r\n        return greater;\r\n    }\r\n\r\n    checkGreaterStartDateValue = () => {\r\n        if (!this.state.data.projectStartDate || !this.state.data.projectEndDate || this.checkNullObjectMany(this.inputDate)) {\r\n            this.setState({ startGreater: false })\r\n        }\r\n        let checkGreaterCreatedDate = this.checkGreaterStartDate(this.state.data.projectEndDate, this.state.data.projectStartDate);\r\n        this.setState({ startGreater: checkGreaterCreatedDate })\r\n    }\r\n\r\n    checkGreaterStopDateValue = () => {\r\n        if (!this.state.data.projectStartDate || !this.state.data.projectEndDate || this.checkNullObjectMany(this.inputDate)) {\r\n            this.setState({ endGreater: false })\r\n        }\r\n        let checkGreaterCreatedDate = this.checkGreaterStopDate(this.state.data.projectEndDate, this.state.data.projectStartDate);\r\n        this.setState({ endGreater: checkGreaterCreatedDate })\r\n    }\r\n\r\n    checkGreaterStartDate = () => {\r\n        let greaterStart;\r\n        greaterStart = false;\r\n        return greaterStart;\r\n    }\r\n\r\n    checkGreaterStopDate = (dataFrom, dataTo) => {\r\n        let greaterStop;\r\n        let now = moment().format();\r\n        if (dataTo && dataFrom) {\r\n            let stop = moment(dataFrom).format();\r\n            greaterStop = stop < now ? true : false;\r\n        } else {\r\n            greaterStop = false;\r\n        }\r\n        return greaterStop;\r\n\r\n    }\r\n\r\n    checkValidEmail = () => {\r\n        let reg = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n        const match = this.state.data.customerEmail ? this.state.data.customerEmail.match(reg) : null;\r\n        console.log(\"TCL: ActionsProject -> checkValidEmail -> match\", match)\r\n        if (match && match.length > 0) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    confirmSave = async (data) => {\r\n        this.setState({ loadPanelVisible: true })\r\n        console.log(\"TCL: ActionJobType -> confirmSave -> data\", data)\r\n        try {\r\n            let body = {}\r\n            body.projectName = data.projectName;\r\n            body.projectPhase = data.projectPhase;\r\n            body.projectDetail = data.projectDetail;\r\n            body.projectStartDate = moment(data.projectStartDate).format('YYYY-MM-DD HH:mm:ss');\r\n            body.projectEndDate = moment(data.projectEndDate).format('YYYY-MM-DD HH:mm:ss');\r\n            if (data.projectManDays) {\r\n                body.projectManDays = data.projectManDays;\r\n            }\r\n            if (data.customerEmail) {\r\n                body.customerEmail = data.customerEmail;\r\n            }\r\n            console.log(\"TCL: ActionsProject -> confirmSave -> body\", body)\r\n            var response;\r\n            if (this.state.params.action === 'edit') {\r\n                response = await axios.put(api + '/project/' + this.state.data.projectId, body)\r\n            } else {\r\n                response = await axios.post(api + '/project', body)\r\n            }\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: this.state.params.action === 'edit' ? msgAlertTitle.updated : msgAlertTitle.saved })\r\n                } else {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: true })\r\n                    this.setState({ isPopupSuccess: false })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n                }\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            this.setState({ isOpen: false })\r\n            this.setState({ isPopupError: true })\r\n            this.setState({ isPopupSuccess: false })\r\n            this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n            console.log(\"TCL: JobType -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    fnGetDataView = async () => {\r\n        try {\r\n\r\n            this.setState({ loadPanelVisible: true })\r\n            let filter = {\r\n                \"projectId\": this.state.params.projectId\r\n            }\r\n            const response = await axios.get(api + '/project/' + this.state.params.projectId)\r\n            console.log(\"TCL: ActionJobType -> fnGetDataView -> response\", response)\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({\r\n                        data: {\r\n                            projectId: response.data.resultData[0].projectId,\r\n                            projectName: response.data.resultData[0].projectName,\r\n                            projectPhase: response.data.resultData[0].projectPhase,\r\n                            projectDetail: response.data.resultData[0].projectDetail,\r\n                            projectStartDate: moment(response.data.resultData[0].projectStartDate, 'DD/MM/YYYY HH:mm:ss').toDate(),\r\n                            projectEndDate: moment(response.data.resultData[0].projectEndDate, 'DD/MM/YYYY HH:mm:ss').toDate(),\r\n                            projectManDays: response.data.resultData[0].projectManDays,\r\n                            customerEmail: response.data.resultData[0].customerEmail,\r\n                            createDate: response.data.resultData[0].createDate,\r\n                            createBy: response.data.resultData[0].createBy,\r\n                            updateDate: response.data.resultData[0].updateDate,\r\n                            updateBy: response.data.resultData[0].updateBy,\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        data: {\r\n                            projectId: null,\r\n                            projectName: null,\r\n                            projectPhase: null,\r\n                            projectDetail: null,\r\n                            projectStartDate: null,\r\n                            projectEndDate: null,\r\n                            projectManDays: null,\r\n                            customerEmail: null,\r\n                            createDate: null,\r\n                            createBy: null,\r\n                            updateDate: null,\r\n                            updateBy: null,\r\n                        }\r\n                    })\r\n                }\r\n\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            console.log(\"TCL: ActionJobType -> fnGetDataView -> error\", error)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (<>\r\n\r\n            <div className=\"App\" id=\"App\">\r\n                <div id=\"boxType\" className=\"container-box-content\">\r\n                    <div className=\"row wrap-container\">\r\n\r\n                        <Breadcrumb>\r\n                            <Breadcrumb.Item href=\"/project\">\r\n                                <HomeOutlined />\r\n                                <span className=\"breadcrum-custom\">project</span>\r\n                            </Breadcrumb.Item>\r\n                            {/* <Breadcrumb.Item href=\"#\"> */}\r\n                            {this.state.params.action === 'create' ? <span className=\"breadcrum-custom\">Create project</span> : null}\r\n                            {this.state.params.action === 'edit' ? <span className=\"breadcrum-custom\">  Update project</span> : null}\r\n                            {this.state.params.action === 'view' ? <span className=\"breadcrum-custom\">  Detail project</span> : null}\r\n\r\n                            {/* </Breadcrumb.Item> */}\r\n                        </Breadcrumb>\r\n\r\n\r\n                        <div className=\"wrap-content\">\r\n                            <div className=\"box-action\">\r\n                                <div className=\"box-title-search\">\r\n                                    <div className=\"box-action-content\">\r\n                                        {this.state.params.action === 'create' ? <p className=\"font-size-search\">Create Project</p> : null}\r\n                                        {this.state.params.action === 'edit' ? <p className=\"font-size-search\">Update Project</p> : null}\r\n                                        {this.state.params.action === 'view' ? <p className=\"font-size-search\">Detail Project</p> : null}\r\n\r\n                                        {/* Start Date */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlStartDate\">Start Date {this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className={`col-4`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <DateBox\r\n                                                    value={this.state.data.projectStartDate}\r\n                                                    disabled={this.state.params.action === 'view'}\r\n                                                    displayFormat=\"dd/MM/yyyy\"\r\n                                                    type=\"date\" onValueChanged={(e) => {\r\n                                                        this.handleChangeDate(e, 'start')\r\n                                                    }}\r\n                                                    className={`${this.state.isValid_startDate && this.state.isSubmit || this.state.greater.startDate || this.state.startGreater ? 'has-error-input' : ''}`} />\r\n                                                {this.state.isValid_startDate && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                                {this.state.greater.startDate || this.state.startGreater ? <span className=\"color-red\">{msgValid.project.validStartDatemoreEndDate}</span> : null}\r\n\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* End Date */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlEndDate\">End Date{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className={`col-4`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <DateBox\r\n                                                    value={this.state.data.projectEndDate}\r\n                                                    displayFormat=\"dd/MM/yyyy\"\r\n                                                    disabled={this.state.params.action === 'view'}\r\n                                                    type=\"date\" onValueChanged={(e) => {\r\n                                                        this.handleChangeDate(e, 'end')\r\n                                                    }}\r\n                                                    className={`${this.state.isValid_endDate && this.state.isSubmit || this.state.greater.endDate || this.state.endGreater || this.state.greater.startDate ? 'has-error-input' : ''}`} />\r\n                                                {this.state.isValid_endDate && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                                {this.state.greater.endDate || this.state.greater.startDate && !this.state.endGreater && this.state.data.projectEndDate ? <span className=\"color-red\">{msgValid.project.validEndDatelessStartDate}</span> : null}\r\n                                                {/* {!this.state.greater.stopDate && this.state.endGreater && this.state.data.projectEndDate ? <span className=\"color-red\">The end date must be greater than the start date. </span> : null} */}\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* Project */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlProject\">Project{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className=\"col-4\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class={`form-control  ${this.state.isValid_projectName && this.state.isSubmit ? 'has-error-input' : ''}`} id=\"txtProject\"\r\n                                                    value={this.state.data.projectName} onChange={this.onProjectNameChange} disabled={this.state.params.action === 'view'}/>\r\n                                                {this.state.isValid_projectName && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                            </div>\r\n\r\n                                        </div>\r\n\r\n                                        {/* Phase */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlPhase\">Phase{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className=\"col-4\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class={`form-control  ${this.state.isValid_phase && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                    id=\"txtPhase\" value={this.state.data.projectPhase} onChange={this.onProjectPhaseChange} disabled={this.state.params.action === 'view'}/>\r\n                                                {this.state.isValid_phase && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/*Man Day */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtManDay\">Man Day{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}></span> : null}</label></div>\r\n                                            <div className=\"col-5\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class=\"form-control col-5\" id=\"txtManDay\" value={this.state.data.projectManDays} onChange={this.onManDaysChange} disabled={this.state.params.action === 'view'}/>\r\n                                          \r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* Detail */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtDetail\">Detail {this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className=\"col-5\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <textarea rows=\"3\" type=\"text\" class={`form-control  ${this.state.isValid_detail && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                    id=\"txtDetail\" value={this.state.data.projectDetail} onChange={this.onProjectDetailChange} disabled={this.state.params.action === 'view'}/>\r\n                                                {this.state.isValid_detail && this.state.isSubmit ? <span className=\"color-red\">{msgValid.req}</span> : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* CustomerEmail */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCustomerEmail\">Customer Email<span style={{ color: 'red' }}></span></label></div>\r\n                                            <div className=\"col-5\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                <input type=\"text\" class={`form-control  ${this.state.isValid_email ? 'has-error-input' : ''}`} id=\"txtCustomerEmail\" value={this.state.data.customerEmail} onChange={this.onCustomerEmailChange} disabled={this.state.params.action === 'view'}/>\r\n                                                {this.state.isValid_email ? <span className=\"color-red\">{msgValid.project.validEmail}</span> : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* CreateDate */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCreateDate\">CreateDate<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtCreateDate\" disabled={this.state.params.action === 'view'} value={this.state.data.createDate}/>\r\n                                        </div> : null}\r\n\r\n                                        {/* CreateBy */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCreateBy\">CreateBy<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtCreateBy\" disabled={this.state.params.action === 'view'} value={this.state.data.createBy}/>\r\n\r\n                                        </div> : null}\r\n\r\n                                        {/* UpdateDate */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtUpdateDate\">UpdateDate<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtUpdateDate\" disabled={this.state.params.action === 'view'} value={this.state.data.updateDate}/>\r\n\r\n                                        </div> : null}\r\n\r\n                                        {/*  UpdateBy */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtUpdateBy\">UpdateBy<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtUpdateBy\" disabled={this.state.params.action === 'view'} value={this.state.data.updateBy}/>\r\n\r\n                                        </div> : null}\r\n\r\n                                        {this.state.params.action !== 'view' ? <div style={{ textAlign: 'right' }}>\r\n                                            <p className=\"title-field\"><span style={{ color: 'red' }}>*</span> Items marked with an asterisk are required</p>\r\n                                        </div> : null}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"row form-group\">\r\n                                    <div className=\"col-12\" style={{ textAlign: 'right' }}>\r\n                                        {this.state.params.action !== 'view' ?\r\n                                            <Link to='/project'>\r\n                                                <button class=\"btn-custom btn-reset\" style={{ marginRight: 20 }}>CANCEL</button>\r\n                                            </Link> : null}\r\n                                        {this.state.params.action !== 'view' ? <button class=\"btn-custom btn-search\" style={{ marginRight: 20 }} onClick={() => {\r\n                                            this.setState({ isSubmit: true })\r\n                                            this.checkValidate()\r\n                                        }}>{this.state.params.action === 'edit' ? 'UPDATE' : 'CREATE'}</button> : null}\r\n                                        {this.state.params.action === 'view' ?\r\n                                            <Link to='/project'>\r\n                                                <button class=\"btn-custom btn-search \" style={{ marginRight: 20 }} >BACK</button>\r\n                                            </Link>\r\n                                            : null}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <LoadPanel\r\n                shadingColor=\"rgba(0,0,0,0.4)\"\r\n                position={position}\r\n                visible={this.state.loadPanelVisible}\r\n            />\r\n\r\n            {/* POPUP */}\r\n            <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg}\r\n                clearActive={() => {\r\n                    if (this.state.isPopupSuccess) {\r\n                        this.props.history.push('/project')\r\n                    }\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: false })\r\n                }} />\r\n\r\n            <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n                onClose={() => { this.setState({ isOpen: false }) }}\r\n                clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n                confirmActive={(e) => {\r\n                    console.log(\"Work -> render -> e\", e)\r\n                    this.confirmSave(e)\r\n                }}\r\n            />\r\n        </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default ActionsProject;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js",["297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315"],"import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport DateBox from \"devextreme-react/date-box\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from \"antd\";\r\nimport { HomeOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from \"../../config\";\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst msgValid = configService.validDateFill;\r\nconst format = \"HH:mm A\";\r\nconst Option = Select.Option;\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst position = { of: '#App' };\r\n\r\nclass ActionsWork extends React.Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        console.log(\"TCL: ActionsWork -> constructor -> props\", props)\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query));\r\n        let param = JSON.parse(tempQuery);\r\n        // console.log(\"TCL: ActionsWork -> constructor -> param\", param)\r\n\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"\", // msg ของ Popup\r\n            isDelete: false, // ใช้เช็คว่าเป็นการลบไหม\r\n            workDate: null,\r\n            data: [\r\n                {\r\n                    workId: null,\r\n                    projectId: null,\r\n                    typeId: null,\r\n                    workDate: null,\r\n                    workDetail: null,\r\n                    workPlan: null,\r\n                    workRef: null,\r\n                    workManhour: null,\r\n                    workTimeIn: null,\r\n                    workTimeOut: null,\r\n                    projectPhase: null,\r\n                    timeIn: null,\r\n                    timeOut: null,\r\n                },\r\n            ],\r\n            projectList: [],\r\n            typeList: [],\r\n            params: param,\r\n            isValid_projectName: [],\r\n            isValid_jobType: [],\r\n            isValid_timeIn: [],\r\n            isValid_timeOut: [],\r\n            isValid_manHours: [],\r\n            isValid_detail: [],\r\n            isValid_workDate: false,\r\n            greaterTimeIn: [],\r\n            greaterTimeOut: [],\r\n            isSubmit: false,\r\n            loadPanelVisible: false\r\n        };\r\n\r\n        let tempDateFirstRow = _.cloneDeep(this.state.data)\r\n        tempDateFirstRow[0].workDate = this.state.params.action === 'create' && this.state.params.workDate ? this.state.params.workDate : null\r\n        console.log(\"TCL: ActionsWork -> constructor -> tempDateFirstRow\", tempDateFirstRow)\r\n        this.setState({ data: tempDateFirstRow })\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            this.setState({ loadPanelVisible: true })\r\n            await this.getProjectList()\r\n            await this.gettypeList()\r\n            if (this.state.params && this.state.params.workDate) {\r\n                let workDate = _.cloneDeep(this.state.params.workDate)\r\n                console.log(\"TCL: ActionsWork -> componentDidMount -> workDate\", workDate)\r\n                let date = workDate.replace(/%2F/g, \"\\/\")\r\n                if (this.state.params.action === 'create') {\r\n                    this.setState({\r\n                        workDate: moment(date, 'DD/MM/YYYY').toDate()\r\n                    })\r\n\r\n                }\r\n                if (this.state.params.action === 'edit') {\r\n                    await this.getDataView()\r\n                }\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            console.log(\"TCL: componentDidMount -> error\", error)\r\n        }\r\n    }\r\n\r\n    async getProjectList() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let resData = []\r\n                let filter = {\r\n                    \"fields\": \"projectId,projectName,projectPhase\"\r\n                }\r\n                const response = await axios.get(api + '/project', { params: filter })\r\n                if (response && response.status === 200) {\r\n                    if (response.data && response.data.resultCode === \"20000\") {\r\n\r\n            // const result = numbers.map((number) => {\r\n            //   return number*2\r\n            // })\r\n            // ** Map Phase **\r\n                response.data.resultData = response.data.resultData.map((phase) => {\r\n                phase.projectName = `${phase.projectName} ${phase.projectPhase}`\r\n                return phase\r\n                })\r\n\r\n                        this.setState({ projectList: response.data.resultData })\r\n                        resData = response.data.resultData\r\n                    } else {\r\n                        this.setState({ projectList: response.data.resultData ? response.data.resultData : [] })\r\n                        resData = response.data.resultData || [];\r\n                    }\r\n\r\n                    let temp = [];\r\n                    for (let i = 0; i < resData.length; i++) {\r\n                        console.log(\"🚀 ~ file: create-edit-view.js ~ line 146 ~ ActionsWork ~ returnnewPromise ~ resData[i].projectId\", resData[i].projectId)\r\n                        temp.push(\r\n                            <Option key={resData[i].projectId} value={resData[i].projectId}> {resData[i].projectName} </Option>\r\n                        );\r\n                    }\r\n\r\n                    this.projectList = temp;\r\n                }\r\n                resolve();\r\n            } catch (error) {\r\n                console.log(\"TCL: getProjectList -> error\", error)\r\n                reject(error)\r\n            }\r\n        });\r\n    }\r\n\r\n    async gettypeList() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let resData = []\r\n                let filter = {\r\n                    \"fields\": \"typeId,typeName\"\r\n                }\r\n                const response = await axios.get(api + '/type', { params: filter })\r\n                if (response && response.status === 200) {\r\n                    if (response.data && response.data.resultCode === \"20000\") {\r\n                        this.setState({ typeList: response.data.resultData })\r\n                        resData = response.data.resultData\r\n                    } else {\r\n                        this.setState({ typeList: response.data.resultData ? response.data.resultData : [] })\r\n                        resData = response.data.resultData || [];\r\n                    }\r\n\r\n                    let temp = [];\r\n                    for (let i = 0; i < resData.length; i++) {\r\n                        temp.push(\r\n                            <Option key={resData[i].typeId} value={resData[i].typeId}> {resData[i].typeName} </Option>\r\n                        );\r\n                    }\r\n\r\n                    this.typeList = temp;\r\n                }\r\n                resolve();\r\n            } catch (error) {\r\n                console.log(\"TCL: getProjectList -> error\", error)\r\n                reject(error)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // TODO :: Select\r\n    // TODO :: Dropdown Project Name\r\n    handleChangeProject = (value, index) => {\r\n    console.log(\"🚀 ~ file: create-edit-view.js ~ line 197 ~ ActionsWork ~ index\", index)\r\n    console.log(\"🚀 ~ file: create-edit-view.js ~ line 197 ~ ActionsWork ~ value\", value)\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.projectId = value;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_projectName];\r\n        if (!value || value !== '') {\r\n            valid[index] = false;\r\n        }\r\n        this.setState({ data: data, isValid_projectName: valid });\r\n    };\r\n\r\n    \r\n\r\n    handleBlurProject = () => {\r\n        console.log(\"blur ---- \", this.typeList);\r\n    };\r\n\r\n    handleFocusProject = () => {\r\n        console.log(\"focus ....\", this.typeList);\r\n    };\r\n\r\n    // TODO :: Dropdown Job Type\r\n    handleChangeType = (value, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.typeId = value;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_jobType];\r\n        if (!value || value !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_jobType: valid });\r\n    };\r\n\r\n    handleBlurType = () => {\r\n        console.log(\"blur ---- \", this.typeList);\r\n    };\r\n\r\n    handleFocusType = () => {\r\n        console.log(\"focus ....\", this.typeList);\r\n    };\r\n\r\n\r\n    // TODO :: Dropdown Time In\r\n    onChangeTimeIn = (time, timestring, index) => {\r\n\r\n        console.log(\"ActionsWork -> onChangeTimeIn -> time, timestring, index\", time, timestring, index)\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeIn = time;\r\n        item.timeIn = timestring;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_timeIn];\r\n        if (!timestring || timestring !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_timeIn: valid });\r\n        this.checkGreaterTime('one', index)\r\n    };\r\n\r\n    // TODO :: Dropdown Time Out\r\n    onChangeTimeOut = (time, timestring, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeOut = time;\r\n        item.timeOut = timestring;\r\n        data[index] = item;\r\n        let valid = [...this.state.isValid_timeOut];\r\n        if (!timestring || timestring !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_timeOut: valid });\r\n        this.checkGreaterTime('one', index)\r\n    };\r\n\r\n    \r\n\r\n    // TODO :: calculate man hours\r\n    calManHours = (index) => {\r\n\r\n        let temp = _.cloneDeep(this.state.data)\r\n        let validIn = [...this.state.isValid_timeIn];\r\n        let validOut = [...this.state.isValid_timeOut];\r\n\r\n\r\n        if (!temp[index].timeIn || temp[index].timeIn === '' || !temp[index].timeOut || temp[index].timeOut === '') {\r\n            if (!temp[index].timeOut || temp[index].timeOut === '') {\r\n                validOut[index] = true;\r\n                this.setState({ isValid_timeOut: validOut });\r\n            }\r\n            if (!temp[index].timeIn || temp[index].timeIn === '') {\r\n                validIn[index] = true;\r\n                this.setState({ isValid_timeIn: validIn });\r\n            }\r\n            return\r\n        }\r\n\r\n        if (this.checkGreaterTime('one', index) === false) {\r\n            console.log(\"TCL: ActionsWork -> calManHours -> \", 'time out > time in')\r\n            return\r\n        }\r\n\r\n        var start = moment(temp[index].timeIn, 'HH:mm A').format('HH:mm');\r\n        var end = moment(temp[index].timeOut, 'HH:mm A').format('HH:mm');\r\n        let tempTime = this.fnCallDiffTime(start, end)\r\n        let time = '';\r\n        let dataTime = tempTime.split(\":\");\r\n        let tempStart = start.split(\":\");\r\n        let tempEnd = end.split(\":\");\r\n        if (start <= '12:00' && end >= '13:00') {\r\n            let a = parseInt(dataTime[0]) - 1\r\n            time = (a <= 9 ? \"0\" : \"\") + a + \":\" + dataTime[1];\r\n        } else if (start > '12:00' && start < '13:00') {\r\n            if (end <= '13:00') {\r\n                time = '00:00'\r\n            } else if (end > '13:00') {\r\n                if (parseInt(tempStart[1]) <= parseInt(tempEnd[1])) {\r\n                    let calHours = parseInt(dataTime[0]) - 1\r\n                    time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + tempEnd[1];\r\n                } else {\r\n                    let calMin = parseInt(tempEnd[1])\r\n                    let calHours = parseInt(dataTime[0])\r\n                    time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + (calMin <= 9 ? \"0\" : \"\") + calMin;\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            time = tempTime;\r\n        }\r\n\r\n        let valid = [...this.state.isValid_manHours];\r\n        valid[index] = false;\r\n        temp[index].workManhour = time\r\n        this.setState({ data: temp, isValid_manHours: valid });\r\n    };\r\n\r\n    fnCallDiffTime = (start, end) => {\r\n        start = start.split(\":\");\r\n        end = end.split(\":\");\r\n        var startDate = new Date(0, 0, 0, start[0], start[1], 0);\r\n        var endDate = new Date(0, 0, 0, end[0], end[1], 0);\r\n        var diff = endDate.getTime() - startDate.getTime();\r\n        var hours = Math.floor(diff / 1000 / 60 / 60);\r\n        diff -= hours * 1000 * 60 * 60;\r\n        var minutes = Math.floor(diff / 1000 / 60);\r\n\r\n        if (hours < 0)\r\n            hours = hours + 24;\r\n\r\n        let time = (hours <= 9 ? \"0\" : \"\") + hours + \":\" + (minutes <= 9 ? \"0\" : \"\") + minutes;\r\n        return time;\r\n    }\r\n\r\n\r\n    // TODO :: Add form data\r\n    handleAddData = () => {\r\n        console.log(\"ActionsWork -> handleAddData -> handleAddData\");\r\n        this.state.data.push({\r\n            workId: null,\r\n            projectId: null,\r\n            typeId: null,\r\n            workDate: null,\r\n            workDetail: null,\r\n            workPlan: null,\r\n            workRef: null,\r\n            workManhour: null,\r\n            workTimeIn: null,\r\n            workTimeOut: null,\r\n        });\r\n        let a = this.state.data;\r\n        this.setState({ data: a });\r\n    };\r\n\r\n    handleChangeDate = (event) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        for (let i = 0; i < temp.length; i++) {\r\n            const element = temp[i];\r\n            element.workDate = event.value\r\n        }\r\n\r\n        if (!event.value || event.value !== '') {\r\n            this.setState({ isValid_workDate: false });\r\n        }\r\n        this.setState({ workDate: event.value, data: temp })\r\n    }\r\n\r\n    onWorkManHoursChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workManhour = event.target.value\r\n        let valid = [...this.state.isValid_manHours];\r\n        if (event.target.value || event.target.value !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: temp, isValid_manHours: valid });\r\n    }\r\n\r\n    onWorkPlanChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workPlan = event.target.value\r\n        this.setState({\r\n            data: temp\r\n        });\r\n    }\r\n\r\n\r\n    onWorkRefChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workRef = event.target.value\r\n        this.setState({\r\n            data: temp\r\n        });\r\n    }\r\n\r\n    onWorkDetailChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workDetail = event.target.value\r\n\r\n        let valid = [...this.state.isValid_detail];\r\n        if (!event.target.value || event.target.value !== '') {\r\n            valid[index] = false;\r\n        }\r\n        this.setState({ data: temp, isValid_detail: valid });\r\n    }\r\n\r\n    checkValidData = () => {\r\n        let validProject = this.checkValid('project')\r\n        let validJobType = this.checkValid('job')\r\n        let validTimeIn = this.checkValid('in')\r\n        let validTimeOut = this.checkValid('out')\r\n        let validManHours = this.checkValid('hours')\r\n        let validDetail = this.checkValid('detail')\r\n        let validDate = this.checkValid('date')\r\n        let validGreater = this.checkGreaterTime('all', '')\r\n        if (validProject && validJobType && validTimeIn && validTimeOut && validManHours && validDetail && validDate && validGreater) {\r\n            this.setState({\r\n                isOpen: true,\r\n                isTypeShowConfirm: \"save\",\r\n                isTextMsg: msgPopupTitle.saved,\r\n                isDataPopUp: this.state.data,\r\n                isDelete: false,\r\n            });\r\n        } else {\r\n            console.log(\"TCL: ActionsWork -> checkValidData -> \", 'กรอกข้อมูลไม่ครบ')\r\n        }\r\n    }\r\n\r\n    checkValid = (type) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        let res = true;\r\n        if (type === 'project') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_projectName];\r\n                console.log(\"🚀 ~ file: create-edit-view.js ~ line 459 ~ ActionsWork ~ element.projectId\", element.projectId)\r\n                if (!element.projectId || element.projectId === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    console.log(\"🚀 ~ file: create-edit-view.js ~ line 461 ~ ActionsWork ~ valid\", valid)\r\n                    this.setState({ isValid_projectName: valid });\r\n                }\r\n            }\r\n        } else if (type === 'job') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_jobType];\r\n                if (!element.typeId || element.typeId === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_jobType: valid });\r\n                }\r\n            }\r\n        } else if (type === 'in') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_timeIn];\r\n                if (!element.workTimeIn || element.workTimeIn === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_timeIn: valid });\r\n                }\r\n            }\r\n        } else if (type === 'out') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_timeOut];\r\n                if (!element.workTimeOut || element.workTimeOut === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_timeOut: valid });\r\n                }\r\n            }\r\n        } else if (type === 'hours') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_manHours];\r\n                if (!element.workManhour || element.workManhour === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_manHours: valid });\r\n                }\r\n            }\r\n        } else if (type === 'detail') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_detail];\r\n                if (!element.workDetail || element.workDetail === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_detail: valid });\r\n                }\r\n            }\r\n        } else if (type === 'date') {\r\n            if (this.state.workDate === '' || !this.state.workDate) {\r\n                res = false;\r\n                this.setState({ isValid_workDate: true });\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    checkGreaterTime(type, index) {\r\n\r\n        if (type === 'one') {\r\n\r\n            if ((this.state.data[index].timeIn || this.state.data[index].timeIn !== '') && (this.state.data[index].timeOut || this.state.data[index].timeOut !== '')) {\r\n                var start = moment(this.state.data[index].timeIn, 'HH:mm A').format('HH:mm');\r\n                var end = moment(this.state.data[index].timeOut, 'HH:mm A').format('HH:mm');\r\n                let validTimeIn = [...this.state.greaterTimeIn];\r\n                let validTimeOut = [...this.state.greaterTimeOut];\r\n                console.log(start);\r\n                console.log(end);\r\n                if (start > end) {\r\n                    validTimeIn[index] = true;\r\n                    validTimeOut[index] = true;\r\n\r\n                    this.setState({\r\n                        greaterTimeIn: validTimeIn,\r\n                        greaterTimeOut: validTimeOut,\r\n                    })\r\n                    return false\r\n                } else {\r\n                    validTimeIn[index] = false;\r\n                    validTimeOut[index] = false;\r\n                    this.setState({\r\n                        greaterTimeIn: validTimeIn,\r\n                        greaterTimeOut: validTimeOut,\r\n                    })\r\n                    return true\r\n                }\r\n            }\r\n        } else {\r\n            let temp = _.cloneDeep(this.state.data)\r\n            let res = true;\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                var start = moment(element.timeIn, 'HH:mm A').format('HH:mm');\r\n                var end = moment(element.timeOut, 'HH:mm A').format('HH:mm');\r\n                let validTimeIn = [...this.state.greaterTimeIn];\r\n                let validTimeOut = [...this.state.greaterTimeOut];\r\n                if (start > end) {\r\n                    validTimeIn[i] = true;\r\n                    validTimeOut[i] = true;\r\n                    this.setState({\r\n                        greaterTimeIn: validTimeIn,\r\n                        greaterTimeOut: validTimeOut,\r\n                    })\r\n                    res = false\r\n                }\r\n            }\r\n            return res\r\n        }\r\n    }\r\n\r\n    deleteData = async (data) => {\r\n        try {\r\n            var response = await axios.delete(api + '/work/' + data);\r\n\r\n        // ต้อง call api -------------------\r\n        let tempDel = _.cloneDeep(this.state.data)\r\n        tempDel.splice(data[1], 1);\r\n        this.setState({ data: tempDel })\r\n        // ต้อง call api -------------------\r\n        if (response && response.status === 200) {\r\n            if (response.data && response.data.resultCode === \"20000\") {\r\n            } else {\r\n        this.setState({ isOpen: false });\r\n        this.setState({ isPopupError: false });\r\n        this.setState({ isPopupSuccess: true });\r\n        this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n    }\r\n}\r\n} catch (error) {\r\n    this.setState({ loadPanelVisible: false })\r\n    this.setState({ isOpen: false })\r\n    this.setState({ isPopupError: true })\r\n    this.setState({ isPopupSuccess: false })\r\n    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n    console.log(\"TCL: WorkEdit -> fnGetData -> error\", error)\r\n}\r\n}\r\n\r\n    confirmSave = async (data) => {\r\n        this.setState({ loadPanelVisible: true })\r\n        console.log(\"TCL: ActionJobType -> confirmSave -> data\", data)\r\n        try {\r\n            let body = []\r\n            for (let i = 0; i < data.length; i++) {\r\n                const element = data[i];\r\n                let temp = {\r\n                    workId: element.workId,\r\n                    projectId: element.projectId,\r\n                    typeId: element.typeId,\r\n                    workDate: moment(this.state.workDate).format('DD-MM-YYYY'),\r\n                    workDetail: element.workDetail,\r\n                    workPlan: element.workPlan,\r\n                    workRef: element.workRef,\r\n                    workManhour: element.workManhour,\r\n                    workTimeIn: element.timeIn,\r\n                    workTimeOut: element.timeOut};\r\n                if (!element.workRef) {\r\n                   delete temp.workRef;\r\n                }\r\n                if (!element.workPlan) {\r\n                   delete temp.workPlan;\r\n                }\r\n                if (this.state.params.action === 'create') {\r\n                    delete temp.workId;\r\n                }\r\n                body.push(temp)\r\n            }\r\n            console.log(\"TCL: ActionsWork -> confirmSave -> body\", body)\r\n            var response;\r\n            if (this.state.params.action === 'edit') {\r\n                response = await axios.put(api + '/work/'+this.state.params.workId, body)\r\n            } else {\r\n                response = await axios.post(api + '/work', body)\r\n            }\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: this.state.params.action === 'edit' ? msgAlertTitle.updated : msgAlertTitle.saved })\r\n                } else {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: true })\r\n                    this.setState({ isPopupSuccess: false })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n                }\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            this.setState({ isOpen: false })\r\n            this.setState({ isPopupError: true })\r\n            this.setState({ isPopupSuccess: false })\r\n            this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n            console.log(\"TCL: JobType -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    async getDataView() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let resData = []\r\n                let filter = {\r\n                    \"filter\": {\r\n                        \"workDate\": moment(this.state.params.workDate.replace(/%2F/g, \"\\/\"), 'DD/MM/YYYY').format('YYYY-MM-DD')\r\n                    }\r\n                }\r\n                const response = await axios.get(api + '/work', { params: filter })\r\n                if (response && response.status === 200) {\r\n                    if (response.data && response.data.resultCode === \"20000\") {\r\n                        let temp = _.cloneDeep(response.data.resultData)\r\n                        console.log(\"TCL: ActionsWork -> getDataView -> temp\", temp)\r\n                        for (let i = 0; i < temp.length; i++) {\r\n                            const element = temp[i];\r\n                            temp[i].timeIn = element.workTimeIn\r\n                            temp[i].timeOut = element.workTimeOut\r\n                            temp[i].workTimeIn = moment(element.workTimeIn, 'HH:mm A').local();\r\n                            temp[i].workTimeOut = moment(element.workTimeOut, 'HH:mm A').local();\r\n                        }\r\n                        console.log(\"TCL: ActionsWork -> getDataView -> temp\", temp)\r\n                        this.setState({ data: temp, workDate: moment(temp[0].workDate, 'DD/MM/YYYY').toDate() })\r\n                    } else {\r\n                        // this.setState({ data: [], workDate: null })\r\n                    }\r\n                }\r\n                resolve();\r\n            } catch (error) {\r\n                console.log(\"TCL: getProjectList -> error\", error)\r\n                reject(error)\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"/work\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> work </span>\r\n                                </Breadcrumb.Item>\r\n                                {this.state.params.action === \"create\" ? (\r\n                                    <span className=\"breadcrum-custom\"> Create work </span>\r\n                                ) : null}\r\n                                {this.state.params.action === \"edit\" ? (\r\n                                    <span className=\"breadcrum-custom\"> Update work </span>\r\n                                ) : null}\r\n                            </Breadcrumb>\r\n\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-action\">\r\n                                    <div className=\"box-title-search\">\r\n\r\n                                        {this.state.params.action === \"create\" ? (<p className=\"font-size-search\"> Create Work </p>) : null}\r\n                                        {this.state.params.action === \"edit\" ? (<p className=\"font-size-search\"> Update Work </p>) : null}\r\n                                    </div>\r\n                                    <div className=\"box-content\" style={{ marginBottom: 0 }}>\r\n                                        <div className=\"box-action-date\">\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-3\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                    <label className=\"title-field\" for=\"ddlDate\">\r\n\r\n                                                        Date : <span style={{ color: \"red\" }}> * </span>\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className={`col-4`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                    <DateBox value={null} type=\"date\" value={this.state.workDate}\r\n                                                        displayFormat=\"dd/MM/yyyy\"\r\n                                                        type=\"date\" onValueChanged={(e) => {\r\n                                                            this.handleChangeDate(e)\r\n                                                        }}\r\n                                                        className={`${this.state.isValid_workDate && this.state.isSubmit ? 'has-error-input' : ''}`} />\r\n                                                    {this.state.isValid_workDate && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDate}</span> : null}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <hr className=\"hr-action\" />\r\n                                        <div style={{ textAlign: \"right\" }}>\r\n                                            <p className=\"title-field\">\r\n                                                <span style={{ color: \"red\" }}> * </span> Items marked with an asterisk are required\r\n                                            </p>\r\n                                        </div>\r\n                                        {this.state.data.map((data, i) => {\r\n                                            console.log('data.projectId --> ', data.projectId)\r\n                                            return (\r\n                                                <>\r\n                                                    <div className=\"box-action-content\">\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div\r\n                                                                        className=\"col-4\"\r\n                                                                        style={{ textAlign: \"right\" }}\r\n                                                                    >\r\n                                                                        <label className=\"title-field\" for=\"ddlProjectName\" >\r\n                                                                            Project Name  <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n\r\n                                                                        \r\n                                                                        <div className={`form-control div-select ${this.state.isValid_projectName[i] && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                                                                            <Select\r\n                                                                                showSearch\r\n                                                                                style={{ width: 200 }}\r\n                                                                                placeholder=\"Please selete project\"\r\n                                                                                optionFilterProp=\"children\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    \r\n                                                                                    \r\n\r\n                                                                                    console.log(\"TCL: ActionsWork -> render -> \", this.projectList)\r\n                                                                                    this.handleChangeProject(e, i);\r\n                                                                                }}\r\n                                                                               \r\n                                                                                filterOption={(input, option) =>\r\n                                                                                    option.props.children[1].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                                                }\r\n                                                                                \r\n                                                                                value={data.projectId}>\r\n                                                                                    \r\n                                                                                {this.projectList}\r\n                                                                            </Select>\r\n                                                                        </div>\r\n                                                                   \r\n                                                                        {this.state.isValid_projectName[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validProjectName}</span> : null}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlJobType\" >\r\n                                                                            Job Type <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <div className={`form-control div-select ${this.state.isValid_jobType[i] && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                                                                            <Select\r\n                                                                                showSearch\r\n                                                                                style={{ width: 200 }}\r\n                                                                                placeholder=\"Please selete Type\"\r\n                                                                                optionFilterProp=\"children\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    this.handleChangeType(e, i);\r\n                                                                                }}\r\n                                                                                onFocus={(e) => {\r\n                                                                                    this.handleFocusType(e, i);\r\n                                                                                }}\r\n                                                                                onBlur={(e) => {\r\n                                                                                    this.handleBlurType(e, i);\r\n                                                                                }}\r\n                                                                                filterOption={(input, option) =>\r\n                                                                                    option.props.children[1]\r\n                                                                                        .toLowerCase()\r\n                                                                                        .indexOf(input.toLowerCase()) >= 0\r\n                                                                                }\r\n                                                                                value={data.typeId}\r\n                                                                            >\r\n\r\n                                                                                {this.typeList}\r\n                                                                            </Select>\r\n                                                                        </div>\r\n                                                                        {this.state.isValid_jobType[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validJobType}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Time in */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlTimeIn\" >\r\n                                                                            Time in <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <TimePicker\r\n                                                                            showNow={true}\r\n                                                                            className=\"font-12pt\"\r\n                                                                            style={{ fontSize: \"12pt\" }}\r\n                                                                            use12Hours\r\n                                                                            placeholder=\"Select time in\"\r\n                                                                            format={format}\r\n                                                                            value={data.workTimeIn}\r\n                                                                            showNow={true}\r\n                                                                            onChange={(time, timestring) => {\r\n                                                                                this.onChangeTimeIn(\r\n                                                                                    time,\r\n                                                                                    timestring,\r\n                                                                                    i\r\n                                                                                );\r\n                                                                            }}\r\n\r\n                                                                            className={`${this.state.isValid_timeIn[i] || this.state.greaterTimeIn[i] ? 'has-error-input' : ''}`} />\r\n                                                                        {this.state.isValid_timeIn[i] && !this.state.greaterTimeIn[i] ? <span className=\"color-red\">{msgValid.work.validTimeIn}</span> : null}\r\n                                                                        {this.state.greaterTimeIn[i] && !this.state.isValid_timeIn[i] ? <span className=\"color-red\">{msgValid.work.validTimeInmoreTimeOut}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n\r\n\r\n\r\n                                                            {/* Time out */}\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlTimeOut\" >\r\n                                                                            Time out <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <TimePicker\r\n                                                                            showNow={true}\r\n                                                                            className=\"font-12pt\"\r\n                                                                            style={{ fontSize: \"12pt\" }}\r\n                                                                            use12Hours\r\n                                                                            placeholder=\"Select Time out\"\r\n                                                                            format={format}\r\n                                                                            value={data.workTimeOut}\r\n                                                                            showNow={true}\r\n                                                                            onChange={(time, timestring) => {\r\n                                                                                this.onChangeTimeOut(\r\n                                                                                    time,\r\n                                                                                    timestring,\r\n                                                                                    i\r\n                                                                                );\r\n                                                                            }}\r\n                                                                            className={`${this.state.isValid_timeOut[i] || this.state.greaterTimeOut[i] ? 'has-error-input' : ''}`} />\r\n                                                                        {this.state.isValid_timeOut[i] && !this.state.greaterTimeOut[i] ? <span className=\"color-red\">{msgValid.work.validTimeOut}</span> : null}\r\n                                                                        {this.state.greaterTimeOut[i] && !this.state.isValid_timeOut[i] ? <span className=\"color-red\">{msgValid.work.validTimeOutlessTimeIn}</span> : null}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Man hours */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtManHours\" >\r\n                                                                            Man hours <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-4\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <input type=\"text\" className={`form-control ${this.state.isValid_manHours[i] && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                                            id=\"txtManHours\" value={data.workManhour} onChange={(event) => { this.onWorkManHoursChange(event, i) }} />\r\n                                                                        {this.state.isValid_manHours[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validManHours}</span> : null}\r\n                                                                    </div>\r\n                                                                    <div className=\"col-3\">\r\n                                                                        <button class=\"btn-custom btn-calculate\" onClick={() => { this.calManHours(i) }} >\r\n                                                                            Calculate\r\n                                                                        </button>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Url */}\r\n                                                        {/* <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtUrl\">\r\n                                                                            Url\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <input type=\"text\" class=\"form-control\" id=\"txtUrl\" value={data.workUrl} onChange={(event) => { this.onWorkUrlChange(event, i) }} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div> */}\r\n\r\n                                                        {/* Detail */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-12\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtDetail\" >\r\n                                                                            Detail <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <textarea\r\n                                                                            rows=\"3\"\r\n                                                                            type=\"text\"\r\n                                                                            id=\"txtDetail\"\r\n                                                                            className={`form-control ${this.state.isValid_detail[i] && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                                            value={data.workDetail} onChange={(event) => { this.onWorkDetailChange(event, i) }}\r\n                                                                        />\r\n                                                                        {this.state.isValid_detail[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDetail}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        {/* Link Plan */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-12\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtLinkPlan\" >\r\n                                                                        Link Plan\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n\r\n                                                                        <input type=\"text\" class=\"form-control\" id=\"txtPlan\" value={data.workPlan} onChange={(event) => { this.onWorkPlanChange(event, i) }} />\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        {/* Ref*/}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-12\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtRef\" >\r\n                                                                        Ref\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <input type=\"text\" class=\"form-control\" id=\"txtRef\" value={data.workRef} onChange={(event) => { this.onWorkRefChange(event, i) }} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                    {this.state.data.length > 1 ? (\r\n                                                        <div\r\n                                                            style={{\r\n                                                                textAlign: \"end\",\r\n                                                                marginTop: 20,\r\n                                                                marginBottom: 10,\r\n                                                            }}\r\n                                                        >\r\n                                                            <button type=\"button\" style={{ background: \"red\", color: \"#fff\", width: 300 }}\r\n                                                                className=\"btn btn-popup-custom error\"\r\n                                                                onClick={() => {\r\n                                                                    this.setState({\r\n                                                                        isOpen: true,\r\n                                                                        isTypeShowConfirm: \"del\",\r\n                                                                        isTextMsg: msgPopupTitle.deleted,\r\n                                                                        isDataPopUp: [data, i],\r\n                                                                        isDelete: true,\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                Delete\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                    <hr className=\"hr-action\" />\r\n                                                </>\r\n                                            );\r\n                                        })}\r\n                                        <br />\r\n                                        <div>\r\n                                            <button type=\"button\" class=\"btn btn-add-work\" onClick={this.handleAddData} >\r\n                                                <span className=\"btn-add-work-icon\">\r\n                                                    <PlusOutlined />\r\n                                                </span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row form-group\">\r\n                                        <div className=\"col-12\" style={{ textAlign: \"right\" }}>\r\n                                            <Link to=\"/work\">\r\n                                                <button class=\"btn-custom btn-reset\" style={{ marginRight: 20 }} >\r\n                                                    CANCEL\r\n                                                </button>\r\n                                            </Link>\r\n                                            <button\r\n                                                class=\"btn-custom btn-search\"\r\n                                                style={{ marginRight: 70 }}\r\n                                                onClick={() => {\r\n                                                    this.setState({ isSubmit: true })\r\n                                                    this.checkValidData()\r\n\r\n                                                }}\r\n                                            >\r\n                                                {this.state.params.action === \"edit\" ? \"UPDATE\" : \"CREATE\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n\r\n                        if (this.state.isPopupSuccess === true && this.state.isDelete === false) {\r\n                            this.props.history.push('/work')\r\n                        }\r\n\r\n\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(data) => {\r\n                        console.log(\"Work -> render -> e\", data);\r\n                        if (this.state.isDelete) {\r\n                            this.deleteData(data)\r\n                        } else {\r\n                            this.confirmSave(data)\r\n                        }\r\n\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionsWork;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js",["316"],"import React from 'react'\r\n\r\nexport default () => (\r\n  <div className=\"has-text-centered\">\r\n    {/* <section class=\"hero is-info\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Home Page</h1>\r\n        <h2 className=\"page-title\">ทำ Routing ให้กับ React ด้วย React Router v4</h2>\r\n        <p className=\"button button-large is-primary\"><a href=\"https://devahoy.com/posts/basic-web-with-react-router-v4/\" target=\"_blank\">อ่านบทความ</a></p>\r\n      </div>\r\n    </section> */}\r\n  </div>\r\n)\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js",["317","318","319","320","321","322","323","324","325"],"import React, { Component } from \"react\";\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AspNetData from \"devextreme-aspnet-data-nojquery\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from \"antd\";\r\nimport {\r\n    HomeOutlined,\r\n    EyeOutlined,\r\n    DeleteOutlined,\r\n    FormOutlined,\r\n} from \"@ant-design/icons\";\r\nimport DataGrid, { Column, Pager, Paging } from \"devextreme-react/data-grid\";\r\nimport configService from \"../../config\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\n\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst position = { of: '#App' };\r\n\r\nclass JobType extends React.Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"Please contact your administrator.\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"del\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"Are you sure you want to delete this?\", // msg ของ Popup\r\n            filter: {\r\n                typeName: null,\r\n                typeCode: null,\r\n            },\r\n            data: [],\r\n            pageSize: configService.defaultPageSize,\r\n            pageIndex: 0,\r\n            loadPanelVisible: false\r\n        };\r\n        this.dataGridRef = React.createRef();\r\n        this.getTotalPageCount = () => {\r\n            return this.dataGridRef.current.instance.pageCount();\r\n        }\r\n\r\n        this.changePageSize = this.changePageSize.bind(this);\r\n        this.goToLastPage = this.goToLastPage.bind(this);\r\n        this.handleOptionChange = this.handleOptionChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.fnGetData();\r\n    }\r\n\r\n    changePageSize(value) {\r\n        this.setState({\r\n            pageSize: value\r\n        });\r\n    }\r\n\r\n    goToLastPage() {\r\n        const pageCount = this.dataGridRef.current.instance.pageCount();\r\n        this.setState({\r\n            pageIndex: pageCount - 1\r\n        });\r\n    }\r\n\r\n    handleOptionChange(e) {\r\n        console.log(\"TCL: JobType -> handleOptionChange -> e\", e)\r\n        if (e.fullName === 'paging.pageSize') {\r\n            this.setState({\r\n                pageSize: e.value\r\n            });\r\n        }\r\n        if (e.fullName === 'paging.pageIndex') {\r\n            this.setState({\r\n                pageIndex: e.value\r\n            });\r\n        }\r\n    }\r\n\r\n    onTypeNameChange = (event) => {\r\n        this.setState({\r\n            filter: {\r\n                ...this.state.filter,\r\n                typeName: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    onTypeCodeChange = (event) => {\r\n        this.setState({\r\n            filter: {\r\n                ...this.state.filter,\r\n                typeCode: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({ loadPanelVisible: true })\r\n        this.setState({\r\n            filter: { typeName: '', typeCode: '' }\r\n        });\r\n        setTimeout(() => {\r\n            this.fnGetData();\r\n        }, 100);\r\n    };\r\n\r\n    delCellRender = (data) => {\r\n        return (\r\n            <a\r\n                onClick={() => {\r\n                    this.setState({\r\n                        isOpen: true,\r\n                        isTypeShowConfirm: \"del\",\r\n                        isTextMsg: msgPopupTitle.deleted,\r\n                        isDataPopUp: data.data.typeId,\r\n                    });\r\n                }}\r\n            >\r\n\r\n                <span style={{ color: \"#111\", fontSize: \"12pt\" }}>\r\n\r\n                    <DeleteOutlined />\r\n                </span>\r\n            </a>\r\n        );\r\n    };\r\n\r\n    editCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/jobtype\" + `/{\"action\":\"edit\",\"jobTypeId\":\"${data.data.typeId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <FormOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n\r\n    noCellRender = (data) => {\r\n        return (\r\n            <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                {data.component.pageIndex() * data.component.pageSize() +\r\n                    data.rowIndex +\r\n                    1}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    onSearch = () => {\r\n        this.setState({ loadPanelVisible: true})\r\n        this.fnGetData();\r\n    };\r\n\r\n    onDeleteData = async (data) => {\r\n        try {\r\n            var response = await axios.delete(api + '/type/' + data);\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ isOpen: false });\r\n                    this.setState({ isPopupError: false });\r\n                    this.setState({ isPopupSuccess: true });\r\n                    this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n                } else {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: true })\r\n                    this.setState({ isPopupSuccess: false })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            this.setState({ isOpen: false })\r\n            this.setState({ isPopupError: true })\r\n            this.setState({ isPopupSuccess: false })\r\n            this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n            console.log(\"TCL: JobType -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    fnGetData = async () => {\r\n        try {\r\n            let filter = {}\r\n            filter.filter = {}\r\n            filter.fields = configService.fields.typeList\r\n            filter.limit = this.state.pageSize;\r\n            filter.offset = this.state.pageIndex;\r\n            filter.orderby = \"typeName\";\r\n            if (this.state.filter.typeName && this.state.filter.typeName !== '') {\r\n                filter.filter.typeName = this.state.filter.typeName\r\n            }\r\n            if (this.state.filter.typeCode && this.state.filter.typeCode !== '') {\r\n                filter.filter.typeCode = this.state.filter.typeCode\r\n            }\r\n            const response = await axios.get(api + '/type', { params: filter })\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ data: response.data.resultData })\r\n                } else {\r\n                    this.setState({ data: response.data.resultData })\r\n                }\r\n\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            console.log(\"TCL: JobType -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\" id=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"#\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> Job Type </span>\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\">\r\n                                    <div className=\"box-title-search\">\r\n                                        <p className=\"font-size-search\"> Search Job Type </p>\r\n                                    </div>\r\n                                    <div className=\"box-content\">\r\n                                        <div className=\"box-search-border\">\r\n                                            <form>\r\n                                                <div className=\"row form-group\">\r\n                                                    <div\r\n                                                        className=\"col-4\"\r\n                                                        style={{ textAlign: \"right\" }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                                {/* Job Type Name */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label for=\"txtTypeName\" className=\"title-field\">\r\n                                                            Job Type\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-3\"\r\n                                                        id=\"txtTypeName\"\r\n                                                        value={this.state.filter.typeName} onChange={this.onTypeNameChange}\r\n                                                    />\r\n                                                </div>\r\n                                                {/* Code */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label for=\"txtTypeCode\" className=\"title-field\">\r\n                                                            Code\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-3\"\r\n                                                        id=\"txtTypeCode\"\r\n                                                        value={this.state.filter.typeCode} onChange={this.onTypeCodeChange}\r\n                                                    />\r\n                                                </div>\r\n                                            </form>\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-12\" style={{ textAlign: \"center\" }}>\r\n                                                    <button\r\n                                                        class=\"btn-custom btn-reset \"\r\n                                                        style={{ marginRight: 20 }}\r\n                                                        onClick={this.handleReset}\r\n                                                    >\r\n                                                        RESET\r\n                                                    </button>\r\n                                                    <button class=\"btn-custom btn-search \" onClick={this.onSearch}>\r\n                                                        SEARCH\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content start*/}\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\" style={{ padding: 30 }}>\r\n                                    <div style={{ textAlign: \"end\", padding: 15 }}>\r\n                                        <Link to='/jobtype/{\"action\":\"create\"}'>\r\n                                            <button\r\n                                                className=\"btn-custom btn-search \"\r\n                                                style={{ width: 250 }}\r\n                                            >\r\n\r\n                                                <span className=\"btn-icon\">\r\n\r\n                                                    <IoAddOutline />\r\n                                                </span>\r\n                                                <span className=\"btn-txt-icon\">\r\n                                                    Create Job Type\r\n                                            </span>\r\n                                            </button>\r\n                                        </Link>\r\n                                    </div>\r\n\r\n                                    <div style={{ padding: 20 }}>\r\n                                        <DataGrid\r\n                                            dataSource={this.state.data}\r\n                                            showBorders={true}\r\n                                            showRowLines={true}\r\n                                            ref={this.dataGridRef}\r\n                                            noDataText=\"No Data\"\r\n                                            onOptionChanged={this.handleOptionChange}\r\n                                        >\r\n                                            <Paging defaultPageSize={configService.defaultPageSize}\r\n                                                pageSize={this.state.pageSize}\r\n                                                pageIndex={this.state.pageIndex} />\r\n                                            <Pager\r\n                                                showPageSizeSelector={true}\r\n                                                allowedPageSizes={configService.allowedPageSizes}\r\n                                                showInfo={true}\r\n                                                showNavigationButtons={true}\r\n                                                visible={true}\r\n                                                remoteOperations={true}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                caption=\"No\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.noCellRender}\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Job Type\"\r\n                                                dataField=\"typeName\"\r\n                                                dataType=\"string\"\r\n                                                alignment=\"center\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Code\"\r\n                                                dataField=\"typeCode\"\r\n                                                dataType=\"string\"\r\n                                                alignment=\"center\"\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"Edit\"\r\n                                                cellRender={this.editCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.delCellRender}\r\n                                                caption=\"Delete\"\r\n                                            />\r\n                                        </DataGrid>\r\n                                    </div>\r\n                                    <LoadPanel\r\n                                        shadingColor=\"rgba(0,0,0,0.4)\"\r\n                                        position={position}\r\n                                        visible={this.state.loadPanelVisible}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {/* content end*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                        this.setState({ loadPanelVisible: true })\r\n                        this.fnGetData()\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(e) => {\r\n                        console.log(\"Work -> render -> e\", e);\r\n                        this.onDeleteData(e)\r\n\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobType;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js",["326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342"],"import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BsFillCalendarFill } from \"react-icons/bs\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport { FaClipboardList } from \"react-icons/fa\";\r\nimport { AiOutlineStepBackward } from \"react-icons/ai\";\r\nimport { AiFillStepForward } from \"react-icons/ai\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport DateBox from \"devextreme-react/date-box\";\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AspNetData from \"devextreme-aspnet-data-nojquery\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from \"antd\";\r\nimport {\r\n    HomeOutlined,\r\n    EyeOutlined,\r\n    DeleteOutlined,\r\n    FormOutlined,\r\n} from \"@ant-design/icons\";\r\nimport DataGrid, { Column, Pager, Paging } from \"devextreme-react/data-grid\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from \"../../config\";\r\n\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\n\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst position = { of: '#App' };\r\n\r\nclass Project extends React.Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"\", // msg ของ Popup\r\n            filter: {\r\n                projectName: null\r\n            },\r\n            data: [],\r\n            pageSize: configService.defaultPageSize,\r\n            pageIndex: 0,\r\n            loadPanelVisible: false\r\n        };\r\n\r\n        this.dataGridRef = React.createRef();\r\n        this.getTotalPageCount = () => {\r\n            return this.dataGridRef.current.instance.pageCount();\r\n        }\r\n\r\n        this.changePageSize = this.changePageSize.bind(this);\r\n        this.goToLastPage = this.goToLastPage.bind(this);\r\n        this.handleOptionChange = this.handleOptionChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fnGetData();\r\n    }\r\n\r\n    changePageSize(value) {\r\n        this.setState({\r\n            pageSize: value\r\n        });\r\n    }\r\n\r\n    goToLastPage() {\r\n        const pageCount = this.dataGridRef.current.instance.pageCount();\r\n        this.setState({\r\n            pageIndex: pageCount - 1\r\n        });\r\n    }\r\n\r\n    handleOptionChange(e) {\r\n        console.log(\"TCL: JobType -> handleOptionChange -> e\", e)\r\n        if (e.fullName === 'paging.pageSize') {\r\n            this.setState({\r\n                pageSize: e.value\r\n            });\r\n        }\r\n        if (e.fullName === 'paging.pageIndex') {\r\n            this.setState({\r\n                pageIndex: e.value\r\n            });\r\n        }\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({\r\n            filter: {\r\n                projectName: '',\r\n            },\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.fnGetData();\r\n        }, 100);\r\n    };\r\n\r\n    onTypeNameChange = (event) => {\r\n        this.setState({\r\n            filter: {\r\n                projectName: event.target.value\r\n            }\r\n        });\r\n    }\r\n    onSearch = () => {\r\n        this.setState({ loadPanelVisible: true })\r\n        this.fnGetData();\r\n    }\r\n\r\n    onDeleteData = async (data) => {\r\n        try {\r\n            var response = await axios.delete(api + '/project/' + data);\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ isOpen: false });\r\n                    this.setState({ isPopupError: false });\r\n                    this.setState({ isPopupSuccess: true });\r\n                    this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n                } else {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: true })\r\n                    this.setState({ isPopupSuccess: false })\r\n                    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            this.setState({ isOpen: false })\r\n            this.setState({ isPopupError: true })\r\n            this.setState({ isPopupSuccess: false })\r\n            this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n            console.log(\"TCL: Project -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    fnGetData = async () => {\r\n        try {\r\n            let filter = {}\r\n            filter.filter = {}\r\n            filter.fields = configService.fields.projectList\r\n            filter.limit = this.state.pageSize;\r\n            filter.offset = this.state.pageIndex;\r\n            filter.orderby = \"projectName\";\r\n            console.log(\"🚀 ~ file: index.js ~ line 164 ~ Project ~ fnGetData= ~ this.state.filter\", this.state.filter)\r\n            \r\n            if (this.state.filter.projectName && this.state.filter.projectName !== '') {\r\n                filter.filter.projectName = this.state.filter.projectName\r\n            }\r\n            const response = await axios.get(api + '/project', { params: filter })\r\n            if (response && response.status === 200) {\r\n                if (response.data && response.data.resultCode === \"20000\") {\r\n                    this.setState({ data: response.data.resultData })\r\n                } else {\r\n                    this.setState({ data: response.data.resultData })\r\n                }\r\n\r\n            }\r\n            this.setState({ loadPanelVisible: false })\r\n        } catch (error) {\r\n            this.setState({ loadPanelVisible: false })\r\n            console.log(\"TCL: Project -> fnGetData -> error\", error)\r\n        }\r\n    }\r\n\r\n    delCellRender = (data) => {\r\n        console.log(\"project -> DelcellRender -> data\", data);\r\n        return (\r\n            <a\r\n                onClick={() => {\r\n                    this.setState({\r\n                        isOpen: true,\r\n                        isTypeShowConfirm: \"del\",\r\n                        isTextMsg: msgPopupTitle.deleted,\r\n                        isDataPopUp: data.data.projectId,\r\n                    });\r\n                }}\r\n            >\r\n\r\n                <span style={{ color: \"#111\", fontSize: \"12pt\" }}>\r\n\r\n                    <DeleteOutlined />\r\n                </span>\r\n            </a>\r\n        );\r\n    };\r\n\r\n    editCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/project\" + `/{\"action\":\"edit\",\"projectId\":\"${data.data.projectId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <FormOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n\r\n    viewCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/project\" + `/{\"action\":\"view\",\"projectId\":\"${data.data.projectId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <EyeOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n\r\n    noCellRender = (data) => {\r\n        return (\r\n            <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                {data.component.pageIndex() * data.component.pageSize() +\r\n                    data.rowIndex +\r\n                    1}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    onProjectNameChange = (event) => {\r\n        this.setState({\r\n            filter: {\r\n                ...this.state.filter,\r\n                projectName: event.target.value\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\" id=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"#\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> Project </span>\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\">\r\n                                    <div className=\"box-title-search\">\r\n                                        <p className=\"font-size-search\"> Search Project </p>\r\n                                    </div>\r\n                                    <div className=\"box-content\">\r\n                                        <div className=\"box-search-border\">\r\n                                            <form>\r\n                                                <div className=\"row form-group\">\r\n                                                    <div\r\n                                                        className=\"col-4\"\r\n                                                        style={{ textAlign: \"right\" }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                                {/* Project Name */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-3\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label\r\n                                                            className=\"title-field\"\r\n                                                            for=\"txtProjectName\"\r\n                                                        >\r\n                                                            Project Name\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-6\"\r\n                                                        id=\"txtProjectName\"\r\n                                                        value={this.state.filter.projectName}\r\n                                                        onChange={this.onProjectNameChange}\r\n                                                    />\r\n                                                </div>\r\n                                            </form>\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-12\" style={{ textAlign: \"center\" }}>\r\n                                                    <button\r\n                                                        class=\"btn-custom btn-reset \"\r\n                                                        style={{ marginRight: 20 }}\r\n                                                        onClick={this.handleReset}\r\n                                                    >\r\n                                                        RESET\r\n                                                    </button>\r\n                                                    <button class=\"btn-custom btn-search \" onClick={this.onSearch}>\r\n\r\n                                                        SEARCH\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content start*/}\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\" style={{ padding: 30 }}>\r\n                                    <div style={{ textAlign: \"end\", padding: 15 }}>\r\n                                        <Link to='/project/{\"action\":\"create\"}'>\r\n                                            <button\r\n                                                className=\"btn-custom btn-search \"\r\n                                                style={{ width: 250 }}\r\n                                            >\r\n\r\n                                                <span className=\"btn-icon\">\r\n\r\n                                                    <IoAddOutline />\r\n                                                </span>\r\n                                                <span className=\"btn-txt-icon\">\r\n                                                    Create Project\r\n                                                </span>\r\n                                            </button>\r\n                                        </Link>\r\n                                    </div>\r\n\r\n                                    {/* data grid */}\r\n\r\n                                    <div style={{ padding: 20 }}>\r\n                                        <DataGrid\r\n                                            dataSource={this.state.data}\r\n                                            showBorders={true}\r\n                                            showRowLines={true}\r\n                                            ref={this.dataGridRef}\r\n                                            noDataText=\"No Data\"\r\n                                            onOptionChanged={this.handleOptionChange}\r\n                                        >\r\n                                            <Paging defaultPageSize={configService.defaultPageSize}\r\n                                                pageSize={this.state.pageSize}\r\n                                                pageIndex={this.state.pageIndex} />\r\n                                            <Pager\r\n                                                showPageSizeSelector={true}\r\n                                                allowedPageSizes={configService.allowedPageSizes}\r\n                                                showInfo={true}\r\n                                                showNavigationButtons={true}\r\n                                                visible={true}\r\n                                                remoteOperations={true}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                caption=\"No\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.noCellRender}\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Project Name\"\r\n                                                dataField=\"projectName\"\r\n                                                alignment=\"center\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Phase\"\r\n                                                dataField=\"projectPhase\"\r\n                                                alignment=\"center\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"View\"\r\n                                                cellRender={this.viewCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"Edit\"\r\n                                                cellRender={this.editCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.delCellRender}\r\n                                                caption=\"Delete\"\r\n                                            />\r\n                                        </DataGrid>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content end*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <LoadPanel\r\n                    shadingColor=\"rgba(0,0,0,0.4)\"\r\n                    position={position}\r\n                    visible={this.state.loadPanelVisible}\r\n                />\r\n\r\n\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                        this.fnGetData()\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(e) => {\r\n                        console.log(\"Work -> render -> e\", e);\r\n                        this.onDeleteData(e)\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Project;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js",["343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport { HomeOutlined, DeleteOutlined, FormOutlined } from '@ant-design/icons';\r\nimport DropDownButton from 'devextreme-react/drop-down-button';\r\nimport moment from 'moment';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport DataGrid, {\r\n  Column,\r\n  Grouping,\r\n  GroupPanel,\r\n  Paging,\r\n  SearchPanel,\r\n  Editing,\r\n  Pager,\r\n  Scrolling,\r\n} from 'devextreme-react/data-grid';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, Modal, TimePicker, Select } from 'antd';\r\nimport configService from '../../config';\r\nimport axios from 'axios'\r\nimport { LoadPanel } from 'devextreme-react/load-panel';\r\n\r\nimport { extendMoment } from 'moment-range';\r\n\r\nconst momentEx = extendMoment(moment);\r\n\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst msgValid = configService.validDateFill;\r\n\r\nconst format = \"HH:mm A\";\r\nconst Option = Select.Option;\r\nconst api = configService.appIp + configService.apiUrlPrefix\r\nconst position = { of: '#App' };\r\n\r\nclass Work extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      itembar: [false, false, false],\r\n      filter: {\r\n        dateFrom: moment().clone().startOf('month').toDate(),\r\n        dateTo: moment().clone().endOf('month').toDate(),\r\n        projectId: null,\r\n        typeId: null\r\n      },\r\n      projectList: [],\r\n      typeList: [],\r\n      isPopupSuccess: false, // alert success case\r\n      isPopupError: false,  // alert error case\r\n      isPopupMsg: '',  // alert msg\r\n      isOpen: false, // open popup confirm\r\n      isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n      isDataPopUp: {}, // ข้อมูลที่ใช้\r\n      isTextMsg: '', // msg ของ Popup\r\n      isDelete: false, // ใช้เช็คว่าเป็นการลบไหม\r\n      data: [\r\n        ],\r\n      popOver: {\r\n        workId: '',\r\n        visible: false\r\n      },\r\n      popupEditVisable: false,\r\n      updateData: {\r\n        projectId: null,\r\n        typeId: null,\r\n        workDate: null,\r\n        workDetail: null,\r\n        workUrl: null,\r\n        workManhour: null,\r\n        workTimeIn: null,\r\n        workTimeOut: null,\r\n        projectPhase: null,\r\n        timeIn: null,\r\n        timeOut: null,\r\n      },\r\n      loadPanelVisible: false\r\n    };\r\n\r\n    this.dataPopup = [\r\n      { id: 1, name: 'Edit', icon: 'edit' },\r\n      { id: 2, name: 'Delete', icon: 'trash' },\r\n    ];\r\n\r\n    // ปั้นวันที่ตามเดือนปัจจุบัน start\r\n    this.dateOfCurrentMouth = []\r\n    for (let i = 0; i < moment().daysInMonth(); i++) {\r\n      this.dateOfCurrentMouth.push({ workDate: `${(i + 1) >= 10 ? i + 1 : '0' + (i + 1)}/${moment().format('MM')}/${moment().format('YYYY')}` })\r\n    }\r\n\r\n    \r\n\r\nconst range = momentEx.range(this.state.filter.dateFrom, this.state.filter.dateTo);\r\nconsole.log(\"🚀 ~ file: index.js ~ line 103 ~ Work ~ constructor ~ range\", range)\r\n    // this.keyDelete = [];\r\n    // ปั้นวันที่ตามเดือนปัจจุบัน end\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      this.setState({ loadPanelVisible: true })\r\n      await this.getProjectList()\r\n      await this.gettypeList()\r\n      this.fnSetDefaultDate()\r\n      await this.fnGetData();\r\n      this.setState({ loadPanelVisible: false })\r\n    } catch (error) {\r\n      console.log(\"TCL: componentDidMount -> error\", error)\r\n    }\r\n  }\r\n\r\n  fnSetDefaultDate() {\r\n    let temp = _.cloneDeep(this.dateOfCurrentMouth)\r\n    // เอาค่าของ workDate ออกมา\r\n    setTimeout(() => {\r\n      let dataWorkDate = this.state.data.map(r => r.workDate)\r\n      // เอาค่าที่ไม่ซ้ำของ workDate\r\n      temp = temp.filter(r => dataWorkDate.indexOf(r.workDate) === -1)\r\n      for (const item of this.state.data) {\r\n        temp.push(item)\r\n  \r\n      }\r\n      // console.log(\"TCL: fnSetDefaultDate -> temp\", temp)\r\n      this.setState({ data: temp })\r\n    }, 250);\r\n  }\r\n\r\n  \r\n  async getProjectList() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let resData = []\r\n        let filter = {\r\n          \"fields\": \"projectId,projectName,projectPhase\"\r\n          \r\n        }\r\n        const response = await axios.get(api + '/project', { params: filter })\r\n        if (response && response.status === 200) {\r\n          if (response.data && response.data.resultCode === \"20000\") {\r\n\r\n            // const result = numbers.map((number) => {\r\n            //   return number*2\r\n            // })\r\n          // ** Map Phase **\r\n            response.data.resultData = response.data.resultData.map((phase) => {\r\n              phase.projectName = `${phase.projectName} ${phase.projectPhase}`\r\n              return phase\r\n            })\r\n\r\n            this.setState({ projectList: response.data.resultData })\r\n            console.log(\"🚀 ~ file: index.js ~ line 219 ~ Work ~ returnnewPromise ~ response.data.resultData\", response.data.resultData)\r\n            resData = response.data.resultData\r\n          } else {\r\n            this.setState({ projectList: response.data.resultData ? response.data.resultData : [] })\r\n            resData = response.data.resultData || [];\r\n          }\r\n\r\n          let temp = [];\r\n          for (let i = 0; i < resData.length; i++) {\r\n            temp.push(\r\n              <Option key={resData[i].projectId}> {resData[i].projectName} </Option>\r\n            );\r\n          }\r\n\r\n          this.projectList = temp;\r\n        }\r\n        resolve();\r\n      } catch (error) {\r\n        console.log(\"TCL: getProjectList -> error\", error)\r\n        reject(error)\r\n      }\r\n    });\r\n  }\r\n\r\n  async gettypeList() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let resData = []\r\n        let filter = {\r\n          \"fields\": \"typeId,typeName\"\r\n        }\r\n        const response = await axios.get(api + '/type', { params: filter })\r\n        if (response && response.status === 200) {\r\n          if (response.data && response.data.resultCode === \"20000\") {\r\n            this.setState({ typeList: response.data.resultData })\r\n            resData = response.data.resultData\r\n          } else {\r\n            this.setState({ typeList: response.data.resultData ? response.data.resultData : [] })\r\n            resData = response.data.resultData || [];\r\n          }\r\n\r\n          let temp = [];\r\n          for (let i = 0; i < resData.length; i++) {\r\n            temp.push(\r\n              <Option key={resData[i].typeId}> {resData[i].typeName} </Option>\r\n            );\r\n          }\r\n\r\n          this.typeList = temp;\r\n        }\r\n        resolve();\r\n      } catch (error) {\r\n        console.log(\"TCL: getProjectList -> error\", error)\r\n        reject(error)\r\n      }\r\n    });\r\n  }\r\n  \r\n  handleProjectChange = (event) => {\r\n    this.setState({\r\n      filter: {\r\n        ...this.state.filter,\r\n        projectId: event.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  handleTypeChange = (event) => {\r\n    this.setState({\r\n      filter: {\r\n        ...this.state.filter,\r\n        typeId: event.target.value\r\n      }\r\n    });\r\n  }\r\n\r\n  handleChangeDateFrom = (event, type) => {\r\n    if (type === 'from') {\r\n      this.setState({\r\n        filter: {\r\n          ...this.state.filter,\r\n          dateFrom: event.value,\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filter: {\r\n          ...this.state.filter,\r\n          dateTo: event.value\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  handleChangeDate  = (event,index) => {\r\n    let temp = _.cloneDeep(this.state.updateData.data)\r\n    for (let i = 0; i < temp.length; i++) {\r\n        const element = temp[i];\r\n        element.workDate = event.value\r\n    }\r\n\r\n    if (!event.value || event.value !== '') {\r\n        this.setState({ isValid_workDate: false });\r\n        \r\n    }\r\n    this.setState({ updateData: event.value, data: temp })\r\n}\r\n\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      filter: {\r\n        dateFrom: moment().clone().startOf('month').toDate(),\r\n        dateTo: moment().clone().endOf('month').toDate(),\r\n        projectId: null,\r\n        typeId: null\r\n      }\r\n    })\r\n    setTimeout(() => {\r\n      this.fnGetData();\r\n  }, 100);\r\n  }\r\n\r\n  onSearch = () => {\r\n    this.setState({ loadPanelVisible: true })\r\n    this.fnGetData();\r\n}\r\n\r\n\r\n  groupRender = (data) => {\r\n    // console.log(\"groupRender -> data\", data)\r\n    // ข้อความ ดำ > บันทึกแล้ว\r\n    // ข้อความ แดง > ไม่บันทึก / ส - อ\r\n    // ข้อความ น้ำเงิน > ปัจจุบัน\r\n    let day = moment(data.value, 'DD/MM/YYYY').format('dddd')\r\n    let id = data.data.items && data.data.items.length > 0 ? data.data.items[0].workId : data.data.collapsedItems && data.data.collapsedItems.length > 0 ? data.data.collapsedItems[0].workId : null\r\n    let name = `DATE : ${data.value}  ${day}`\r\n    let now = moment().format('DD-MM-YYYY');\r\n    let workDate = '\"' + data.value.replace(/\\//g, \"%2F\") + '\"'\r\n      \r\n\r\n    console.log(\"TCL: groupRender -> workDate\", workDate)\r\n    return (<div className=\"row\">\r\n      <div style={{ fontSize: '12pt' }} className={`col-6 ${day === 'Sunday' || day === 'Saturday' ? 'color-red' : data.value === now ? 'color-blue' : 'color-black'}`}>\r\n        {name}\r\n      </div>\r\n\r\n      {/* ปุ่มบวก : */}\r\n\r\n      {/* {data.data.items[0].workId} */}\r\n      {data.data.items.length === 0 || data.data.items[0].workId === undefined ?\r\n        <div className=\"col-6\" style={{ textAlign: 'end' }}>\r\n          <Link to={\"/work\" + `/{\"action\":\"create\",\"workDate\":${workDate}}`}>\r\n            {/* <button className=\"btn-custom btn-search \" style={{ width: '40px', hight: '13px', borderRadius: '50%', }}><IoAddOutline /></button> */}\r\n            <IoAddOutline style={{ backgroundColor: 'green', borderRadius: '50%', width: '30', height: '30' }} />\r\n\r\n          </Link>\r\n        </div> :\r\n        <div className=\"col-6\" style={{ textAlign: 'end' }}>\r\n          <Link to={\"/work\" + `/{\"action\":\"edit\",\"workDate\":${workDate},\"workId\":${data.data.items[0].workId}}`}>\r\n            <span className=\"custom-icon-group\" style={{ color: 'black', fontSize: '12pt', marginRight: 20 }}><FormOutlined /></span>\r\n          </Link>\r\n          <a className=\"custom-icon-group\" onClick={() => {\r\n            console.log(data.data, 'data.datadata.datadata.datadata.data')\r\n            this.setState({\r\n              isOpen: true,\r\n              isTypeShowConfirm: \"del\",\r\n              isTextMsg: msgPopupTitle.deleted,\r\n              isDataPopUp: [data.data, 'all'],\r\n              isDelete: true,\r\n            });\r\n          }}><span style={{ color: '#111', fontSize: '12pt', marginRight: 20 }}><DeleteOutlined /></span></a>\r\n        </div>}\r\n\r\n    </div>\r\n    )\r\n  }\r\n\r\n  actionRender = (data) => {\r\n    return (<> {data.key && data.key.workId ?\r\n      <DropDownButton\r\n        text=\"...\"\r\n        dropDownOptions={{ width: 100 }}\r\n        items={this.dataPopup}\r\n        displayExpr=\"name\"\r\n        keyExpr=\"id\"\r\n        onItemClick={(e) => { this.onItemClick(e, data) }}\r\n      /> : null}\r\n    </>)\r\n  }\r\n\r\n  onItemClick = (e, data) => {\r\n    console.log(\"TCL: onItemClick -> data\", data)\r\n    if (e.itemData.name === 'Edit') {\r\n      this.setState({\r\n        popupEditVisable: true, updateData: {\r\n          ...data.data,\r\n          workTimeIn: moment(data.data.workTimeIn, 'HH:mm A'),\r\n          workTimeOut: moment(data.data.workTimeOut, 'HH:mm A'),\r\n          timeIn: data.data.workTimeIn,\r\n          timeOut: data.data.workTimeOut,\r\n        }\r\n      })\r\n\r\n    } else if (e.itemData.name === 'Delete') {\r\n      // call function delete\r\n      this.setState({\r\n        isOpen: true,\r\n        isTypeShowConfirm: \"del\",\r\n        isTextMsg: msgPopupTitle.deleted,\r\n        isDataPopUp: [data.data, 'one'],\r\n        isDelete: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  onDeleteData = async (data) => {\r\n    try {\r\n      var response = await axios.post(api + '/work/' , data);\r\n   \r\n    // if (data[1] === 'one') {\r\n    //   let dataWorkDate = this.state.data.map(r => {\r\n    //     if (r.workDate === data[0].workDate) {\r\n    //       return r\r\n    //     }\r\n    //   })\r\n\r\n    //   let newData = _.without(dataWorkDate, undefined);\r\n\r\n    //   // ต้อง call api -------------------\r\n    //   let tempDel = this.state.data.filter(r => data[0].workId.indexOf(r.workId) === -1)\r\n    //   if (newData && newData.length <= 1) {\r\n    //     tempDel.push({ workDate: data[0].workDate })\r\n    //   }\r\n    //   this.setState({ data: tempDel })\r\n    // } else {\r\n    //   let tempDel = _.cloneDeep(this.state.data)\r\n    //   for (let i = 0; i < data[0].items.length; i++) {\r\n    //     const element = data[0].items[i];\r\n    //     tempDel = tempDel.filter(r => element.workId.indexOf(r.workId) === -1)\r\n    //   }\r\n    //   tempDel.push({ workDate: data[0].key })\r\n    //   this.setState({ data: tempDel })\r\n\r\n    if (response && response.status === 200) {\r\n      if (response.data && response.data.resultCode === \"20000\") {\r\n          this.setState({ isOpen: false });\r\n          this.setState({ isPopupError: false });\r\n          this.setState({ isPopupSuccess: true });\r\n          this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n      } else {\r\n          this.setState({ isOpen: false })\r\n          this.setState({ isPopupError: true })\r\n          this.setState({ isPopupSuccess: false })\r\n          this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n      }\r\n    }\r\n  } catch (error) {\r\n    this.setState({ loadPanelVisible: false })\r\n    this.setState({ isOpen: false })\r\n    this.setState({ isPopupError: true })\r\n    this.setState({ isPopupSuccess: false })\r\n    this.setState({ isPopupMsg: msgAlertTitle.systemError })\r\n    console.log(\"TCL: Work -> fnGetData -> error\", error)\r\n  }\r\n  }\r\n\r\n  onUpdateData = (data) => {\r\n    console.log(\"TCL: onDeleteData -> data\", data)\r\n    let temp = _.cloneDeep(this.state.data)\r\n    for (let i = 0; i < temp.length; i++) {\r\n      const element = temp[i];\r\n      if (element.workId === this.state.updateData.workId) {\r\n        let splitTime = this.state.updateData.workManhour.split(':')\r\n        temp[i] = this.state.updateData\r\n        temp[i].workManhour = splitTime[0]\r\n        temp[i].workTimeIn = this.state.updateData.timeIn\r\n        temp[i].workTimeOut = this.state.updateData.timeOut\r\n      }\r\n    }\r\n\r\n    this.setState({ popupEditVisable: false })\r\n    this.setState({ data: temp })\r\n    this.setState({ isOpen: false })\r\n    this.setState({ isPopupError: false })\r\n    this.setState({ isPopupSuccess: true })\r\n    this.setState({ isPopupMsg: msgAlertTitle.updated })\r\n  }\r\n\r\n  delCellRender = (data) => {\r\n        console.log(\"project -> DelcellRender -> data\", data);\r\n        return (\r\n            <a\r\n                onClick={() => {\r\n                    this.setState({\r\n                        isOpen: true,\r\n                        isTypeShowConfirm: \"del\",\r\n                        isTextMsg: msgPopupTitle.deleted,\r\n                        isDataPopUp: data.data.workId,\r\n                    });\r\n                }}\r\n            >\r\n\r\n                <span style={{ color: \"#111\", fontSize: \"12pt\" }}>\r\n\r\n                    <DeleteOutlined />\r\n                </span>\r\n            </a>\r\n        );\r\n    };\r\n\r\n  onEditorPreparing(e) {\r\n    console.log(\"TCL: onEditorPreparing -> e ===> \", e)\r\n    if (e.parentType === 'dataRow' && e.dataField === 'Position') {\r\n      e.editorOptions.readOnly = this.isChief(e.value);\r\n    }\r\n  }\r\n\r\n  onEditorPrepared(e) {\r\n    console.log(\"TCL: onEditorPrepared -> e ===> \", e)\r\n  }\r\n\r\n  onInitNewRow(e) {\r\n    console.log(\"TCL: onInitNewRow -> e ===> \", e)\r\n  }\r\n\r\n  onContentReady(e) {\r\n    console.log(\"TCL: onContentReady -> e ===> \", e)\r\n  }\r\n\r\n  onRowPrepared(e) {\r\n    // แถบสี ม่วง > จ-ศ\r\n    // แถบสี เทา > ส-อ\r\n    if (e.rowType === 'group') {\r\n      // console.log(\"TCL: onRowPrepared -> e ===> \", e)\r\n      let day = moment(e.key[0], 'DD/MM/YYYY').format('dddd')\r\n      if (day !== 'Sunday' && day !== 'Saturday') {\r\n        e.rowElement.style.backgroundColor = 'rgb(232 211 255)';\r\n      } else {\r\n        e.rowElement.style.backgroundColor = '#ddd';\r\n      }\r\n      if (e.cells) {\r\n        if (e.cells[0]) {\r\n          if ((e.cells[0].data.collapsedItems && e.cells[0].data.collapsedItems[0] && e.cells[0].data.collapsedItems[0].workId) || (e.cells[0].data.items && e.cells[0].data.items[0] && e.cells[0].data.items[0].workId)) {\r\n            // e.component.expandRow(e.component.getKeyByRowIndex(e.rowIndex));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkValidData = () => {\r\n    let validProject = this.checkValid('project')\r\n    let validJobType = this.checkValid('job')\r\n    let validTimeIn = this.checkValid('in')\r\n    let validTimeOut = this.checkValid('out')\r\n    let validManHours = this.checkValid('hours')\r\n    let validDetail = this.checkValid('detail')\r\n    let validGreater = this.checkGreaterTime()\r\n    if (validProject && validJobType && validTimeIn && validTimeOut && validManHours && validDetail && validGreater) {\r\n      this.setState({\r\n        isOpen: true,\r\n        isTypeShowConfirm: \"save\",\r\n        isTextMsg: msgPopupTitle.saved,\r\n        isDataPopUp: this.state.updateData,\r\n        isDelete: false,\r\n      });\r\n    } else {\r\n\r\n      console.log(\"TCL: ActionsWork -> checkValidData -> \", 'กรอกข้อมูลไม่ครบ')\r\n    }\r\n  }\r\n\r\n  checkValid = (type) => {\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    let res = true;\r\n    if (type === 'project') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_projectName;\r\n      if (!element.projectId || element.projectId === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_projectName: valid });\r\n      }\r\n    } else if (type === 'job') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_jobType;\r\n      if (!element.typeId || element.typeId === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_jobType: valid });\r\n\r\n      }\r\n    } else if (type === 'in') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_timeIn;\r\n      if (!element.workTimeIn || element.workTimeIn === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_timeIn: valid });\r\n\r\n      }\r\n    } else if (type === 'out') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_timeOut;\r\n      if (!element.workTimeOut || element.workTimeOut === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_timeOut: valid });\r\n\r\n      }\r\n    } else if (type === 'hours') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_manHours;\r\n      if (!element.workManhour || element.workManhour === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_manHours: valid });\r\n\r\n      }\r\n    } else if (type === 'detail') {\r\n      const element = temp;\r\n      let valid = this.state.isValid_detail;\r\n      if (!element.workDetail || element.workDetail === '') {\r\n        res = false;\r\n        valid = true;\r\n        this.setState({ isValid_detail: valid });\r\n\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  checkGreaterTime() {\r\n    let res = true\r\n    if ((!this.state.updateData.timeIn || this.state.updateData.timeIn !== '') && (!this.state.updateData.timeOut || this.state.updateData.timeOut !== '')) {\r\n      var start = moment(this.state.updateData.timeIn, 'HH:mm A').format('HH:mm');\r\n      var end = moment(this.state.updateData.timeOut, 'HH:mm A').format('HH:mm');\r\n      let validTimeIn = this.state.greaterTimeIn;\r\n      let validTimeOut = this.state.greaterTimeOut;\r\n      if (start > end) {\r\n        validTimeIn = true;\r\n        validTimeOut = true;\r\n        this.setState({\r\n          greaterTimeIn: validTimeIn,\r\n          greaterTimeOut: validTimeOut,\r\n        })\r\n        res = false\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  confirmSave = (data) => {\r\n    console.log(\"TCL: ActionsWork -> confirmSave -> data\", data)\r\n    this.setState({ isOpen: false });\r\n    this.setState({ isPopupError: false });\r\n    this.setState({ isPopupSuccess: true });\r\n    this.setState({ isPopupMsg: this.state.params.action === \"edit\" ? msgAlertTitle.updated : msgAlertTitle.saved });\r\n\r\n  }\r\n\r\n  onWorkManHoursChange = (event) => {\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    temp.workManhour = event.target.value\r\n\r\n    let valid = this.state.isValid_timeOut;\r\n    if (!event.target.value || event.target.value !== '') {\r\n      valid = false;\r\n    }\r\n\r\n    this.setState({ updateData: temp, isValid_timeOut: valid });\r\n  }\r\n\r\n  onWorkUrlChange = (event) => {\r\n    console.log(\"TCL: ActionsWork -> onWorkUrlChange -> event\", event)\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    temp.workUrl = event.target.value\r\n    console.log(\"TCL: ActionsWork -> onWorkUrlChange -> temp\", temp)\r\n\r\n    this.setState({ updateData: temp });\r\n  }\r\n\r\n  onWorkDetailChange = (event, index) => {\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    temp.workDetail = event.target.value\r\n\r\n    let valid = this.state.isValid_detail;\r\n    if (!event.target.value || event.target.value !== '') {\r\n      valid = false;\r\n    }\r\n    this.setState({ updateData: temp, isValid_detail: valid });\r\n  }\r\n\r\n  onWorkPlanChange = (event, index) => {\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    temp.workPlan = event.target.value\r\n\r\n    let valid = this.state.isValid_Plan;\r\n    if (!event.target.value || event.target.value !== '') {\r\n      valid = false;\r\n    }\r\n    this.setState({ updateData: temp, isValid_Plan: valid });\r\n  }\r\n\r\n  onWorkRefChange = (event, index) => {\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    temp.workRef = event.target.value\r\n\r\n    let valid = this.state.isValid_Ref;\r\n    if (!event.target.value || event.target.value !== '') {\r\n      valid = false;\r\n    }\r\n    this.setState({ updateData: temp, isValid_Ref: valid });\r\n  }\r\n \r\n\r\n  // TODO :: Select\r\n  // TODO :: Dropdown Project Name\r\n  handleChangeProject = (value, index) => {\r\n    let item = this.state.updateData;\r\n    item.projectName = value;\r\n    let valid = this.state.isValid_projectName;\r\n    console.log(\"TCL: ActionsWork -> handleChangeProject -> valid\", valid)\r\n    if (!value || value !== '') {\r\n      valid = false;\r\n    }\r\n    this.setState({ updateData: item, isValid_projectName: valid });\r\n    console.log(\"TCL: ActionsWork -> handleChangeProject -> \", this.state)\r\n  };\r\n\r\n  // TODO :: Dropdown Job Type\r\n  handleChangeType = (value, index) => {\r\n    let item = this.state.updateData;\r\n    item.typeName = value;\r\n    let valid = this.state.isValid_jobType;\r\n    console.log(\"TCL: ActionsWork -> handleChangeType -> valid\", valid)\r\n    if (!value || value !== '') {\r\n      valid = false;\r\n    }\r\n\r\n    this.setState({ updateData: item, isValid_jobType: valid });\r\n    console.log(\"TCL: ActionsWork -> handleChangeType -> \", this.state)\r\n  };\r\n\r\n  \r\n  // TODO :: calculate man hours\r\n  calManHours = () => {\r\n\r\n    let temp = _.cloneDeep(this.state.updateData)\r\n    console.log(\"TCL: calManHours -> temp\", temp)\r\n    let validIn = this.state.isValid_timeIn;\r\n    let validOut = this.state.isValid_timeOut;\r\n\r\n\r\n    if (!temp.timeIn || temp.timeIn === '' || !temp.timeOut || temp.timeOut === '') {\r\n      if (!temp.timeOut || temp.timeOut === '') {\r\n        validOut = true;\r\n        this.setState({ isValid_timeOut: validOut });\r\n      }\r\n      if (!temp.timeIn || temp.timeIn === '') {\r\n        validIn = true;\r\n        this.setState({ isValid_timeIn: validIn });\r\n      }\r\n      return\r\n    }\r\n\r\n    if (this.checkGreaterTime() === false) {\r\n      console.log(\"TCL: ActionsWork -> calManHours -> \", 'time out > time in')\r\n      return\r\n    }\r\n\r\n    var start = moment(temp.timeIn, 'HH:mm A').format('HH:mm');\r\n    var end = moment(temp.timeOut, 'HH:mm A').format('HH:mm');\r\n    let tempTime = this.fnCallDiffTime(start, end)\r\n    let time = '';\r\n    let dataTime = tempTime.split(\":\");\r\n    let tempStart = start.split(\":\");\r\n    let tempEnd = end.split(\":\");\r\n    if (start <= '12:00' && end >= '13:00') {\r\n      let a = parseInt(dataTime[0]) - 1\r\n      time = (a <= 9 ? \"0\" : \"\") + a + \":\" + dataTime[1];\r\n    } else if (start > '12:00' && start < '13:00') {\r\n      if (end <= '13:00') {\r\n        time = '00:00'\r\n      } else if (end > '13:00') {\r\n        if (parseInt(tempStart[1]) <= parseInt(tempEnd[1])) {\r\n          let calHours = parseInt(dataTime[0]) - 1\r\n          time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + tempEnd[1];\r\n        } else {\r\n          let calMin = parseInt(tempEnd[1])\r\n          let calHours = parseInt(dataTime[0])\r\n          time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + (calMin <= 9 ? \"0\" : \"\") + calMin;\r\n        }\r\n      }\r\n    } else {\r\n      time = tempTime;\r\n    }\r\n\r\n    temp.workManhour = time\r\n    this.setState({ updateData: temp })\r\n  };\r\n\r\n  fnCallDiffTime = (start, end) => {\r\n    start = start.split(\":\");\r\n    end = end.split(\":\");\r\n    var startDate = new Date(0, 0, 0, start[0], start[1], 0);\r\n    var endDate = new Date(0, 0, 0, end[0], end[1], 0);\r\n    var diff = endDate.getTime() - startDate.getTime();\r\n    var hours = Math.floor(diff / 1000 / 60 / 60);\r\n    diff -= hours * 1000 * 60 * 60;\r\n    var minutes = Math.floor(diff / 1000 / 60);\r\n\r\n    if (hours < 0)\r\n      hours = hours + 24;\r\n\r\n    let time = (hours <= 9 ? \"0\" : \"\") + hours + \":\" + (minutes <= 9 ? \"0\" : \"\") + minutes;\r\n    return time;\r\n  }\r\n\r\n  // TODO :: Dropdown Time In\r\n  onChangeTimeIn = (time, timestring) => {\r\n    console.log(\"TCL: onChangeTimeIn -> timestring\", timestring)\r\n    console.log(\"TCL: onChangeTimeIn -> time\", time)\r\n    let item = this.state.updateData;\r\n    item.workTimeIn = time;\r\n    item.timeIn = timestring;\r\n    let valid = this.state.isValid_timeIn;\r\n    if (!timestring || timestring !== '') {\r\n      valid = false;\r\n    }\r\n\r\n    this.setState({ updateData: item, isValid_timeIn: valid });\r\n  };\r\n\r\n  // TODO :: Dropdown Time Out\r\n  onChangeTimeOut = (time, timestring) => {\r\n    let item = this.state.updateData;\r\n    item.workTimeOut = time;\r\n    item.timeOut = timestring;\r\n    let valid = this.state.isValid_timeOut;\r\n    if (!timestring || timestring !== '') {\r\n      valid = false;\r\n    }\r\n\r\n    this.setState({ updateData: item, isValid_timeOut: valid });\r\n\r\n  };\r\n\r\n\r\n\r\n  fnGetData = async () => {\r\n    return new Promise(async (resolve, reject)=>{\r\n\r\n    try {\r\n        let filter = {}\r\n        filter.filter = {}\r\n        filter.fields = configService.fields.workList\r\n        filter.limit = this.state.pageSize;\r\n        filter.offset = this.state.pageIndex;\r\n        filter.orderby = \"projectName\";\r\n\r\n        if (this.state.filter.projectName && this.state.filter.projectName !== '') {\r\n            filter.filter.projectName = this.state.filter.projectName\r\n        }\r\n        \r\n        if (this.state.filter.typeName && this.state.filter.typeName !== '') {\r\n            filter.filter.typeName = this.state.filter.typeName\r\n        }\r\n\r\n      if (this.state.filter.dateFrom && this.state.filter.dateFrom !== '') {\r\n        filter.filter.dateFrom = this.state.filter.dateFrom\r\n    }\r\n\r\n      if (this.state.filter.dateTo && this.state.filter.dateTo !== '') {\r\n        filter.filter.dateTo = this.state.filter.dateTo\r\n    }\r\n\r\n      \r\n        const response = await axios.get(api + '/work', { params: filter })\r\n        if (response && response.status === 200) {\r\n          if (response.data && response.data.resultCode === \"20000\") {\r\n              console.log(\"🚀 ~ file: index.js ~ line 751 ~ Work ~ returnnewPromise ~ this.state.data\", this.state.data)\r\n              // let mergeData = this.state.data.concat(response.data.resultData)\r\n              let mergeData = (response.data.resultData)\r\n              // console.log(\"🚀 ~ file: index.js ~ line 749 ~ Work ~ fnGetData= ~ response.data.resultData\", response.data.resultData)\r\n              console.log(\"\\n\\n\\n🚀 ~ file: index.js ~ line 749 ~ Work ~ fnGetData= ~ mergeData\", mergeData)\r\n                this.setState({ data: mergeData })\r\n                // this.fnSetDefaultDate()\r\n            } else {\r\n                this.setState({ data: this.state.data(response.data.resultData) })\r\n            }\r\n\r\n        }\r\n        this.setState({ loadPanelVisible: false })\r\n    } catch (error) {\r\n        this.setState({ loadPanelVisible: false })\r\n        console.log(\"TCL: Work -> fnGetData -> error\", error)\r\n    }\r\n  })\r\n\r\n}\r\n\r\n  render() {\r\n\r\n    return (<>\r\n\r\n      <div className=\"App\" id=\"App\">\r\n        <div id=\"boxType\" className=\"container-box-content\">\r\n          <div className=\"row wrap-container\">\r\n            <Breadcrumb>\r\n              {/* <Breadcrumb.Item href=\"#\"> */}\r\n              <HomeOutlined />\r\n              <span className=\"breadcrum-custom\">  Work </span>\r\n              {/* </Breadcrumb.Item> */}\r\n            </Breadcrumb>\r\n\r\n            <div className=\"wrap-content\">\r\n              <div className=\"box-search\">\r\n                <div className=\"box-title-search\">\r\n                  <p className=\"font-size-search\">Search Work</p>\r\n\r\n                </div>\r\n                <div className=\"box-content\">\r\n                  <div className=\"box-search-border\">\r\n                    <form>\r\n\r\n                      {/*  Dropdown */}\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlProjectName\" className=\"title-field\">Project Name</label></div>\r\n                            <select class=\"form-control col-7\" id=\"ddlProjectName\" value={this.state.filter.projectId} onChange={this.handleProjectChange}>\r\n                              {\r\n                                this.state.projectList.map(r => {\r\n                                  return <option value={r.projectId} selected={r.projectId == this.state.filter.projectId}>{r.projectName}</option>\r\n\r\n                                })\r\n                              }\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlJobType\" className=\"title-field\">Job Type</label></div>\r\n                            <select class=\"form-control col-7\" id=\"ddlJobType\" value={this.state.filter.typeId} onChange={this.handleTypeChange}>\r\n                              {\r\n                                this.state.typeList.map(r => {\r\n                                  // console.log(\"Work -> render -> r\", r)\r\n                                  return <option value={r.typeId} selected={r.typeId == this.state.filter.typeId}>{r.typeName}</option>\r\n                                })\r\n                              }\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/*  วันที่ */}\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlDateFrom\" className=\"title-field\">Date : From</label></div>\r\n                            <div className=\"col-7\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                              <DateBox\r\n                                value={this.state.filter.dateFrom}\r\n                                displayFormat=\"dd/MM/yyyy\"\r\n                                type=\"date\" onValueChanged={(e) => {\r\n                                  this.handleChangeDateFrom(e, 'from')\r\n                                }} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"row form-group\">\r\n                            <div className=\"col-4\"><label for=\"ddlDateTo\" className=\"title-field\">Date : To</label></div>\r\n                            <div className=\"col-7\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                              <DateBox value={this.state.filter.dateTo}\r\n                                displayFormat=\"dd/MM/yyyy\"\r\n                                type=\"date\" type=\"date\" onValueChanged={(e) => {\r\n                                  this.handleChangeDateFrom(e, 'to')\r\n                                }} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n\r\n                      </div>\r\n                    </form>\r\n\r\n                    <div className=\"row form-group\">\r\n                      <div className=\"col-12\" style={{ textAlign: 'center' }}>\r\n                        <button class=\"btn-custom btn-reset \" style={{ marginRight: 20 }} onClick={this.handleReset}>RESET\r\n                        </button>\r\n                      \r\n                        <button class=\"btn-custom btn-search \" onClick={this.onSearch}>\r\n                          SEARCH</button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n            {/* content start*/}\r\n            <div className=\"wrap-content\">\r\n              <div className=\"box-search\" style={{ padding: 30 }}>\r\n                <div style={{ textAlign: 'end', padding: 15 }}>\r\n                  <Link to='/work/{\"action\":\"create\"}'>\r\n                    <button className=\"btn-custom btn-search \" style={{ width: 185 }}><span className=\"btn-icon\"><IoAddOutline /></span> <span className=\"btn-txt-icon\">Create Work</span></button>\r\n\r\n                  </Link>\r\n                </div>\r\n                <div style={{ padding: 20 }} className=\"table-responsive\">\r\n                  <DataGrid\r\n                    dataSource={this.state.data}\r\n                    allowColumnReordering={false}\r\n                    showBorders={true}\r\n                    onEditorPreparing={this.onEditorPreparing}\r\n                    onEditorPrepared={this.onEditorPrepared}\r\n                    onInitNewRow={this.onInitNewRow}\r\n                    onRowPrepared={this.onRowPrepared}\r\n                    onContentReady={this.onContentReady}\r\n                  // columnWidth={100}\r\n                  >\r\n                    <Editing\r\n                      mode=\"row\"\r\n                      confirmDelete={false}\r\n                    />\r\n                    <Scrolling columnRenderingMode=\"virtual\" />\r\n                    <GroupPanel visible={false}\r\n                    />\r\n                    <SearchPanel visible={false} />\r\n                    <Grouping autoExpandAll={true} allowCollapsing={true} />\r\n                    <Paging defaultPageSize={10} />\r\n                    <Pager\r\n                      showPageSizeSelector={true}\r\n                      allowedPageSizes={[100, 250, 500, 1000]}\r\n                      showInfo={true}\r\n                      showNavigationButtons={true}\r\n                    />\r\n\r\n                    <Column dataField=\"projectName\" caption=\"Project\" dataType=\"string\" alignment=\"center\" />\r\n                    <Column dataField=\"projectPhase\" caption=\"Phase\" dataType=\"string\" alignment=\"center\"/>\r\n                    <Column dataField=\"typeName\" caption=\"Type\" dataType=\"string\"  alignment=\"center\" />\r\n                    <Column dataField=\"workDetail\" caption=\"Detail\" dataType=\"string\"  alignment=\"center\" />\r\n                    <Column dataField=\"workManhour\" caption=\"Man Hours\" dataType=\"string\"  alignment=\"center\" />\r\n                    <Column dataField=\"workTimeIn\" caption=\"Time In\" dataType=\"string\"  alignment=\"center\"/>\r\n                    <Column dataField=\"workTimeOut\" caption=\"Time Out\" dataType=\"string\"  alignment=\"center\"/>\r\n                    <Column dataField=\"workPlan\" caption=\"LinkPlan\" dataType=\"string\"  alignment=\"center\"/>\r\n                    <Column dataField=\"workRef\" caption=\"Ref\" dataType=\"string\"  alignment=\"center\"/>\r\n                    <Column caption=\"Edit Delete\" alignment=\"center\" width={110} cellRender={this.actionRender}>\r\n                    </Column>\r\n                    <Column className=\"color-red\" dataField=\"workDate\" groupIndex={0} groupCellRender={this.groupRender} />\r\n                  </DataGrid>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* content end*/}\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <LoadPanel\r\n        shadingColor=\"rgba(0,0,0,0.4)\"\r\n        position={position}\r\n        visible={this.state.loadPanelVisible}\r\n      />\r\n\r\n      {/* POPUP */}\r\n      <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg}\r\n        clearActive={() => {\r\n          this.setState({ isPopupError: false })\r\n          this.setState({ isPopupSuccess: false })\r\n        }} />\r\n\r\n      <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n        onClose={() => { this.setState({ isOpen: false }) }}\r\n        clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n        confirmActive={(e) => {\r\n          if (this.state.isDelete) {\r\n            this.onDeleteData(e);\r\n          } else {\r\n            this.onUpdateData(e);\r\n          }\r\n        }}\r\n      />\r\n\r\n      <Modal centered\r\n        footer={null}\r\n        header={null}\r\n        visible={this.state.popupEditVisable}\r\n        width={1200}\r\n        closable={false}\r\n        onOk={() => {\r\n          this.setState({ popupEditVisable: false })\r\n        }}\r\n      >\r\n        {this.state.popupEditVisable ?\r\n          <div className=\"box-title-search\" style={{ paddingBottom: 0 }}>\r\n            <p className=\"font-size-search\"> Update Work </p>\r\n\r\n            <div className=\"box-content\" style={{ marginBottom: 0 }}>\r\n\r\n              <div style={{ textAlign: \"right\" }}>\r\n                <p className=\"title-field\">\r\n                  <span style={{ color: \"red\" }}> * </span> Items marked with an asterisk are required\r\n                                            </p>\r\n              </div> </div>\r\n\r\n\r\n            <div className=\"box-action-content\">\r\n\r\n              {/* Date */}\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"Date\" >\r\n                        Date : <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n\r\n                    </div>\r\n                    <div className={`col-10`} style={{ textAlign: 'start', padding: 0 }}>\r\n                    <DateBox value={null} type=\"date\" value={this.state.updateData.workDate}\r\n                                                        displayFormat=\"dd/MM/yyyy\"\r\n                                                        type=\"date\" onValueChanged={(e) => {\r\n                                                            this.handleChangeDate(e)\r\n                                                        }}\r\n                                                        className={`${this.state.isValid_workDate && this.state.isSubmit ? 'has-error-input' : ''}`} />\r\n                                                    {this.state.isValid_workDate && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDate}</span> : null}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n              </div>\r\n\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"ddlProjectName\" >\r\n                        Project Name <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n                      <div className={`form-control div-select ${this.state.isValid_projectName && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                        <Select\r\n                          showSearch\r\n                          style={{ width: 200 }}\r\n                          placeholder=\"Please selete project\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={(e) => {\r\n                            this.handleChangeProject(e);\r\n                          }}\r\n                          filterOption={(input, option) =>\r\n                            option.props.children[1].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                          value={this.state.updateData.projectName}>\r\n                          {this.projectList}\r\n                        </Select>\r\n                      </div>\r\n                      {this.state.isValid_projectName && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validProjectName}</span> : null}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Job Type */}\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"ddlJobType\" >\r\n                        Job Type <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n                      <div className={`form-control div-select ${this.state.isValid_jobType && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                        <Select\r\n                          showSearch\r\n                          style={{ width: 200 }}\r\n                          placeholder=\"Please selete Type\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={(e) => {\r\n                            this.handleChangeType(e);\r\n                          }}\r\n                          filterOption={(input, option) =>\r\n                            option.props.children[1]\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                          value={this.state.updateData.typeName} \r\n                        >\r\n                          {this.typeList}\r\n                        </Select>\r\n                      </div>\r\n                      {this.state.isValid_jobType && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validJobType}</span> : null}\r\n\r\n                    </div>\r\n                  </div> \r\n                </div>\r\n                </div>\r\n\r\n              {/* Time in */}\r\n              <div className=\"row form-group\" >\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"ddlTimeIn\" >\r\n                        Time in <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                      <TimePicker\r\n                        showNow={true}\r\n                        className=\"font-12pt\"\r\n                        style={{ fontSize: \"12pt\" }}\r\n                        use12Hours\r\n                        placeholder=\"Select time in\"\r\n                        format={format}\r\n                        value={this.state.updateData.workTimeIn}\r\n                        showNow={true}\r\n                        onChange={(time, timestring) => {\r\n                          this.onChangeTimeIn(time, timestring);\r\n                        }}\r\n                        className={`${this.state.isValid_timeIn || this.state.greaterTimeIn ? 'has-error-input' : ''}`} />\r\n                      {this.state.isValid_timeIn && !this.state.greaterTimeIn ? <span className=\"color-red\">{msgValid.work.validTimeIn}</span> : null}\r\n                      {this.state.greaterTimeIn && !this.state.isValid_timeIn ? <span className=\"color-red\">{msgValid.work.validTimeInmoreTimeOut}</span> : null}\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Time out */}\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"ddlTimeOut\" >\r\n                        Time out <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                      <TimePicker\r\n                        showNow={true}\r\n                        className=\"font-12pt\"\r\n                        style={{ fontSize: \"12pt\" }}\r\n                        use12Hours\r\n                        placeholder=\"Select Time out\"\r\n                        format={format}\r\n                        value={this.state.updateData.workTimeOut}\r\n                        showNow={true}\r\n                        onChange={(time, timestring) => {\r\n                          this.onChangeTimeOut(time, timestring);\r\n                        }}\r\n                        className={`${this.state.isValid_timeOut || this.state.greaterTimeOut ? 'has-error-input' : ''}`} />\r\n                      {this.state.isValid_timeOut && !this.state.greaterTimeOut ? <span className=\"color-red\">{msgValid.work.validTimeOut}</span> : null}\r\n                      {this.state.greaterTimeOut && !this.state.isValid_timeOut ? <span className=\"color-red\">{msgValid.work.validTimeOutlessTimeIn}</span> : null}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Man hours */}\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"txtManHours\" >\r\n                        Man hours <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-6\" style={{ textAlign: 'start', padding: 0 }}>\r\n                      <input type=\"text\" className={`form-control ${this.state.isValid_manHours && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                        id=\"txtManHours\" value={this.state.updateData.workManhour} onChange={(event) => { this.onWorkManHoursChange(event) }} />\r\n                      {this.state.isValid_manHours && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validManHours}</span> : null}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                      <button class=\"btn-custom btn-calculate\" onClick={this.calManHours} >\r\n                        Calculate\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Url */}\r\n              {/* <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"txtUrl\">\r\n                        Url\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                      <input type=\"text\" class=\"form-control\" id=\"txtUrl\" value={this.state.updateData.workUrl} onChange={(event) => { this.onWorkUrlChange(event) }} />\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n\r\n\r\n              {/* Detail */}\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\" title-field\" for=\"txtDetail\" >\r\n                        Detail <span style={{ color: \"red\" }}> * </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n                      <textarea rows=\"3\" type=\"text\" id=\"txtDetail\"\r\n                        className={`form-control ${this.state.isValid_detail && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                        value={this.state.updateData.workDetail} onChange={(event) => { this.onWorkDetailChange(event) }}\r\n                      />\r\n                      {this.state.isValid_detail && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDetail}</span> : null}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n              {/* Plan */}\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"LinkPlan\" >\r\n                        Link Plan\r\n                                                                        </label>\r\n                    </div>\r\n                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n\r\n                      <input type=\"text\" class=\"form-control\" id=\"txtLinkPlan\" value={this.state.updateData.workPlan} onChange={(event) => { this.onWorkPlanChange(event) }} />\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Ref */}\r\n              <div className=\"row form-group\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                      <label className=\"title-field\" for=\"Ref\" >\r\n                        Ref\r\n                                                                        </label>\r\n                    </div>\r\n                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n\r\n                      <input type=\"text\" class=\"form-control\" id=\"txtRef\" value={this.state.updateData.workRef} onChange={(event) => { this.onWorkRefChange(event) }} />\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"row form-group\" style={{ margin: 0 }}>\r\n              <div className=\"col-12\" style={{ textAlign: \"right\", padding: 20 }}>\r\n                <button\r\n                  class=\"btn-custom btn-reset\"\r\n                  style={{ marginRight: 20 }}\r\n                  onClick={() => {\r\n                    this.setState({ popupEditVisable: false })\r\n                  }}\r\n                >\r\n                  CANCEL\r\n                </button>\r\n                <button\r\n                  class=\"btn-custom btn-search\"\r\n                  style={{ marginRight: 0 }}\r\n                  onClick={() => {\r\n                    this.setState({ isSubmit: true })\r\n                    this.checkValidData()\r\n\r\n                  }}\r\n\r\n                >\r\n                  UPDATE\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          : null}\r\n\r\n      </Modal>\r\n    </>);\r\n  }\r\n}\r\n\r\n\r\nexport default Work;\r\n","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\config.js",[],"C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js",["361","362","363","364","365","366","367","368","369","370"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport moment from 'moment';\r\nconst IconExitRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"window-close\" class=\"svg-inline--fa fa-window-close fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm0 394c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h404c3.3 0 6 2.7 6 6v340zM356.5 194.6L295.1 256l61.4 61.4c4.6 4.6 4.6 12.1 0 16.8l-22.3 22.3c-4.6 4.6-12.1 4.6-16.8 0L256 295.1l-61.4 61.4c-4.6 4.6-12.1 4.6-16.8 0l-22.3-22.3c-4.6-4.6-4.6-12.1 0-16.8l61.4-61.4-61.4-61.4c-4.6-4.6-4.6-12.1 0-16.8l22.3-22.3c4.6-4.6 12.1-4.6 16.8 0l61.4 61.4 61.4-61.4c4.6-4.6 12.1-4.6 16.8 0l22.3 22.3c4.7 4.6 4.7 12.1 0 16.8z\"></path></svg>\r\nconst IconSaveRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"save\" class=\"svg-inline--fa fa-save fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM272 80v80H144V80h128zm122 352H54a6 6 0 0 1-6-6V86a6 6 0 0 1 6-6h42v104c0 13.255 10.745 24 24 24h176c13.255 0 24-10.745 24-24V83.882l78.243 78.243a6 6 0 0 1 1.757 4.243V426a6 6 0 0 1-6 6zM224 232c-48.523 0-88 39.477-88 88s39.477 88 88 88 88-39.477 88-88-39.477-88-88-88zm0 128c-22.056 0-40-17.944-40-40s17.944-40 40-40 40 17.944 40 40-17.944 40-40 40z\"></path></svg>\r\nconst IconWarning = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"exclamation-triangle\" class=\"svg-inline--fa fa-exclamation-triangle fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"></path></svg>\r\nconst IconCheckRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"check-square\" class=\"svg-inline--fa fa-check-square fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm0 400H48V80h352v352zm-35.864-241.724L191.547 361.48c-4.705 4.667-12.303 4.637-16.97-.068l-90.781-91.516c-4.667-4.705-4.637-12.303.069-16.971l22.719-22.536c4.705-4.667 12.303-4.637 16.97.069l59.792 60.277 141.352-140.216c4.705-4.667 12.303-4.637 16.97.068l22.536 22.718c4.667 4.706 4.637 12.304-.068 16.971z\"></path></svg>\r\nconst IconTrash = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"trash-alt\" class=\"svg-inline--fa fa-trash-alt fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\"></path></svg>\r\n\r\nconst ConfirmPopup = (props) => {\r\n    console.log(`auto boost: ConfirmPopup -> props`, props)\r\n    const isOpen = (props.open);\r\n    const isPopupType = (props.type);\r\n    const isDel = (props.del);\r\n\r\n    const setIsOpen = () => {\r\n        props.onClose()\r\n    }\r\n    const confirmActive = () => {\r\n        props.confirmActive(props.data)\r\n    }\r\n    return (<>\r\n\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isOpen}\r\n            width={650}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsOpen(false)\r\n            }}\r\n        >\r\n            {isPopupType === 'save' ?\r\n                <div>\r\n                    <div style={{ textAlign: 'center' , margin: 40}}>\r\n                        <p className=\"popup-title save\" style={{ color: '#38B000' }}> Confirm </p>\r\n                        <p className=\"popup-sub-title\"> {props.text}</p>\r\n                        <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6\" style={{textAlign:'end'}}>\r\n                                    <button className=\"btn-custom btn-reset\" htmlType=\"submit\" onClick={() => { props.clearActive() }} >\r\n                                        No\r\n                            </button>\r\n                                </div>\r\n                                <div className=\"col-6\" style={{textAlign:'start'}}>\r\n                                    <button className=\"btn-custom success\" style={{ background: '#38B000' }} onClick={() => {\r\n                                        confirmActive()\r\n                                    }}>\r\n                                        Yes\r\n                            </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                : <div>\r\n                <div style={{ textAlign: 'center' , margin: 40}}>\r\n                    <p className=\"popup-title del\" style={{ color: 'red' }}> Confirm </p>\r\n                    <p className=\"popup-sub-title\"> {props.text}</p>\r\n                    <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:'end'}}>\r\n                                <Button className=\"btn-custom  btn-reset\"  onClick={() => { props.clearActive() }} >\r\n                                    No\r\n                        </Button>\r\n                            </div>\r\n                            <div className=\"col-6\" style={{textAlign:'start'}}>\r\n                                <Button htmlType=\"submit\" className=\"btn-custom error\" style={{ background: 'red' }} onClick={() => {\r\n                                    confirmActive()\r\n                                }}>\r\n                                    Yes\r\n                        </Button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            }\r\n        </Modal>\r\n    </>)\r\n\r\n}\r\nexport default ConfirmPopup;","C:\\Users\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js",["371","372","373","374","375","376","377","378","379","380","381","382"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, List, Avatar, Row, Col, Tooltip, Form, TimePicker, Modal, Pagination, Select } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport moment from 'moment';\r\nimport { BsExclamationTriangle } from \"react-icons/bs\";\r\n\r\n\r\nconst IconCorrect = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"check\" class=\"svg-inline--fa fa-check fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"></path></svg>\r\nconst IconInCorrect = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"times\" class=\"svg-inline--fa fa-times fa-w-11\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\"><path fill=\"currentColor\" d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path></svg>\r\nconst AlertPopUp = (props) => {\r\n    console.log(\"AlertPopUp -> props\", props)\r\n    const isPopupSuccess = (props.successStatus);\r\n    const isPopupError = (props.errorStatus);\r\n    const isPopupLoading = (props.loadingStatus);\r\n    const msg = (props.message);\r\n    useEffect(() => {\r\n        // getProductItem()\r\n    }, []);\r\n    const setIsPopupError = () => {\r\n        props.onOk()\r\n    }\r\n    const setIsPopupSuccess = () => {\r\n        props.onOk()\r\n    }\r\n\r\n    const setIsPopupLoading = () => {\r\n        props.onOk()\r\n    }\r\n\r\n    return (<>\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupError}\r\n            width={650}\r\n            onOk={() => {\r\n                setIsPopupError(false);\r\n            }}\r\n            closable={false}>\r\n\r\n            {isPopupError ? <>\r\n                <span className=\"popup-icon-error\" style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                    <IconInCorrect style={{ width: '70px', color: '#fff', top: 12, position: 'relative' }} />\r\n                </span>\r\n                <div style={{ textAlign: 'center', bottom: 50, position: 'relative' }}>\r\n                    <p className=\"popup-title\"> System Error </p>\r\n                    <p className=\"popup-sub-title\"> {msg ? msg : ''} </p>\r\n                    <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                        <Button style={{background: 'red'}} className=\"btn-popup-custom error\" onClick={() => { props.clearActive() }} >OK</Button>\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupSuccess}\r\n            width={650}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsPopupSuccess(false)\r\n            }}>\r\n\r\n            {isPopupSuccess ? <>\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <span className=\"popup-icon-success\" style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                        <IconCorrect style={{ width: '75px', color: '#fff', top: 20, position: 'relative' }} />\r\n                    </span>\r\n                    <div style={{ textAlign: 'center', bottom: 50, position: 'relative' }}>\r\n                        <p className=\"popup-title\"> Success </p>\r\n                        <p className=\"popup-sub-title\"> {msg ? msg : ''} </p>\r\n                        <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                            <Button className=\"btn-popup-custom success\" onClick={() => { props.clearActive() }} >OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupLoading}\r\n            width={500}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsPopupLoading(false)\r\n            }}\r\n        >\r\n\r\n            {isPopupLoading ? <>\r\n                <div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <div style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                            {isPopupLoading ? <BsExclamationTriangle style={{ color: 'rgb(226 189 82)', fontSize: '75px' }} /> : null}\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <p style={{ fontSize: 17, marginTop: 15, marginBottom: 15 }}>\r\n                                {msg ? <span dangerouslySetInnerHTML={{ __html: msg }}></span> : ''} </p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n    </>)\r\n};\r\n\r\nexport default AlertPopUp;\r\n",["383","384"],{"ruleId":"385","severity":1,"message":"386","line":2,"column":8,"nodeType":"387","messageId":"388","endLine":2,"endColumn":11},{"ruleId":"385","severity":1,"message":"389","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":14},{"ruleId":"385","severity":1,"message":"390","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":12},{"ruleId":"385","severity":1,"message":"391","line":6,"column":10,"nodeType":"387","messageId":"388","endLine":6,"endColumn":17},{"ruleId":"392","severity":1,"message":"393","line":14,"column":1,"nodeType":"394","endLine":28,"endColumn":2},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"398","line":6,"column":8,"nodeType":"387","messageId":"388","endLine":6,"endColumn":15},{"ruleId":"385","severity":1,"message":"399","line":8,"column":22,"nodeType":"387","messageId":"388","endLine":8,"endColumn":32},{"ruleId":"385","severity":1,"message":"400","line":8,"column":34,"nodeType":"387","messageId":"388","endLine":8,"endColumn":40},{"ruleId":"385","severity":1,"message":"401","line":9,"column":24,"nodeType":"387","messageId":"388","endLine":9,"endColumn":36},{"ruleId":"385","severity":1,"message":"402","line":10,"column":8,"nodeType":"387","messageId":"388","endLine":10,"endColumn":14},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"402","line":10,"column":8,"nodeType":"387","messageId":"388","endLine":10,"endColumn":14},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"406","line":20,"column":5,"nodeType":"387","messageId":"388","endLine":20,"endColumn":9},{"ruleId":"385","severity":1,"message":"407","line":31,"column":5,"nodeType":"387","messageId":"388","endLine":31,"endColumn":16},{"ruleId":"385","severity":1,"message":"408","line":32,"column":5,"nodeType":"387","messageId":"388","endLine":32,"endColumn":13},{"ruleId":"385","severity":1,"message":"409","line":33,"column":5,"nodeType":"387","messageId":"388","endLine":33,"endColumn":14},{"ruleId":"385","severity":1,"message":"410","line":34,"column":5,"nodeType":"387","messageId":"388","endLine":34,"endColumn":12},{"ruleId":"385","severity":1,"message":"411","line":189,"column":17,"nodeType":"387","messageId":"388","endLine":189,"endColumn":19},{"ruleId":"412","severity":1,"message":"413","line":381,"column":227,"nodeType":"414","endLine":381,"endColumn":241},{"ruleId":"412","severity":1,"message":"413","line":392,"column":229,"nodeType":"414","endLine":392,"endColumn":243},{"ruleId":"415","replacedBy":"416"},{"ruleId":"417","replacedBy":"418"},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"399","line":8,"column":22,"nodeType":"387","messageId":"388","endLine":8,"endColumn":32},{"ruleId":"385","severity":1,"message":"401","line":9,"column":24,"nodeType":"387","messageId":"388","endLine":9,"endColumn":36},{"ruleId":"385","severity":1,"message":"402","line":10,"column":8,"nodeType":"387","messageId":"388","endLine":10,"endColumn":14},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"419","line":17,"column":7,"nodeType":"387","messageId":"388","endLine":17,"endColumn":13},{"ruleId":"385","severity":1,"message":"406","line":20,"column":5,"nodeType":"387","messageId":"388","endLine":20,"endColumn":9},{"ruleId":"385","severity":1,"message":"407","line":31,"column":5,"nodeType":"387","messageId":"388","endLine":31,"endColumn":16},{"ruleId":"385","severity":1,"message":"408","line":32,"column":5,"nodeType":"387","messageId":"388","endLine":32,"endColumn":13},{"ruleId":"385","severity":1,"message":"409","line":33,"column":5,"nodeType":"387","messageId":"388","endLine":33,"endColumn":14},{"ruleId":"385","severity":1,"message":"410","line":34,"column":5,"nodeType":"387","messageId":"388","endLine":34,"endColumn":12},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"403","line":7,"column":27,"nodeType":"387","messageId":"388","endLine":7,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":7,"column":35,"nodeType":"387","messageId":"388","endLine":7,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":7,"column":43,"nodeType":"387","messageId":"388","endLine":7,"endColumn":48},{"ruleId":"385","severity":1,"message":"420","line":8,"column":24,"nodeType":"387","messageId":"388","endLine":8,"endColumn":35},{"ruleId":"385","severity":1,"message":"397","line":21,"column":3,"nodeType":"387","messageId":"388","endLine":21,"endColumn":9},{"ruleId":"421","severity":1,"message":"422","line":30,"column":1,"nodeType":"423","messageId":"424","endLine":30,"endColumn":578},{"ruleId":"385","severity":1,"message":"425","line":32,"column":7,"nodeType":"387","messageId":"388","endLine":32,"endColumn":16},{"ruleId":"385","severity":1,"message":"426","line":43,"column":5,"nodeType":"387","messageId":"388","endLine":43,"endColumn":6},{"ruleId":"385","severity":1,"message":"427","line":45,"column":7,"nodeType":"387","messageId":"388","endLine":45,"endColumn":20},{"ruleId":"385","severity":1,"message":"428","line":50,"column":7,"nodeType":"387","messageId":"388","endLine":50,"endColumn":19},{"ruleId":"429","severity":1,"message":"430","line":275,"column":27,"nodeType":"431","messageId":"432","endLine":275,"endColumn":28},{"ruleId":"433","severity":1,"message":"434","line":278,"column":9,"nodeType":"435","endLine":281,"endColumn":12},{"ruleId":"436","severity":1,"message":"437","line":323,"column":62,"nodeType":"431","messageId":"438","endLine":323,"endColumn":64},{"ruleId":"436","severity":1,"message":"437","line":324,"column":92,"nodeType":"431","messageId":"438","endLine":324,"endColumn":94},{"ruleId":"436","severity":1,"message":"437","line":338,"column":86,"nodeType":"431","messageId":"438","endLine":338,"endColumn":88},{"ruleId":"412","severity":1,"message":"413","line":365,"column":45,"nodeType":"414","endLine":365,"endColumn":56},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"403","line":3,"column":27,"nodeType":"387","messageId":"388","endLine":3,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":3,"column":35,"nodeType":"387","messageId":"388","endLine":3,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":3,"column":43,"nodeType":"387","messageId":"388","endLine":3,"endColumn":48},{"ruleId":"385","severity":1,"message":"420","line":7,"column":24,"nodeType":"387","messageId":"388","endLine":7,"endColumn":35},{"ruleId":"385","severity":1,"message":"425","line":16,"column":7,"nodeType":"387","messageId":"388","endLine":16,"endColumn":16},{"ruleId":"385","severity":1,"message":"427","line":27,"column":7,"nodeType":"387","messageId":"388","endLine":27,"endColumn":20},{"ruleId":"385","severity":1,"message":"428","line":32,"column":7,"nodeType":"387","messageId":"388","endLine":32,"endColumn":19},{"ruleId":"433","severity":1,"message":"434","line":216,"column":16,"nodeType":"435","endLine":220,"endColumn":12},{"ruleId":"429","severity":1,"message":"430","line":225,"column":40,"nodeType":"431","messageId":"432","endLine":225,"endColumn":41},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"439","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":28},{"ruleId":"385","severity":1,"message":"440","line":4,"column":10,"nodeType":"387","messageId":"388","endLine":4,"endColumn":25},{"ruleId":"385","severity":1,"message":"441","line":5,"column":10,"nodeType":"387","messageId":"388","endLine":5,"endColumn":25},{"ruleId":"385","severity":1,"message":"442","line":6,"column":10,"nodeType":"387","messageId":"388","endLine":6,"endColumn":31},{"ruleId":"385","severity":1,"message":"443","line":7,"column":10,"nodeType":"387","messageId":"388","endLine":7,"endColumn":27},{"ruleId":"385","severity":1,"message":"396","line":8,"column":10,"nodeType":"387","messageId":"388","endLine":8,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":8,"column":17,"nodeType":"387","messageId":"388","endLine":8,"endColumn":23},{"ruleId":"385","severity":1,"message":"398","line":11,"column":8,"nodeType":"387","messageId":"388","endLine":11,"endColumn":15},{"ruleId":"385","severity":1,"message":"403","line":13,"column":27,"nodeType":"387","messageId":"388","endLine":13,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":13,"column":35,"nodeType":"387","messageId":"388","endLine":13,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":13,"column":43,"nodeType":"387","messageId":"388","endLine":13,"endColumn":48},{"ruleId":"385","severity":1,"message":"425","line":27,"column":7,"nodeType":"387","messageId":"388","endLine":27,"endColumn":16},{"ruleId":"385","severity":1,"message":"427","line":38,"column":7,"nodeType":"387","messageId":"388","endLine":38,"endColumn":20},{"ruleId":"385","severity":1,"message":"428","line":43,"column":7,"nodeType":"387","messageId":"388","endLine":43,"endColumn":19},{"ruleId":"433","severity":1,"message":"434","line":241,"column":12,"nodeType":"435","endLine":244,"endColumn":8},{"ruleId":"429","severity":1,"message":"430","line":248,"column":33,"nodeType":"431","messageId":"432","endLine":248,"endColumn":34},{"ruleId":"429","severity":1,"message":"430","line":253,"column":33,"nodeType":"431","messageId":"432","endLine":253,"endColumn":34},{"ruleId":"392","severity":1,"message":"393","line":3,"column":1,"nodeType":"394","endLine":13,"endColumn":2},{"ruleId":"385","severity":1,"message":"444","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"445","line":1,"column":28,"nodeType":"387","messageId":"388","endLine":1,"endColumn":36},{"ruleId":"385","severity":1,"message":"446","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":9},{"ruleId":"385","severity":1,"message":"402","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":14},{"ruleId":"385","severity":1,"message":"447","line":5,"column":7,"nodeType":"387","messageId":"388","endLine":5,"endColumn":22},{"ruleId":"385","severity":1,"message":"448","line":6,"column":7,"nodeType":"387","messageId":"388","endLine":6,"endColumn":22},{"ruleId":"385","severity":1,"message":"449","line":7,"column":7,"nodeType":"387","messageId":"388","endLine":7,"endColumn":18},{"ruleId":"385","severity":1,"message":"450","line":8,"column":7,"nodeType":"387","messageId":"388","endLine":8,"endColumn":23},{"ruleId":"385","severity":1,"message":"451","line":9,"column":7,"nodeType":"387","messageId":"388","endLine":9,"endColumn":16},{"ruleId":"385","severity":1,"message":"452","line":15,"column":11,"nodeType":"387","messageId":"388","endLine":15,"endColumn":16},{"ruleId":"385","severity":1,"message":"445","line":1,"column":28,"nodeType":"387","messageId":"388","endLine":1,"endColumn":36},{"ruleId":"385","severity":1,"message":"453","line":2,"column":18,"nodeType":"387","messageId":"388","endLine":2,"endColumn":22},{"ruleId":"385","severity":1,"message":"454","line":2,"column":24,"nodeType":"387","messageId":"388","endLine":2,"endColumn":30},{"ruleId":"385","severity":1,"message":"455","line":2,"column":32,"nodeType":"387","messageId":"388","endLine":2,"endColumn":35},{"ruleId":"385","severity":1,"message":"456","line":2,"column":37,"nodeType":"387","messageId":"388","endLine":2,"endColumn":40},{"ruleId":"385","severity":1,"message":"457","line":2,"column":42,"nodeType":"387","messageId":"388","endLine":2,"endColumn":49},{"ruleId":"385","severity":1,"message":"390","line":2,"column":51,"nodeType":"387","messageId":"388","endLine":2,"endColumn":55},{"ruleId":"385","severity":1,"message":"399","line":2,"column":57,"nodeType":"387","messageId":"388","endLine":2,"endColumn":67},{"ruleId":"385","severity":1,"message":"458","line":2,"column":76,"nodeType":"387","messageId":"388","endLine":2,"endColumn":86},{"ruleId":"385","severity":1,"message":"400","line":2,"column":88,"nodeType":"387","messageId":"388","endLine":2,"endColumn":94},{"ruleId":"385","severity":1,"message":"446","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":9},{"ruleId":"385","severity":1,"message":"402","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":14},{"ruleId":"415","replacedBy":"459"},{"ruleId":"417","replacedBy":"460"},{"ruleId":"385","severity":1,"message":"386","line":2,"column":8,"nodeType":"387","messageId":"388","endLine":2,"endColumn":11},{"ruleId":"385","severity":1,"message":"389","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":14},{"ruleId":"385","severity":1,"message":"390","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":12},{"ruleId":"385","severity":1,"message":"391","line":6,"column":10,"nodeType":"387","messageId":"388","endLine":6,"endColumn":17},{"ruleId":"385","severity":1,"message":"461","line":10,"column":10,"nodeType":"387","messageId":"388","endLine":10,"endColumn":39},{"ruleId":"385","severity":1,"message":"462","line":11,"column":10,"nodeType":"387","messageId":"388","endLine":11,"endColumn":27},{"ruleId":"392","severity":1,"message":"393","line":14,"column":1,"nodeType":"394","endLine":28,"endColumn":2},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"398","line":6,"column":8,"nodeType":"387","messageId":"388","endLine":6,"endColumn":15},{"ruleId":"385","severity":1,"message":"399","line":8,"column":22,"nodeType":"387","messageId":"388","endLine":8,"endColumn":32},{"ruleId":"385","severity":1,"message":"400","line":8,"column":34,"nodeType":"387","messageId":"388","endLine":8,"endColumn":40},{"ruleId":"385","severity":1,"message":"401","line":9,"column":24,"nodeType":"387","messageId":"388","endLine":9,"endColumn":36},{"ruleId":"385","severity":1,"message":"402","line":10,"column":8,"nodeType":"387","messageId":"388","endLine":10,"endColumn":14},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"463","line":11,"column":56,"nodeType":"387","messageId":"388","endLine":11,"endColumn":64},{"ruleId":"385","severity":1,"message":"464","line":154,"column":17,"nodeType":"387","messageId":"388","endLine":154,"endColumn":23},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"399","line":8,"column":22,"nodeType":"387","messageId":"388","endLine":8,"endColumn":32},{"ruleId":"385","severity":1,"message":"401","line":9,"column":24,"nodeType":"387","messageId":"388","endLine":9,"endColumn":36},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"419","line":22,"column":7,"nodeType":"387","messageId":"388","endLine":22,"endColumn":13},{"ruleId":"385","severity":1,"message":"465","line":23,"column":7,"nodeType":"387","messageId":"388","endLine":23,"endColumn":13},{"ruleId":"385","severity":1,"message":"466","line":92,"column":13,"nodeType":"387","messageId":"388","endLine":92,"endColumn":17},{"ruleId":"467","severity":1,"message":"468","line":321,"column":25,"nodeType":"469","messageId":"470","endLine":321,"endColumn":26,"suggestions":"471"},{"ruleId":"385","severity":1,"message":"464","line":382,"column":17,"nodeType":"387","messageId":"388","endLine":382,"endColumn":23},{"ruleId":"472","severity":1,"message":"473","line":474,"column":96,"nodeType":"474","messageId":"475","endLine":474,"endColumn":98},{"ruleId":"472","severity":1,"message":"473","line":474,"column":119,"nodeType":"474","messageId":"475","endLine":474,"endColumn":121},{"ruleId":"472","severity":1,"message":"473","line":493,"column":94,"nodeType":"474","messageId":"475","endLine":493,"endColumn":96},{"ruleId":"472","severity":1,"message":"473","line":493,"column":117,"nodeType":"474","messageId":"475","endLine":493,"endColumn":119},{"ruleId":"472","severity":1,"message":"476","line":495,"column":77,"nodeType":"474","messageId":"475","endLine":495,"endColumn":79},{"ruleId":"472","severity":1,"message":"476","line":495,"column":135,"nodeType":"474","messageId":"475","endLine":495,"endColumn":137},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"396","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":3,"column":17,"nodeType":"387","messageId":"388","endLine":3,"endColumn":23},{"ruleId":"385","severity":1,"message":"403","line":11,"column":27,"nodeType":"387","messageId":"388","endLine":11,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":11,"column":35,"nodeType":"387","messageId":"388","endLine":11,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":11,"column":43,"nodeType":"387","messageId":"388","endLine":11,"endColumn":48},{"ruleId":"385","severity":1,"message":"477","line":16,"column":10,"nodeType":"387","messageId":"388","endLine":16,"endColumn":19},{"ruleId":"385","severity":1,"message":"478","line":23,"column":7,"nodeType":"387","messageId":"388","endLine":23,"endColumn":15},{"ruleId":"467","severity":1,"message":"479","line":98,"column":54,"nodeType":"469","messageId":"470","endLine":98,"endColumn":55,"suggestions":"480"},{"ruleId":"481","severity":1,"message":"482","line":564,"column":21,"nodeType":"387","messageId":"483","endLine":564,"endColumn":26},{"ruleId":"481","severity":1,"message":"484","line":565,"column":21,"nodeType":"387","messageId":"483","endLine":565,"endColumn":24},{"ruleId":"385","severity":1,"message":"485","line":673,"column":21,"nodeType":"387","messageId":"388","endLine":673,"endColumn":28},{"ruleId":"467","severity":1,"message":"479","line":676,"column":88,"nodeType":"469","messageId":"470","endLine":676,"endColumn":89,"suggestions":"486"},{"ruleId":"412","severity":1,"message":"413","line":742,"column":87,"nodeType":"414","endLine":742,"endColumn":114},{"ruleId":"412","severity":1,"message":"413","line":744,"column":57,"nodeType":"414","endLine":744,"endColumn":68},{"ruleId":"412","severity":1,"message":"413","line":863,"column":77,"nodeType":"414","endLine":863,"endColumn":91},{"ruleId":"412","severity":1,"message":"413","line":872,"column":77,"nodeType":"414","endLine":872,"endColumn":178},{"ruleId":"412","severity":1,"message":"413","line":900,"column":77,"nodeType":"414","endLine":900,"endColumn":91},{"ruleId":"412","severity":1,"message":"413","line":908,"column":77,"nodeType":"414","endLine":908,"endColumn":180},{"ruleId":"392","severity":1,"message":"393","line":3,"column":1,"nodeType":"394","endLine":13,"endColumn":2},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"403","line":3,"column":27,"nodeType":"387","messageId":"388","endLine":3,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":3,"column":35,"nodeType":"387","messageId":"388","endLine":3,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":3,"column":43,"nodeType":"387","messageId":"388","endLine":3,"endColumn":48},{"ruleId":"385","severity":1,"message":"487","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":18},{"ruleId":"385","severity":1,"message":"446","line":5,"column":8,"nodeType":"387","messageId":"388","endLine":5,"endColumn":9},{"ruleId":"385","severity":1,"message":"420","line":9,"column":5,"nodeType":"387","messageId":"388","endLine":9,"endColumn":16},{"ruleId":"433","severity":1,"message":"434","line":124,"column":13,"nodeType":"435","endLine":133,"endColumn":14},{"ruleId":"429","severity":1,"message":"430","line":146,"column":32,"nodeType":"431","messageId":"432","endLine":146,"endColumn":33},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"439","line":3,"column":10,"nodeType":"387","messageId":"388","endLine":3,"endColumn":28},{"ruleId":"385","severity":1,"message":"440","line":4,"column":10,"nodeType":"387","messageId":"388","endLine":4,"endColumn":25},{"ruleId":"385","severity":1,"message":"441","line":5,"column":10,"nodeType":"387","messageId":"388","endLine":5,"endColumn":25},{"ruleId":"385","severity":1,"message":"442","line":6,"column":10,"nodeType":"387","messageId":"388","endLine":6,"endColumn":31},{"ruleId":"385","severity":1,"message":"443","line":7,"column":10,"nodeType":"387","messageId":"388","endLine":7,"endColumn":27},{"ruleId":"385","severity":1,"message":"396","line":8,"column":10,"nodeType":"387","messageId":"388","endLine":8,"endColumn":15},{"ruleId":"385","severity":1,"message":"397","line":8,"column":17,"nodeType":"387","messageId":"388","endLine":8,"endColumn":23},{"ruleId":"385","severity":1,"message":"398","line":11,"column":8,"nodeType":"387","messageId":"388","endLine":11,"endColumn":15},{"ruleId":"385","severity":1,"message":"403","line":13,"column":27,"nodeType":"387","messageId":"388","endLine":13,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":13,"column":35,"nodeType":"387","messageId":"388","endLine":13,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":13,"column":43,"nodeType":"387","messageId":"388","endLine":13,"endColumn":48},{"ruleId":"385","severity":1,"message":"487","line":14,"column":8,"nodeType":"387","messageId":"388","endLine":14,"endColumn":18},{"ruleId":"385","severity":1,"message":"446","line":15,"column":8,"nodeType":"387","messageId":"388","endLine":15,"endColumn":9},{"ruleId":"433","severity":1,"message":"434","line":187,"column":13,"nodeType":"435","endLine":196,"endColumn":14},{"ruleId":"429","severity":1,"message":"430","line":209,"column":32,"nodeType":"431","messageId":"432","endLine":209,"endColumn":33},{"ruleId":"429","severity":1,"message":"430","line":222,"column":32,"nodeType":"431","messageId":"432","endLine":222,"endColumn":33},{"ruleId":"385","severity":1,"message":"395","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"403","line":7,"column":27,"nodeType":"387","messageId":"388","endLine":7,"endColumn":33},{"ruleId":"385","severity":1,"message":"404","line":7,"column":35,"nodeType":"387","messageId":"388","endLine":7,"endColumn":41},{"ruleId":"385","severity":1,"message":"405","line":7,"column":43,"nodeType":"387","messageId":"388","endLine":7,"endColumn":48},{"ruleId":"385","severity":1,"message":"488","line":296,"column":9,"nodeType":"387","messageId":"388","endLine":296,"endColumn":11},{"ruleId":"429","severity":1,"message":"430","line":313,"column":29,"nodeType":"431","messageId":"432","endLine":313,"endColumn":30},{"ruleId":"429","severity":1,"message":"430","line":320,"column":29,"nodeType":"431","messageId":"432","endLine":320,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":323,"column":11,"nodeType":"435","endLine":332,"endColumn":14},{"ruleId":"433","severity":1,"message":"434","line":453,"column":13,"nodeType":"435","endLine":462,"endColumn":14},{"ruleId":"436","severity":1,"message":"437","line":897,"column":92,"nodeType":"431","messageId":"438","endLine":897,"endColumn":94},{"ruleId":"436","severity":1,"message":"437","line":911,"column":86,"nodeType":"431","messageId":"438","endLine":911,"endColumn":88},{"ruleId":"412","severity":1,"message":"413","line":940,"column":45,"nodeType":"414","endLine":940,"endColumn":56},{"ruleId":"412","severity":1,"message":"413","line":1091,"column":55,"nodeType":"414","endLine":1091,"endColumn":93},{"ruleId":"412","severity":1,"message":"413","line":1093,"column":57,"nodeType":"414","endLine":1093,"endColumn":68},{"ruleId":"412","severity":1,"message":"413","line":1187,"column":25,"nodeType":"414","endLine":1187,"endColumn":39},{"ruleId":"412","severity":1,"message":"413","line":1191,"column":25,"nodeType":"414","endLine":1191,"endColumn":120},{"ruleId":"412","severity":1,"message":"413","line":1216,"column":25,"nodeType":"414","endLine":1216,"endColumn":39},{"ruleId":"412","severity":1,"message":"413","line":1220,"column":25,"nodeType":"414","endLine":1220,"endColumn":122},{"ruleId":"385","severity":1,"message":"444","line":1,"column":17,"nodeType":"387","messageId":"388","endLine":1,"endColumn":26},{"ruleId":"385","severity":1,"message":"445","line":1,"column":28,"nodeType":"387","messageId":"388","endLine":1,"endColumn":36},{"ruleId":"385","severity":1,"message":"446","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":9},{"ruleId":"385","severity":1,"message":"402","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":14},{"ruleId":"385","severity":1,"message":"447","line":5,"column":7,"nodeType":"387","messageId":"388","endLine":5,"endColumn":22},{"ruleId":"385","severity":1,"message":"448","line":6,"column":7,"nodeType":"387","messageId":"388","endLine":6,"endColumn":22},{"ruleId":"385","severity":1,"message":"449","line":7,"column":7,"nodeType":"387","messageId":"388","endLine":7,"endColumn":18},{"ruleId":"385","severity":1,"message":"450","line":8,"column":7,"nodeType":"387","messageId":"388","endLine":8,"endColumn":23},{"ruleId":"385","severity":1,"message":"451","line":9,"column":7,"nodeType":"387","messageId":"388","endLine":9,"endColumn":16},{"ruleId":"385","severity":1,"message":"452","line":15,"column":11,"nodeType":"387","messageId":"388","endLine":15,"endColumn":16},{"ruleId":"385","severity":1,"message":"445","line":1,"column":28,"nodeType":"387","messageId":"388","endLine":1,"endColumn":36},{"ruleId":"385","severity":1,"message":"453","line":2,"column":18,"nodeType":"387","messageId":"388","endLine":2,"endColumn":22},{"ruleId":"385","severity":1,"message":"454","line":2,"column":24,"nodeType":"387","messageId":"388","endLine":2,"endColumn":30},{"ruleId":"385","severity":1,"message":"455","line":2,"column":32,"nodeType":"387","messageId":"388","endLine":2,"endColumn":35},{"ruleId":"385","severity":1,"message":"456","line":2,"column":37,"nodeType":"387","messageId":"388","endLine":2,"endColumn":40},{"ruleId":"385","severity":1,"message":"457","line":2,"column":42,"nodeType":"387","messageId":"388","endLine":2,"endColumn":49},{"ruleId":"385","severity":1,"message":"390","line":2,"column":51,"nodeType":"387","messageId":"388","endLine":2,"endColumn":55},{"ruleId":"385","severity":1,"message":"399","line":2,"column":57,"nodeType":"387","messageId":"388","endLine":2,"endColumn":67},{"ruleId":"385","severity":1,"message":"458","line":2,"column":76,"nodeType":"387","messageId":"388","endLine":2,"endColumn":86},{"ruleId":"385","severity":1,"message":"400","line":2,"column":88,"nodeType":"387","messageId":"388","endLine":2,"endColumn":94},{"ruleId":"385","severity":1,"message":"446","line":3,"column":8,"nodeType":"387","messageId":"388","endLine":3,"endColumn":9},{"ruleId":"385","severity":1,"message":"402","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":14},{"ruleId":"415","replacedBy":"489"},{"ruleId":"417","replacedBy":"490"},"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Form' is defined but never used.","'NavLink' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Component' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'DateBox' is defined but never used.","'TimePicker' is defined but never used.","'Select' is defined but never used.","'PlusOutlined' is defined but never used.","'moment' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'data' is assigned a value but never used.","'projectList' is assigned a value but never used.","'typeList' is assigned a value but never used.","'timeHours' is assigned a value but never used.","'timeMin' is assigned a value but never used.","'mm' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["491"],"no-negated-in-lhs",["492"],"'format' is assigned a value but never used.","'EyeOutlined' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'tasksData' is assigned a value but never used.","'d' is assigned a value but never used.","'employeesData' is assigned a value but never used.","'statusesData' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'BsFillCalendarFill' is defined but never used.","'BsFillTrashFill' is defined but never used.","'FaClipboardList' is defined but never used.","'AiOutlineStepBackward' is defined but never used.","'AiFillStepForward' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'_' is defined but never used.","'IconExitRegular' is assigned a value but never used.","'IconSaveRegular' is assigned a value but never used.","'IconWarning' is assigned a value but never used.","'IconCheckRegular' is assigned a value but never used.","'IconTrash' is assigned a value but never used.","'isDel' is assigned a value but never used.","'List' is defined but never used.","'Avatar' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tooltip' is defined but never used.","'Pagination' is defined but never used.",["491"],["492"],"'AiOutlineFundProjectionScreen' is defined but never used.","'VscGroupByRefType' is defined but never used.","'Redirect' is defined but never used.","'filter' is assigned a value but never used.","'Option' is assigned a value but never used.","'temp' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["493","494"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'LoadPanel' is defined but never used.","'position' is assigned a value but never used.","Unnecessary escape character: \\/.",["495","496"],"no-redeclare","'start' is already defined.","redeclared","'end' is already defined.","'resData' is assigned a value but never used.",["497","498"],"'AspNetData' is defined but never used.","'id' is assigned a value but never used.",["491"],["492"],"no-global-assign","no-unsafe-negation",{"messageId":"499","fix":"500","desc":"501"},{"messageId":"502","fix":"503","desc":"504"},{"messageId":"499","fix":"505","desc":"501"},{"messageId":"502","fix":"506","desc":"504"},{"messageId":"499","fix":"507","desc":"501"},{"messageId":"502","fix":"508","desc":"504"},"removeEscape",{"range":"509","text":"510"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"511","text":"512"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"513","text":"510"},{"range":"514","text":"512"},{"range":"515","text":"510"},{"range":"516","text":"512"},[11468,11469],"",[11468,11468],"\\",[4003,4004],[4003,4003],[26315,26316],[26315,26315]]