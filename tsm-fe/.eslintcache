[{"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\index.js":"1","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js":"2","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\App.js":"3","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js":"4","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js":"5","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js":"6","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js":"7","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js":"8","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js":"9","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js":"10","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js":"11","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js":"12","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\config.js":"13","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js":"14","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js":"15"},{"size":952,"mtime":1611550006694,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1611550006700,"results":"18","hashOfConfig":"17"},{"size":935,"mtime":1611550006689,"results":"19","hashOfConfig":"17"},{"size":4506,"mtime":1611666166031,"results":"20","hashOfConfig":"17"},{"size":1284,"mtime":1611550006701,"results":"21","hashOfConfig":"17"},{"size":10173,"mtime":1611758977264,"results":"22","hashOfConfig":"17"},{"size":50271,"mtime":1611759161816,"results":"23","hashOfConfig":"17"},{"size":26921,"mtime":1611758977265,"results":"24","hashOfConfig":"17"},{"size":32129,"mtime":1611759480681,"results":"25","hashOfConfig":"17"},{"size":17027,"mtime":1611758977381,"results":"26","hashOfConfig":"17"},{"size":17684,"mtime":1611758977340,"results":"27","hashOfConfig":"17"},{"size":548,"mtime":1611550006699,"results":"28","hashOfConfig":"17"},{"size":1163,"mtime":1611758977262,"results":"29","hashOfConfig":"17"},{"size":7216,"mtime":1611671978322,"results":"30","hashOfConfig":"17"},{"size":5802,"mtime":1611758977260,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1brhldy",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"34"},"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\index.js",[],["73","74"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\reportWebVitals.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\App.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\Layout\\Head.js",["75","76","77","78"],"import React, { Component } from 'react';\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { IoPersonCircleOutline } from \"react-icons/io5\";\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { GrWorkshop } from \"react-icons/gr\";\r\nimport { AiOutlineFundProjectionScreen } from \"react-icons/ai\";\r\nimport { VscGroupByRefType } from \"react-icons/vsc\";\r\n\r\nclass Head extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"gx-header-horizontal gx-header-horizontal-dark gx-below-header-horizontal\" style={{position: 'sticky', top: 0, zIndex: 9999}}>\r\n          <header class=\"ant-layout-header gx-header-horizontal-main\">\r\n            <div class=\"gx-container\">\r\n              <div class=\"gx-header-horizontal-main-flex\">\r\n                <div class=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n                  <div class=\"gx-search-bar gx-lt-icon-search-bar-lg\">\r\n                    <div class=\"gx-form-group\">\r\n                      {/* <input class=\"ant-input\" type=\"search\" placeholder=\"Search in app...\" value=\"\" />\r\n                      <span class=\"gx-search-icon gx-pointer\">\r\n                        <i class=\"icon icon-search\"></i>\r\n                      </span> */}\r\n\r\n                      <span style={{ color: '#fff', fontSize: '22pt', fontWeight: 700 }}>SMARTADMIN</span>\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <ul class=\"gx-header-notifications gx-ml-auto\">\r\n                  <li class=\"gx-notify\" style={{fontSize: '20pt'}}>\r\n                  <Link to=\"/work\" >\r\n                    <span class=\"gx-pointer gx-d-block\">\r\n\r\n              {/* Icon */}\r\n                        <span className=\"icon-header\"> <GrWorkshop style={{color: '#fff'}}/>  </span>\r\n                      Work\r\n                    </span>\r\n\r\n                </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\" style={{fontSize: '20pt'}}>\r\n                  <Link to=\"/project\" >\r\n                    <span class=\"gx-pointer gx-status-pos gx-d-block\">\r\n                     \r\n            {/* Icon  Project*/}\r\n            <span className=\"icon-header\"> <AiOutlineFundProjectionScreen/>  </span>\r\n            \r\n                      Project\r\n                    </span>\r\n                    </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\">\r\n                  <Link to=\"/jobtype\" style={{fontSize: '20pt'}}>\r\n                    <span class=\"gx-pointer gx-status-pos gx-d-block\">\r\n\r\n          {/* Icon Job type */}\r\n                    <span className=\"icon-header\"> <VscGroupByRefType/>  </span>\r\n                    \r\n                      Job type\r\n                    </span>\r\n                    </Link>\r\n                  </li>\r\n                  <li class=\"gx-msg\" style={{color: '#fff'}}>\r\n                    <span style={{color: '#fff', fontSize: 36}} class=\"gx-pointer gx-status-pos gx-d-block\">\r\n                    <IoPersonCircleOutline />\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </header>\r\n        </div>\r\n        {/* <Navbar className=\"Navbar-color\" expand=\"lg\" >\r\n          <Navbar.Brand href=\"/\" className=\"Navbar-brand-Style\">SMARTADMIN</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"/work\" style={{ marginLeft: \"600px\" }}>work</Nav.Link>\r\n\r\n              <Nav.Link href=\"/projects\" style={{ marginLeft: \"20px\" }}>project</Nav.Link>\r\n\r\n              <Nav.Link href=\"/jobtype\" style={{ marginLeft: \"20px\" }}>job type</Nav.Link>\r\n            </Nav>\r\n\r\n            <Form inline>\r\n            </Form>\r\n          </Navbar.Collapse>\r\n        </Navbar> */}\r\n\r\n        {/* <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#features\">Features</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n          </Nav>\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-info\">Search</Button>\r\n          </Form>\r\n        </Navbar> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Head;","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\routes\\index.js",["79"],"import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nimport Home from '../pages/home'\r\nimport Project from '../pages/Project'\r\nimport JobType from '../pages/JobType'\r\nimport Work from '../pages/Work'\r\nimport ActionsWork from '../pages/Work/create-edit-view'\r\nimport ActionJobType from '../pages/JobType/create-edit'\r\nimport ActionsProject from '../pages/Project/create-edit'\r\n\r\n\r\n\r\nexport default () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Home} />\r\n    <Route exact path=\"/jobtype\" component={JobType} />\r\n    <Route exact path=\"/project\" component={Project} />\r\n    <Route exact path=\"/work\" component={Work} />\r\n    <Route exact path=\"/work/:query?\" render={(props) => <ActionsWork {...props} /> } />\r\n    <Route exact path=\"/project/:query?\" render={(props) => <ActionsProject {...props} /> } />\r\n    <Route exact path=\"/jobtype/:query?\" render={(props) => <ActionJobType {...props} /> } />\r\n    {/* <Route exact path=\"/work/:action?/:workId?\" render={(props) => <ActionsWork {...props} /> } /> */}\r\n    {/* <Route exact path=\"/jobtype/:action?/:typeId\" render={(props) => <ActionJobType {...props} /> } />\r\n    <Route exact path=\"/project/:action?/:projectId\" render={(props) => <ActionsProject {...props} /> } /> */}\r\n   \r\n  </Switch>\r\n)","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\create-edit.js",["80","81","82","83","84","85","86","87","88","89","90","91"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from 'antd';\r\nimport { HomeOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect  } from 'react-router-dom';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\n\r\nclass ActionJobType extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n    \r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n    \r\n    constructor(props) {\r\n        console.log(\"Actionsjobtype -> constructor -> props\", props)\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query))\r\n        let param = JSON.parse(tempQuery)\r\n        console.log(\"ActionJobType -> constructor -> param\", param)\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false,  // alert error case\r\n            isPopupMsg: '',  // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: '', // msg ของ Popup\r\n            routeStatus: null, // msg ของ Popup\r\n            data: {\r\n                typeName: null,\r\n                typeCode: null,\r\n                typeId: null,\r\n\r\n            },\r\n            projectList: [],\r\n            typeList: [],\r\n            params: param,\r\n            isSubmit: false,\r\n            valid_typeName: false,\r\n            valid_typeCode: false,\r\n        };\r\n\r\n        this.onTypeNameChange = this.onTypeNameChange.bind(this);\r\n        this.onTypeCodeChange = this.onTypeCodeChange.bind(this);\r\n        \r\n    }\r\n\r\n    onTypeNameChange(event) {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                typeName: event.target.value\r\n            }\r\n        });\r\n\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ valid_typeName: false })\r\n        }\r\n    }\r\n    onTypeCodeChange(event) {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                typeCode: event.target.value\r\n            }\r\n        });\r\n\r\n        console.log(\"TCL: ActionJobType -> onTypeCodeChange -> event.target.value\", event.target.value)\r\n        if (event.target.value !== '' || !event.target.value) {\r\n            this.setState({ valid_typeCode: false })\r\n        }\r\n    }\r\n\r\n    checkValidate = () => {\r\n        console.log(\"TCL: ActionJobType -> checkValidate -> this.state.data\", this.state.data)\r\n        if (this.state.data.typeName && this.state.data.typeCode) {\r\n            this.setState({ isOpen: true, isTypeShowConfirm: 'save', isTextMsg: msgPopupTitle.saved, isDataPopUp: this.state.data, valid_typeName: false, valid_typeCode: false })\r\n        } else {\r\n            if (!this.state.data.typeName) {\r\n                console.log(\"TCL: ActionJobType -> checkValidate -> this.state.data.typeName\", this.state.data.typeName)\r\n                this.setState({ valid_typeName: true })\r\n                // this.state.valid_typeName = true\r\n            }\r\n            if (!this.state.data.typeCode) {\r\n                console.log(\"TCL: ActionJobType -> checkValidate -> this.state.data.typeCode\", this.state.data.typeCode)\r\n                this.setState({ valid_typeCode: true })\r\n                // this.state.valid_typeCode = true\r\n            }\r\n            console.log(\"TCL: ActionJobType -> checkValidate -> this.state.valid_typeName\", this.state.valid_typeName, this.state.isSubmit)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<>\r\n\r\n            <div className=\"App\">\r\n                <div id=\"boxType\" className=\"container-box-content\">\r\n                    <div className=\"row wrap-container\">\r\n\r\n                        <Breadcrumb>\r\n                            <Breadcrumb.Item href=\"/jobtype\">\r\n                                <HomeOutlined />\r\n                                <span className=\"breadcrum-custom\">Job Type</span>\r\n                            </Breadcrumb.Item>\r\n                            {/* <Breadcrumb.Item href=\"#\"> */}\r\n                            {this.state.params.action === 'create' ? <span className=\"breadcrum-custom\">  Create Job type</span> : null}\r\n                            {this.state.params.action === 'edit' ? <span className=\"breadcrum-custom\">  Update Job type</span> : null}\r\n\r\n                            {/* </Breadcrumb.Item> */}\r\n                        </Breadcrumb>\r\n\r\n                        <div className=\"wrap-content\">\r\n                            <div className=\"box-action\">\r\n                                <div className=\"box-title-search\">\r\n                                    <div className=\"box-action-content\">\r\n                                        {this.state.params.action === 'create' ? <p className=\"font-size-search\">Create Job type</p> : null}\r\n                                        {this.state.params.action === 'edit' ? <p className=\"font-size-search\">Update Job type</p> : null}\r\n\r\n                                        {/* Job Type Name */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className={`col-5`} style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtJob Type Name\">Job Type Name<span style={{ color: 'red' }}>*</span></label></div>\r\n                                            <input type=\"text\" class={`form-control col-3 ${this.state.valid_typeName && this.state.isSubmit ? 'has-error-input' : ''}`} id=\"txtJob Type Name\" value={this.state.data.typeName} onChange={this.onTypeNameChange} />\r\n                                        </div>\r\n\r\n\r\n                                        {/* Code */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-5\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCode\">Code <span style={{ color: 'red' }}>*</span></label></div>\r\n                                            <input type=\"text\" class={`form-control col-3 ${this.state.valid_typeCode && this.state.isSubmit ? 'has-error-input' : ''}`} id=\"txtCode\" value={this.state.data.typeCode} onChange={this.onTypeCodeChange} />\r\n\r\n                                        </div>\r\n\r\n                                        <div style={{ textAlign: 'right' }}>\r\n\r\n                                            <p className=\"title-field\" ><span style={{ color: 'red' }}>*</span> Items marked with an asterisk are required</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row form-group\">\r\n                                    <div className=\"col-12\" style={{ textAlign: 'right' }}>\r\n                                        {this.state.params.action !== 'view' ?\r\n                                            <Link to='/jobtype'>\r\n                                                <button class=\"btn-custom btn-reset\" style={{ marginRight: 20 }} onClick={this.handleReset}>CANCEL</button>\r\n                                            </Link>\r\n                                            : null}\r\n\r\n                                        {this.state.params.action !== 'view' ? <button class=\"btn-custom btn-search\" style={{ marginRight: 20 }} onClick={() => {\r\n                                            this.setState({ isSubmit: true })\r\n                                            this.checkValidate()\r\n                                        }}>\r\n                                            {this.state.params.action === 'edit' ? 'UPDATE' : 'CREATE'}\r\n                                        </button> : null}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* POPUP */}\r\n            <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg} routeStatus={this.state.routeStatus}\r\n                clearActive={() => {\r\n                    \r\n                    this.setState({ routeStatus: this.state.isPopupSuccess ? 'success' : 'error' });\r\n                    // if (this.state.isPopupSuccess) {\r\n                    //     console.log(\"TCL: this.state.isPopupSuccess\", this.state.isPopupSuccess)\r\n                    //     // <Route to='/jobtype' />\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                    //         // <Route path=\"/jobtype\" />\r\n                    //     // <Link to={`/jobtype`} activeClassName=\"active\"></Link>\r\n                    //     // return <Redirect push to=\"/jobtype\" />;\r\n                    //     return <Redirect to={'/jobtype'} />\r\n                        \r\n                    //     // history.push(\"/jobtype\");\r\n                    // } else {\r\n                    //     return\r\n                    // }\r\n                }} />\r\n\r\n            <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n                onClose={() => { this.setState({ isOpen: false }) }}\r\n                clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n                confirmActive={(e) => {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: this.state.params.action === 'edit' ? msgAlertTitle.updated : msgAlertTitle.saved })\r\n                    console.log(\"Work -> render -> e\", e)\r\n                }}\r\n            />\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionJobType;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\create-edit-view.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport DateBox from \"devextreme-react/date-box\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from \"antd\";\r\nimport { HomeOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from \"../../config\";\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst msgValid = configService.validDateFill;\r\nconst format = \"HH:mm A\";\r\nconst Option = Select.Option;\r\n\r\nlet data = [\r\n    {\r\n        projectId: null,\r\n        typeId: null,\r\n        workDate: null,\r\n        workDetail: null,\r\n        workUrl: null,\r\n        workManhour: null,\r\n        workTimeIn: null,\r\n        workTimeOut: null,\r\n    },\r\n];\r\n\r\nlet projectList = [];\r\nlet typeList = [];\r\nlet timeHours = [];\r\nlet timeMin = [];\r\n\r\nclass ActionsWork extends React.Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        console.log(\"ActionsWork -> constructor -> props\", props);\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query));\r\n        let param = JSON.parse(tempQuery);\r\n\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"\", // msg ของ Popup\r\n            isDelete: false, // ใช้เช็คว่าเป็นการลบไหม\r\n            workDate: null,\r\n            data: [\r\n                {\r\n                    projectId: null,\r\n                    typeId: null,\r\n                    workDate: null,\r\n                    workDetail: null,\r\n                    workUrl: null,\r\n                    workManhour: null,\r\n                    workTimeIn: null,\r\n                    workTimeOut: null,\r\n                    projectPhase: null,\r\n                    timeIn: null,\r\n                    timeOut: null,\r\n                },\r\n            ],\r\n            projectList: [],\r\n            typeList: [],\r\n            params: param,\r\n            isValid_projectName: [],\r\n            isValid_jobType: [],\r\n            isValid_timeIn: [],\r\n            isValid_timeOut: [],\r\n            isValid_manHours: [],\r\n            isValid_detail: [],\r\n            isValid_workDate: false,\r\n            greaterTimeIn: [],\r\n            greaterTimeOut: [],\r\n            isSubmit: false,\r\n        };\r\n\r\n        let tempDateFirstRow = _.cloneDeep(this.state.data)\r\n        tempDateFirstRow[0].workDate = this.state.params.action === 'create' && this.state.params.workDate ? this.state.params.workDate : null\r\n        console.log(\"TCL: ActionsWork -> constructor -> tempDateFirstRow\", tempDateFirstRow)\r\n        this.setState({ data: tempDateFirstRow })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTypeList();\r\n        this.getProjectList();\r\n    }\r\n\r\n    getProjectList() {\r\n        this.setState({\r\n            projectList: [\r\n                {\r\n                    projectId: \"001\",\r\n                    projectName: \"test1\",\r\n                },\r\n                {\r\n                    projectId: \"002\",\r\n                    projectName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n\r\n        let resData = [\r\n            {\r\n                projectId: \"001\",\r\n                projectName: \"test1\",\r\n            },\r\n            {\r\n                projectId: \"002\",\r\n                projectName: \"test2\",\r\n            },\r\n        ];\r\n        let temp = [];\r\n        for (let i = 0; i < resData.length; i++) {\r\n            temp.push(\r\n                <Option key={resData[i].projectId}> {resData[i].projectName} </Option>\r\n            );\r\n        }\r\n\r\n        this.projectList = temp;\r\n    }\r\n\r\n    getTypeList() {\r\n        this.setState({\r\n            jobtypeList: [\r\n                {\r\n                    typeId: \"001\",\r\n                    typeName: \"test1\",\r\n                },\r\n                {\r\n                    typeId: \"002\",\r\n                    typeName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n\r\n        let resData = [\r\n            {\r\n                typeId: \"001\",\r\n                typeName: \"test1\",\r\n            },\r\n            {\r\n                typeId: \"002\",\r\n                typeName: \"test2\",\r\n            },\r\n        ];\r\n        let temp = [];\r\n        for (let i = 0; i < resData.length; i++) {\r\n            temp.push(\r\n                <Option key={resData[i].typeId}> {resData[i].typeName} </Option>\r\n            );\r\n            console.log(\r\n                \"ActionsWork -> getJobtypeList -> resData[i].typeId\",\r\n                resData[i].typeId\r\n            );\r\n        }\r\n\r\n        this.typeList = temp;\r\n    }\r\n\r\n\r\n    // TODO :: Select\r\n    // TODO :: Dropdown Project Name\r\n    handleChangeProject = (value, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.projectId = value;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_projectName];\r\n        console.log(\"TCL: ActionsWork -> handleChangeProject -> valid\", valid)\r\n        if (!value || value !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_projectName: valid });\r\n\r\n        console.log(\"TCL: ActionsWork -> handleChangeProject -> \", this.state)\r\n    };\r\n\r\n    handleBlurProject = () => {\r\n        console.log(\"blur ---- \", this.typeList);\r\n    };\r\n\r\n    handleFocusProject = () => {\r\n        console.log(\"focus ....\", this.typeList);\r\n    };\r\n\r\n    // TODO :: Dropdown Job Type\r\n    handleChangeType = (value, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.typeId = value;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_jobType];\r\n        if (!value || value !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_jobType: valid });\r\n    };\r\n\r\n    handleBlurType = () => {\r\n        console.log(\"blur ---- \", this.typeList);\r\n    };\r\n\r\n    handleFocusType = () => {\r\n        console.log(\"focus ....\", this.typeList);\r\n    };\r\n\r\n\r\n    // TODO :: Dropdown Time In\r\n    onChangeTimeIn = (time, timestring, index) => {\r\n        // console.log(\"ActionsWork -> onChangeTimeIn -> time, timestring, index\", time, timestring, index)\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeIn = time;\r\n        item.timeIn = timestring;\r\n        data[index] = item;\r\n\r\n        let valid = [...this.state.isValid_timeIn];\r\n        if (!timestring || timestring !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_timeIn: valid });\r\n    };\r\n\r\n    // TODO :: Dropdown Time Out\r\n    onChangeTimeOut = (time, timestring, index) => {\r\n        console.log(\r\n            \"ActionsWork -> onChangeTimeOut -> time, timestring, index\",\r\n            time,\r\n            timestring,\r\n            index\r\n        );\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeOut = time;\r\n        item.timeOut = timestring;\r\n        data[index] = item;\r\n        let valid = [...this.state.isValid_timeOut];\r\n        if (!timestring || timestring !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: data, isValid_timeOut: valid });\r\n    };\r\n\r\n\r\n    // TODO :: calculate man hours\r\n    calManHours = (index) => {\r\n\r\n        let temp = _.cloneDeep(this.state.data)\r\n        let validIn = [...this.state.isValid_timeIn];\r\n        let validOut = [...this.state.isValid_timeOut];\r\n\r\n\r\n        if (!temp[index].timeIn || temp[index].timeIn === '' || !temp[index].timeOut || temp[index].timeOut === '') {\r\n            if (!temp[index].timeOut || temp[index].timeOut === '') {\r\n                validOut[index] = true;\r\n                this.setState({ isValid_timeOut: validOut });\r\n            }\r\n            if (!temp[index].timeIn || temp[index].timeIn === '') {\r\n                validIn[index] = true;\r\n                this.setState({ isValid_timeIn: validIn });\r\n            }\r\n            return\r\n        }\r\n\r\n        if (!this.checkGreaterTime('one', index)) {\r\n            console.log(\"TCL: ActionsWork -> calManHours -> \", 'time out > time in')\r\n            return\r\n        }\r\n\r\n        var start = moment(temp[index].timeIn, 'HH:mm A').format('HH:mm');\r\n        var end = moment(temp[index].timeOut, 'HH:mm A').format('HH:mm');\r\n        let tempTime = this.fnCallDiffTime(start, end)\r\n        let time = '';\r\n        let dataTime = tempTime.split(\":\");\r\n        let tempStart = start.split(\":\");\r\n        let tempEnd = end.split(\":\");\r\n        if (start <= '12:00' && end >= '13:00') {\r\n            let a = parseInt(dataTime[0]) - 1\r\n            time = (a <= 9 ? \"0\" : \"\") + a + \":\" + dataTime[1];\r\n        } else if (start > '12:00' && start < '13:00') {\r\n            if (end <= '13:00') {\r\n                time = '00:00'\r\n            } else if (end > '13:00') {\r\n                if (parseInt(tempStart[1]) <= parseInt(tempEnd[1])) {\r\n                    let calHours = parseInt(dataTime[0]) - 1\r\n                    time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + tempEnd[1];\r\n                } else {\r\n                    let calMin = parseInt(tempEnd[1])\r\n                    let calHours = parseInt(dataTime[0])\r\n                    time = (calHours <= 9 ? \"0\" : \"\") + calHours + \":\" + (calMin <= 9 ? \"0\" : \"\") + calMin;\r\n                }\r\n            }\r\n        } else {\r\n            time = tempTime;\r\n        }\r\n\r\n        temp[index].workManhour = time\r\n        this.setState({ data: temp })\r\n    };\r\n\r\n    fnCallDiffTime = (start, end) => {\r\n        start = start.split(\":\");\r\n        end = end.split(\":\");\r\n        var startDate = new Date(0, 0, 0, start[0], start[1], 0);\r\n        var endDate = new Date(0, 0, 0, end[0], end[1], 0);\r\n        var diff = endDate.getTime() - startDate.getTime();\r\n        var hours = Math.floor(diff / 1000 / 60 / 60);\r\n        diff -= hours * 1000 * 60 * 60;\r\n        var minutes = Math.floor(diff / 1000 / 60);\r\n\r\n        if (hours < 0)\r\n            hours = hours + 24;\r\n\r\n        let time = (hours <= 9 ? \"0\" : \"\") + hours + \":\" + (minutes <= 9 ? \"0\" : \"\") + minutes;\r\n        return time;\r\n    }\r\n\r\n\r\n    // TODO :: Add form data\r\n    handleAddData = () => {\r\n        console.log(\"ActionsWork -> handleAddData -> handleAddData\");\r\n        this.state.data.push({\r\n            projectId: null,\r\n            typeId: null,\r\n            workDate: null,\r\n            workDetail: null,\r\n            workUrl: null,\r\n            workManhour: null,\r\n            workTimeIn: null,\r\n            workTimeOut: null,\r\n        });\r\n        let a = this.state.data;\r\n        this.setState({ data: a });\r\n        console.log(\r\n            \"ActionsWork -> handleAddData ->  this.state.data\",\r\n            this.state.data\r\n        );\r\n    };\r\n\r\n    handleChangeDate = (event) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        for (let i = 0; i < temp.length; i++) {\r\n            const element = temp[i];\r\n            element.workDate = event.value\r\n        }\r\n\r\n        if (!event.value || event.value !== '') {\r\n            this.setState({ isValid_workDate: false });\r\n        }\r\n        console.log(\"TCL: ActionsWork -> handleChangeDate -> temp\", temp)\r\n        this.setState({ workDate: event.value, data: temp })\r\n    }\r\n\r\n    deleteData = (data) => {\r\n        console.log(\"TCL: ActionsWork -> deleteData -> data\", data)\r\n\r\n        // ต้อง call api -------------------\r\n        let tempDel = _.cloneDeep(this.state.data)\r\n        tempDel.splice(data[1], 1);\r\n        this.setState({ data: tempDel })\r\n        // ต้อง call api -------------------\r\n\r\n        this.setState({ isOpen: false });\r\n        this.setState({ isPopupError: false });\r\n        this.setState({ isPopupSuccess: true });\r\n        this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n    }\r\n\r\n    confirmSave = (data) => {\r\n        console.log(\"TCL: ActionsWork -> confirmSave -> data\", data)\r\n        this.setState({ isOpen: false });\r\n        this.setState({ isPopupError: false });\r\n        this.setState({ isPopupSuccess: true });\r\n        this.setState({ isPopupMsg: this.state.params.action === \"edit\" ? msgAlertTitle.updated : msgAlertTitle.saved });\r\n\r\n    }\r\n\r\n    onWorkManHoursChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workManhour = event.target.value\r\n\r\n        let valid = [...this.state.isValid_timeOut];\r\n        if (!event.target.value || event.target.value !== '') {\r\n            valid[index] = false;\r\n        }\r\n\r\n        this.setState({ data: temp, isValid_timeOut: valid });\r\n    }\r\n    onWorkUrlChange = (event, index) => {\r\n        console.log(\"TCL: ActionsWork -> onWorkUrlChange -> event\", event)\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workUrl = event.target.value\r\n        console.log(\"TCL: ActionsWork -> onWorkUrlChange -> temp\", temp)\r\n\r\n        this.setState({\r\n            data: temp\r\n        });\r\n    }\r\n    onWorkDetailChange = (event, index) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        temp[index].workDetail = event.target.value\r\n\r\n        let valid = [...this.state.isValid_detail];\r\n        if (!event.target.value || event.target.value !== '') {\r\n            valid[index] = false;\r\n        }\r\n        this.setState({ data: temp, isValid_detail: valid });\r\n    }\r\n\r\n    checkValidData = () => {\r\n        let validProject = this.checkValid('project')\r\n        let validJobType = this.checkValid('job')\r\n        let validTimeIn = this.checkValid('in')\r\n        let validTimeOut = this.checkValid('out')\r\n        let validManHours = this.checkValid('hours')\r\n        let validDetail = this.checkValid('detail')\r\n        let validDate = this.checkValid('date')\r\n        let validGreater = this.checkGreaterTime('all', '')\r\n        if (validProject && validJobType && validTimeIn && validTimeOut && validManHours && validDetail && validDate && validGreater) {\r\n            this.setState({\r\n                isOpen: true,\r\n                isTypeShowConfirm: \"save\",\r\n                isTextMsg: msgPopupTitle.saved,\r\n                isDataPopUp: this.state.data,\r\n                isDelete: false,\r\n            });\r\n        } else {\r\n\r\n            console.log(\"TCL: ActionsWork -> checkValidData -> \", 'กรอกข้อมูลไม่ครบ')\r\n        }\r\n    }\r\n\r\n    checkValid = (type) => {\r\n        let temp = _.cloneDeep(this.state.data)\r\n        let res = true;\r\n        if (type === 'project') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_projectName];\r\n                if (!element.projectId || element.projectId === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_projectName: valid });\r\n                }\r\n            }\r\n        } else if (type === 'job') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_jobType];\r\n                if (!element.typeId || element.typeId === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_jobType: valid });\r\n                }\r\n            }\r\n        } else if (type === 'in') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_timeIn];\r\n                if (!element.workTimeIn || element.workTimeIn === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_timeIn: valid });\r\n                }\r\n            }\r\n        } else if (type === 'out') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_timeOut];\r\n                if (!element.workTimeOut || element.workTimeOut === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_timeOut: valid });\r\n                }\r\n            }\r\n        } else if (type === 'hours') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_manHours];\r\n                if (!element.workManhour || element.workManhour === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_manHours: valid });\r\n                }\r\n            }\r\n        } else if (type === 'detail') {\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                let valid = [...this.state.isValid_detail];\r\n                if (!element.workDetail || element.workDetail === '') {\r\n                    res = false;\r\n                    valid[i] = true;\r\n                    this.setState({ isValid_detail: valid });\r\n                }\r\n            }\r\n        } else if (type === 'date') {\r\n            if (this.state.workDate === '' || !this.state.workDate) {\r\n                res = false;\r\n                this.setState({ isValid_workDate: true });\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    checkGreaterTime(type, index) {\r\n        if (type === 'one') {\r\n\r\n            if ((!this.state.data[index].timeIn || this.state.data[index].timeIn !== '') && (!this.state.data[index].timeOut || this.state.data[index].timeOut !== '')) {\r\n                var start = moment(this.state.data[index].timeIn, 'HH:mm A').format('HH:mm');\r\n                var end = moment(this.state.data[index].timeOut, 'HH:mm A').format('HH:mm');\r\n                let validTimeIn = [...this.state.greaterTimeIn];\r\n                let validTimeOut = [...this.state.greaterTimeOut];\r\n                if (start > end) {\r\n                    validTimeIn[index] = true;\r\n                    validTimeOut[index] = true;\r\n                    this.setState({\r\n                        greaterTimeIn: validTimeIn,\r\n                        greaterTimeOut: validTimeOut,\r\n                    })\r\n                    return false\r\n                }\r\n            }\r\n        } else {\r\n            let temp = _.cloneDeep(this.state.data)\r\n            let res = true;\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const element = temp[i];\r\n                var start = moment(element.timeIn, 'HH:mm A').format('HH:mm');\r\n                var end = moment(element.timeOut, 'HH:mm A').format('HH:mm');\r\n                let validTimeIn = [...this.state.greaterTimeIn];\r\n                let validTimeOut = [...this.state.greaterTimeOut];\r\n                if (start > end) {\r\n                    validTimeIn[i] = true;\r\n                    validTimeOut[i] = true;\r\n                    this.setState({\r\n                        greaterTimeIn: validTimeIn,\r\n                        greaterTimeOut: validTimeOut,\r\n                    })\r\n                    res = false\r\n                }\r\n            }\r\n            return res\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"/work\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> work </span>\r\n                                </Breadcrumb.Item>\r\n                                {this.state.params.action === \"create\" ? (\r\n                                    <span className=\"breadcrum-custom\"> Create work </span>\r\n                                ) : null}\r\n                                {this.state.params.action === \"edit\" ? (\r\n                                    <span className=\"breadcrum-custom\"> Update work </span>\r\n                                ) : null}\r\n                            </Breadcrumb>\r\n\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-action\">\r\n                                    <div className=\"box-title-search\">\r\n\r\n                                        {this.state.params.action === \"create\" ? (<p className=\"font-size-search\"> Create Work </p>) : null}\r\n                                        {this.state.params.action === \"edit\" ? (<p className=\"font-size-search\"> Update Work </p>) : null}\r\n                                    </div>\r\n                                    <div className=\"box-content\" style={{ marginBottom: 0 }}>\r\n                                        <div className=\"box-action-date\">\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-3\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                    <label className=\"title-field\" for=\"ddlDate\">\r\n\r\n                                                        Date : <span style={{ color: \"red\" }}> * </span>\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className={`col-4`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                    <DateBox value={null} type=\"date\" value={this.state.work}\r\n                                                        type=\"date\" onValueChanged={(e) => {\r\n                                                            this.handleChangeDate(e)\r\n                                                        }}\r\n                                                        className={`${this.state.isValid_workDate && this.state.isSubmit ? 'has-error-input' : ''}`} />\r\n                                                    {this.state.isValid_workDate && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDate}</span> : null}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <hr className=\"hr-action\" />\r\n                                        <div style={{ textAlign: \"right\" }}>\r\n                                            <p className=\"title-field\">\r\n                                                <span style={{ color: \"red\" }}> * </span> Items marked with an asterisk are required\r\n                                            </p>\r\n                                        </div>\r\n                                        {this.state.data.map((data, i) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <div className=\"box-action-content\">\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div\r\n                                                                        className=\"col-4\"\r\n                                                                        style={{ textAlign: \"right\" }}\r\n                                                                    >\r\n                                                                        <label className=\"title-field\" for=\"ddlProjectName\" >\r\n                                                                            Project Name <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <div className={`form-control div-select ${this.state.isValid_projectName[i] && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                                                                            <Select\r\n                                                                                showSearch\r\n                                                                                style={{ width: 200 }}\r\n                                                                                placeholder=\"Please selete project\"\r\n                                                                                optionFilterProp=\"children\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    this.handleChangeProject(e, i);\r\n                                                                                }}\r\n                                                                                onFocus={(e) => {\r\n                                                                                    this.handleFocusProject(e, i);\r\n                                                                                }}\r\n                                                                                onBlur={(e) => {\r\n                                                                                    this.handleBlurProject(e, i);\r\n                                                                                }}\r\n                                                                                filterOption={(input, option) =>\r\n                                                                                    option.props.children[1].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                                                }\r\n                                                                                value={data.projectId}>\r\n                                                                                {this.projectList}\r\n                                                                            </Select>\r\n                                                                        </div>\r\n                                                                        {this.state.isValid_projectName[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validProjectName}</span> : null}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlJobType\" >\r\n                                                                            Job Type <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className={`col-8`} style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <div className={`form-control div-select ${this.state.isValid_projectName[i] && this.state.isSubmit ? 'has-error-input' : ''}`}>\r\n                                                                            <Select\r\n                                                                                showSearch\r\n                                                                                style={{ width: 200 }}\r\n                                                                                placeholder=\"Please selete Type\"\r\n                                                                                optionFilterProp=\"children\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    this.handleChangeType(e, i);\r\n                                                                                }}\r\n                                                                                onFocus={(e) => {\r\n                                                                                    this.handleFocusType(e, i);\r\n                                                                                }}\r\n                                                                                onBlur={(e) => {\r\n                                                                                    this.handleBlurType(e, i);\r\n                                                                                }}\r\n                                                                                filterOption={(input, option) =>\r\n                                                                                    option.props.children[1]\r\n                                                                                        .toLowerCase()\r\n                                                                                        .indexOf(input.toLowerCase()) >= 0\r\n                                                                                }\r\n                                                                                value={data.typeId}\r\n                                                                            >\r\n\r\n                                                                                {this.typeList}\r\n                                                                            </Select>\r\n                                                                        </div>\r\n                                                                        {this.state.isValid_jobType[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validJobType}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Time in */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlTimeIn\" >\r\n                                                                            Time in <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <TimePicker\r\n                                                                            showNow={true}\r\n                                                                            className=\"font-12pt\"\r\n                                                                            style={{ fontSize: \"12pt\" }}\r\n                                                                            use12Hours\r\n                                                                            placeholder=\"Select time in\"\r\n                                                                            format={format}\r\n                                                                            value={data.workTimeIn}\r\n                                                                            showNow={true}\r\n                                                                            onChange={(time, timestring) => {\r\n                                                                                this.onChangeTimeIn(\r\n                                                                                    time,\r\n                                                                                    timestring,\r\n                                                                                    i\r\n                                                                                );\r\n                                                                            }}\r\n                                                                            className={`${this.state.isValid_timeIn[i] || this.state.greaterTimeIn[i] ? 'has-error-input' : ''}`} />\r\n                                                                        {this.state.isValid_timeIn[i] && !this.state.greaterTimeIn[i] ? <span className=\"color-red\">{msgValid.work.validTimeIn}</span> : null}\r\n                                                                        {this.state.greaterTimeIn[i] && !this.state.isValid_timeIn[i] ? <span className=\"color-red\">{msgValid.work.validTimeInAndOut}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            {/* Time out */}\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"ddlTimeOut\" >\r\n                                                                            Time out <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <TimePicker\r\n                                                                            showNow={true}\r\n                                                                            className=\"font-12pt\"\r\n                                                                            style={{ fontSize: \"12pt\" }}\r\n                                                                            use12Hours\r\n                                                                            placeholder=\"Select Time out\"\r\n                                                                            format={format}\r\n                                                                            value={data.workTimeOut}\r\n                                                                            showNow={true}\r\n                                                                            onChange={(time, timestring) => {\r\n                                                                                this.onChangeTimeOut(\r\n                                                                                    time,\r\n                                                                                    timestring,\r\n                                                                                    i\r\n                                                                                );\r\n                                                                            }}\r\n                                                                            className={`${this.state.isValid_timeOut[i] || this.state.greaterTimeOut[i] ? 'has-error-input' : ''}`} />\r\n                                                                        {this.state.isValid_timeOut[i] && !this.state.greaterTimeOut[i] ? <span className=\"color-red\">{msgValid.work.validTimeOut}</span> : null}\r\n                                                                        {this.state.greaterTimeOut[i] && !this.state.isValid_timeOut[i] ? <span className=\"color-red\">{msgValid.work.validTimeInAndOut}</span> : null}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Man hours */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtManHours\" >\r\n                                                                            Man hours <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-4\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <input type=\"text\" className={`form-control ${this.state.isValid_manHours[i] && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                                            id=\"txtManHours\" value={data.workManhour} onChange={(event) => { this.onWorkManHoursChange(event, i) }} />\r\n                                                                        {this.state.isValid_manHours[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validManHours}</span> : null}\r\n                                                                    </div>\r\n                                                                    <div className=\"col-3\">\r\n                                                                        <button class=\"btn-custom btn-calculate\" onClick={() => { this.calManHours(i) }} >\r\n                                                                            Calculate\r\n                                                                        </button>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            {/* Url */}\r\n                                                            <div className=\"col-6\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtUrl\">\r\n                                                                            Url\r\n<<<<<<< Updated upstream\r\n                                                                        {/* <span style={{ color: \"red\" }}> * </span> */}\r\n=======\r\n>>>>>>> Stashed changes\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-8\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <input type=\"text\" class=\"form-control\" id=\"txtUrl\" value={data.workUrl} onChange={(event) => { this.onWorkUrlChange(event, i) }} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Detail */}\r\n                                                        <div className=\"row form-group\">\r\n                                                            <div className=\"col-12\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-2\" style={{ textAlign: \"right\" }} >\r\n                                                                        <label className=\"title-field\" for=\"txtDetail\" >\r\n                                                                            Detail <span style={{ color: \"red\" }}> * </span>\r\n                                                                        </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-10\" style={{ textAlign: 'start', padding: 0 }}>\r\n                                                                        <textarea\r\n                                                                            rows=\"3\"\r\n                                                                            type=\"text\"\r\n                                                                            id=\"txtDetail\"\r\n                                                                            className={`form-control ${this.state.isValid_detail[i] && this.state.isSubmit ? 'has-error-input' : ''}`}\r\n                                                                            value={data.workDetail} onChange={(event) => { this.onWorkDetailChange(event, i) }}\r\n                                                                        />\r\n                                                                        {this.state.isValid_detail[i] && this.state.isSubmit ? <span className=\"color-red\">{msgValid.work.validWorkDetail}</span> : null}\r\n\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    {this.state.data.length > 1 ? (\r\n                                                        <div\r\n                                                            style={{\r\n                                                                textAlign: \"end\",\r\n                                                                marginTop: 20,\r\n                                                                marginBottom: 10,\r\n                                                            }}\r\n                                                        >\r\n                                                            <button type=\"button\" style={{ background: \"red\", color: \"#fff\", width: 300 }}\r\n                                                                className=\"btn btn-popup-custom error\"\r\n                                                                onClick={() => {\r\n                                                                    this.setState({\r\n                                                                        isOpen: true,\r\n                                                                        isTypeShowConfirm: \"del\",\r\n                                                                        isTextMsg: msgPopupTitle.deleted,\r\n                                                                        isDataPopUp: [data, i],\r\n                                                                        isDelete: true,\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                Delete\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                    <hr className=\"hr-action\" />\r\n                                                </>\r\n                                            );\r\n                                        })}\r\n                                        <br />\r\n                                        <div>\r\n                                            <button type=\"button\" class=\"btn btn-add-work\" onClick={this.handleAddData} >\r\n                                                <span className=\"btn-add-work-icon\">\r\n                                                    <PlusOutlined />\r\n                                                </span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row form-group\">\r\n                                        <div className=\"col-12\" style={{ textAlign: \"right\" }}>\r\n                                            <Link to=\"/work\">\r\n                                                <button class=\"btn-custom btn-reset\" style={{ marginRight: 20 }} >\r\n                                                    CANCEL\r\n                                                </button>\r\n                                            </Link>\r\n                                            <button\r\n                                                class=\"btn-custom btn-search\"\r\n                                                style={{ marginRight: 70 }}\r\n                                                onClick={() => {\r\n                                                    this.setState({ isSubmit: true })\r\n                                                    this.checkValidData()\r\n\r\n                                                }}\r\n                                            >\r\n                                                {this.state.params.action === \"edit\" ? \"UPDATE\" : \"CREATE\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n\r\n                        if (this.state.isPopupSuccess) {\r\n                            this.props.history.push('/work')\r\n                        }\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(data) => {\r\n                        console.log(\"Work -> render -> e\", data);\r\n                        if (this.state.isDelete) {\r\n                            this.deleteData(data)\r\n                        } else {\r\n                            this.confirmSave(data)\r\n                        }\r\n\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionsWork;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\create-edit.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport DateBox from 'devextreme-react/date-box';\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb, TimePicker, Select } from 'antd';\r\nimport { HomeOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { BrowserRouter as Router, Switch, Route,  Link } from 'react-router-dom';\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from '../../config';\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\nconst format = 'HH:mm';\r\nconst Option = Select.Option;\r\n\r\nlet data = [{\r\n    projectId: null,\r\n    typeId: null,\r\n    workDate: null,\r\n    workDetail: null,\r\n    workUrl: null,\r\n    workManhour: null,\r\n    workTimeIn: null,\r\n    workTimeOut: null,\r\n}]\r\n\r\nlet projectList = [];\r\nlet typeList = [];\r\nlet timeHours = [];\r\nlet timeMin = [];\r\n\r\nclass ActionsProject extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        console.log(\"Actionsproject -> constructor -> props\", props)\r\n        let query = _.cloneDeep(props.match.params.query);\r\n        let tempQuery = JSON.parse(JSON.stringify(query))\r\n        let param = JSON.parse(tempQuery)\r\n\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false,  // alert error case\r\n            isPopupMsg: '',  // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: '', // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: '', // msg ของ Popup\r\n            data: [{\r\n                projectId: null,\r\n                typeId: null,\r\n                workDate: null,\r\n                workDetail: null,\r\n                workUrl: null,\r\n                workManhour: null,\r\n                workTimeIn: null,\r\n                workTimeOut: null,\r\n            }],\r\n            projectList: [],\r\n            typeList: [],\r\n            params: param\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // console.log(\"ActionsWork -> componentDidMount -> s\", this.state.data)\r\n        this.getTypeList();\r\n        this.getProjectList();\r\n    }\r\n\r\n    getProjectList() {\r\n        this.setState({\r\n            projectList: [{\r\n                projectId: '001',\r\n                projectName: 'test1'\r\n            },\r\n            {\r\n                projectId: '002',\r\n                projectName: 'test2'\r\n            }]\r\n        })\r\n\r\n        let resData = [{\r\n            projectId: '001',\r\n            projectName: 'test1'\r\n        },\r\n        {\r\n            projectId: '002',\r\n            projectName: 'test2'\r\n        }]\r\n        let temp = [];\r\n        for (let i = 0; i < resData.length; i++) {\r\n            temp.push(<Option key={resData[i].projectId}>{resData[i].projectName}</Option>);\r\n        }\r\n\r\n        this.projectList = temp\r\n    }\r\n\r\n    getTypeList() {\r\n        this.setState({\r\n            jobtypeList: [{\r\n                typeId: '001',\r\n                typeName: 'test1'\r\n            },\r\n            {\r\n                typeId: '002',\r\n                typeName: 'test2'\r\n            }]\r\n        })\r\n\r\n        let resData = [{\r\n            typeId: '001',\r\n            typeName: 'test1'\r\n        },\r\n        {\r\n            typeId: '002',\r\n            typeName: 'test2'\r\n        }]\r\n        let temp = []\r\n        for (let i = 0; i < resData.length; i++) {\r\n            temp.push(<Option key={resData[i].typeId}>{resData[i].typeName}</Option>);\r\n            console.log(\"ActionsWork -> getJobtypeList -> resData[i].typeId\", resData[i].typeId)\r\n        }\r\n\r\n        this.typeList = temp\r\n    }\r\n\r\n    handleProjectChange = (value, i) => {\r\n        console.log(\"ActionsWork -> handleProjectChange -> i\", i)\r\n        console.log(\"ActionsWork -> handleProjectChange -> value\", value)\r\n\r\n        // let temp = _.cloneDeep(this.state.filter)\r\n        // temp.projectId = value\r\n        // this.setState({\r\n        //     filter: {\r\n        //         dateFrom: temp.dateFrom,\r\n        //         dateTo: temp.dateTo,\r\n        //         typeId: temp.typeId,\r\n        //         projectId: value\r\n        //     }\r\n        // });\r\n    }\r\n    handleTypeChange = (event) => {\r\n\r\n        let temp = _.cloneDeep(this.state.filter)\r\n        temp.typeId = event.target.value\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: temp.projectId\r\n            }\r\n        });\r\n    }\r\n\r\n    // TODO :: Select\r\n\r\n    handleChangeProject = (value, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.projectId = value;\r\n        data[index] = item;\r\n        this.setState({ data });\r\n    }\r\n\r\n    handleBlurProject = () => {\r\n        console.log('blur ---- ', this.typeList);\r\n    }\r\n\r\n    handleFocusProject = () => {\r\n        console.log('focus ....', this.typeList);\r\n    }\r\n    handleChangeType = (value, index) => {\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.typeId = value;\r\n        data[index] = item;\r\n        this.setState({ data });\r\n    }\r\n\r\n    handleBlurType = () => {\r\n        console.log('blur ---- ', this.typeList);\r\n    }\r\n\r\n    handleFocusType = () => {\r\n        console.log('focus ....', this.typeList);\r\n    }\r\n\r\n    onChangeTimeIn = (time, timestring, index) => {\r\n        // console.log(\"ActionsWork -> onChangeTimeIn -> time, timestring, index\", time, timestring, index)\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeIn = time;\r\n        data[index] = item;\r\n        this.setState({ data });\r\n    }\r\n    onChangeTimeOut = (time, timestring, index) => {\r\n        console.log(\"ActionsWork -> onChangeTimeOut -> time, timestring, index\", time, timestring, index)\r\n        let data = [...this.state.data];\r\n        let item = { ...data[index] };\r\n        item.workTimeOut = time;\r\n        data[index] = item;\r\n        this.setState({ data });\r\n    }\r\n\r\n    calManHours = () => {\r\n\r\n    }\r\n\r\n    handleAddData = () => {\r\n        console.log(\"ActionsWork -> handleAddData -> handleAddData\")\r\n        this.state.data.push({\r\n            projectId: null,\r\n            typeId: null,\r\n            workDate: null,\r\n            workDetail: null,\r\n            workUrl: null,\r\n            workManhour: null,\r\n            workTimeIn: null,\r\n            workTimeOut: null,\r\n        })\r\n        let a = this.state.data\r\n        this.setState({ data: a })\r\n        console.log(\"ActionsProject -> handleAddData ->  this.state.data\", this.state.data)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<>\r\n\r\n            <div className=\"App\">\r\n                <div id=\"boxType\" className=\"container-box-content\">\r\n                    <div className=\"row wrap-container\">\r\n\r\n                        <Breadcrumb>\r\n                            <Breadcrumb.Item href=\"/project\">\r\n                                <HomeOutlined />\r\n                                <span className=\"breadcrum-custom\">project</span>\r\n                            </Breadcrumb.Item>\r\n                            {/* <Breadcrumb.Item href=\"#\"> */}\r\n                            {this.state.params.action === 'create' ? <span className=\"breadcrum-custom\">Create project</span> : null}\r\n                            {this.state.params.action === 'edit' ? <span className=\"breadcrum-custom\">  Update project</span> : null}\r\n                            {this.state.params.action === 'view' ? <span className=\"breadcrum-custom\">  Detail project</span> : null}\r\n\r\n                            {/* </Breadcrumb.Item> */}\r\n                        </Breadcrumb>\r\n\r\n\r\n                        <div className=\"wrap-content\">\r\n                            <div className=\"box-action\">\r\n                                <div className=\"box-title-search\">\r\n                                    <div className=\"box-action-content\">\r\n                                        {this.state.params.action === 'create' ? <p className=\"font-size-search\">Create Project</p> : null}\r\n                                        {this.state.params.action === 'edit' ? <p className=\"font-size-search\">Update Project</p> : null}\r\n                                        {this.state.params.action === 'view' ? <p className=\"font-size-search\">Detail Project</p> : null}\r\n\r\n                                        {/* Start Date */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlStartDate\">Start Date {this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className=\"col-4\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                                                <DateBox\r\n                                                    value={null}\r\n                                                    type=\"date\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* End Date */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlEndDate\">End Date{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <div className=\"col-4\" style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n                                                <DateBox\r\n                                                    value={null}\r\n                                                    type=\"date\" />\r\n                                            </div> </div>\r\n\r\n                                        {/* Project */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlProject\">Project{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <input type=\"text\" class=\"form-control col-4\" id=\"txtProject\" />\r\n\r\n                                        </div>\r\n\r\n                                        {/* Phase */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"ddlPhase\">Phase{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtPhase\" />\r\n                                        </div>\r\n\r\n                                        {/*Man Day */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtManDay\">Man Day{this.state.params.action !== 'view' ? <span style={{ color: 'red' }}></span> : null}</label></div>\r\n\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtManDay\" />\r\n\r\n                                        </div>\r\n\r\n                                        {/* Detail */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtDetail\">Detail {this.state.params.action !== 'view' ? <span style={{ color: 'red' }}>*</span> : null}</label></div>\r\n                                            <textarea rows=\"3\" type=\"text\" class=\"form-control col-5\" id=\"txtDetail\" />\r\n\r\n                                        </div>\r\n\r\n                                        {/* CustomerEmail */}\r\n                                        <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCustomerEmail\">Customer Email<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtCustomerEmail\" />\r\n\r\n                                        </div>\r\n\r\n                                        {/* CreateDate */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCreateDate\">CreateDate<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtCreateDate\" />\r\n\r\n                                        </div> : null}\r\n\r\n                                        {/* CreateBy */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtCreateBy\">CreateBy<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtCreateBy\" />\r\n\r\n                                        </div> : null}\r\n\r\n                                        {/* UpdateDate */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtUpdateDate\">UpdateDate<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtUpdateDate\" />\r\n\r\n                                        </div> : null}\r\n\r\n                                        {/*  UpdateBy */}\r\n                                        {this.state.params.action === 'view' ? <div className=\"row form-group\">\r\n                                            <div className=\"col-4\" style={{ textAlign: 'right' }}><label className=\"title-field\" for=\"txtUpdateBy\">UpdateBy<span style={{ color: 'red' }}></span></label></div>\r\n                                            <input type=\"text\" class=\"form-control col-5\" id=\"txtUpdateBy\" />\r\n\r\n                                        </div> : null}\r\n\r\n                                        {this.state.params.action !== 'view' ? <div style={{ textAlign: 'right' }}>\r\n                                            <p className=\"title-field\"><span style={{ color: 'red' }}>*</span> Items marked with an asterisk are required</p>\r\n                                        </div> : null}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"row form-group\">\r\n                                    <div className=\"col-12\" style={{ textAlign: 'right' }}>\r\n                                        {this.state.params.action !== 'view' ?\r\n                                            <Link to='/project'>\r\n                                                <button  class=\"btn-custom btn-reset\" style={{ marginRight: 20 }}>CANCEL</button>\r\n                                            </Link> : null}\r\n                                        {this.state.params.action !== 'view' ? <button class=\"btn-custom btn-search\" style={{ marginRight: 20 }} onClick={() => {\r\n                                            // this.this.state.params.action === 'edit'\r\n                                            this.setState({ isOpen: true, isTypeShowConfirm: 'save', isTextMsg: this.state.params.action === 'edit' ? msgPopupTitle.saved: msgPopupTitle.saved, isDataPopUp: this.state.data })\r\n\r\n                                        }}>{this.state.params.action === 'edit' ? 'UPDATE' : 'CREATE'}</button> : null}\r\n                                        {this.state.params.action === 'view' ?\r\n                                            <Link to='/project'>\r\n                                                <button class=\"btn-custom btn-search \" style={{ marginRight: 20 }} >BACK</button>\r\n                                            </Link>\r\n                                            : null}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* POPUP */}\r\n            <AlertPopUp successStatus={this.state.isPopupSuccess} errorStatus={this.state.isPopupError} message={this.state.isPopupMsg}\r\n                clearActive={() => {\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: false })\r\n                }} />\r\n\r\n            <ConfirmPopup open={this.state.isOpen} type={this.state.isTypeShowConfirm} text={this.state.isTextMsg} data={this.state.isDataPopUp} del={false}\r\n                onClose={() => { this.setState({ isOpen: false }) }}\r\n                clearActive={(e) => { this.setState({ isOpen: false }) }}\r\n                confirmActive={(e) => {\r\n                    this.setState({ isOpen: false })\r\n                    this.setState({ isPopupError: false })\r\n                    this.setState({ isPopupSuccess: true })\r\n                    this.setState({ isPopupMsg: this.state.params.action === 'edit' ?msgAlertTitle.updated :msgAlertTitle.saved })\r\n                    console.log(\"Work -> render -> e\", e)\r\n                }}\r\n            />\r\n        </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default ActionsProject;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Work\\index.js",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\JobType\\index.js",["153","154","155","156","157","158","159","160","161","162","163"],"import React, { Component } from \"react\";\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AspNetData from \"devextreme-aspnet-data-nojquery\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from \"antd\";\r\nimport {\r\n    HomeOutlined,\r\n    EyeOutlined,\r\n    DeleteOutlined,\r\n    FormOutlined,\r\n} from \"@ant-design/icons\";\r\nimport DataGrid, { Column, Pager, Paging } from \"devextreme-react/data-grid\";\r\nimport configService from \"../../config\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nconst url = \"https://js.devexpress.com/Demos/Mvc/api/TreeListTasks\";\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\n\r\nconst tasksData = AspNetData.createStore({\r\n    key: \"Task_ID\",\r\n    loadUrl: `${url}/Tasks`,\r\n    insertUrl: `${url}/InsertTask`,\r\n    updateUrl: `${url}/UpdateTask`,\r\n    deleteUrl: `${url}/DeleteTask`,\r\n    onBeforeSend: function (method, ajaxOptions) {\r\n        ajaxOptions.xhrFields = { withCredentials: true };\r\n    },\r\n});\r\n\r\nconst employeesData = AspNetData.createStore({\r\n    key: \"ID\",\r\n    loadUrl: `${url}/TaskEmployees`,\r\n});\r\n\r\nconst statusesData = [\r\n    \"Not Started\",\r\n    \"Need Assistance\",\r\n    \"In Progress\",\r\n    \"Deferred\",\r\n    \"Completed\",\r\n];\r\n\r\nclass JobType extends React.Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"Please contact your administrator.\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"del\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"Are you sure you want to delete this?\", // msg ของ Popup\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null,\r\n            },\r\n            projectList: [],\r\n            jobtypeList: [],\r\n            data: [\r\n                {\r\n                    typeId: \"0001\",\r\n                    typeName: \"test\",\r\n                    typeCode: \"T0001\",\r\n                    updateDate: \"01/12/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/11/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    typeId: \"0002\",\r\n                    typeName: \"test2\",\r\n                    typeCode: \"T0002\",\r\n                    updateDate: \"01/12/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/11/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    typeId: \"0003\",\r\n                    typeName: \"test3\",\r\n                    typeCode: \"T0003\",\r\n                    updateDate: \"01/12/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/11/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    typeId: \"0004\",\r\n                    typeName: \"test4\",\r\n                    typeCode: \"T0004\",\r\n                    updateDate: \"01/12/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/11/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    typeId: \"0005\",\r\n                    typeName: \"test5\",\r\n                    typeCode: \"T0005\",\r\n                    updateDate: \"01/12/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/11/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProjectList();\r\n        this.getJobtypeList();\r\n    }\r\n\r\n    getProjectList() {\r\n        this.setState({\r\n            projectList: [\r\n                {\r\n                    projectId: \"001\",\r\n                    projectName: \"test1\",\r\n                },\r\n                {\r\n                    projectId: \"002\",\r\n                    projectName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    getJobtypeList() {\r\n        this.setState({\r\n            jobtypeList: [\r\n                {\r\n                    typeId: \"001\",\r\n                    typeName: \"test1\",\r\n                },\r\n                {\r\n                    typeId: \"002\",\r\n                    typeName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n        console.log(\r\n            \"Work -> getJobtypeList -> this.state.jobtypeList\",\r\n            this.state.jobtypeList\r\n        );\r\n    }\r\n\r\n    handleProjectChange = (event) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        temp.projectId = event.target.value;\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: event.target.value,\r\n            },\r\n        });\r\n    };\r\n    handleTypeChange = (event) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        temp.typeId = event.target.value;\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: temp.projectId,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleChangeDate = (event, type) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        if (type === \"from\") {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: event.value,\r\n                    dateTo: temp.dateTo,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId,\r\n                },\r\n            });\r\n        } else {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: temp.dateFrom,\r\n                    dateTo: event.value,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        console.log(\"Work -> handleReset -> this.state.filter\", this.state.filter);\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null,\r\n            },\r\n        });\r\n        setTimeout(() => {\r\n            console.log(\"Work -> handleReset -> ll\", this.state.filter);\r\n        }, 100);\r\n    };\r\n\r\n    delCellRender = (data) => {\r\n        console.log(\"JobType -> DelcellRender -> data\", data);\r\n        return (\r\n            <a\r\n                onClick={() => {\r\n                    this.setState({\r\n                        isOpen: true,\r\n                        isTypeShowConfirm: \"del\",\r\n                        isTextMsg: msgPopupTitle.deleted,\r\n                        isDataPopUp: data.data.typeId,\r\n                    });\r\n                }}\r\n            >\r\n\r\n                <span style={{ color: \"#111\", fontSize: \"12pt\" }}>\r\n\r\n                    <DeleteOutlined />\r\n                </span>\r\n            </a>\r\n        );\r\n    };\r\n    editCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/jobtype\" + `/{\"action\":\"edit\",\"jobTypeId\":\"${data.data.typeId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <FormOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n    noCellRender = (data) => {\r\n        return (\r\n            <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                {data.component.pageIndex() * data.component.pageSize() +\r\n                    data.rowIndex +\r\n                    1}\r\n            </span>\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"#\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> Job Type </span>\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\">\r\n                                    <div className=\"box-title-search\">\r\n                                        <p className=\"font-size-search\"> Search Job Type </p>\r\n                                    </div>\r\n                                    <div className=\"box-content\">\r\n                                        <div className=\"box-search-border\">\r\n                                            <form>\r\n                                                <div className=\"row form-group\">\r\n                                                    <div\r\n                                                        className=\"col-4\"\r\n                                                        style={{ textAlign: \"right\" }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                                {/* Job Type Name */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label for=\"txtJobType\" className=\"title-field\">\r\n\r\n                                                            Job Type \r\n                                                            {/* <span style={{ color: \"red\" }}> * </span> */}\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-3\"\r\n                                                        id=\"txtJobType\"\r\n                                                    />\r\n                                                </div>\r\n                                                {/* Code */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-4\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label for=\"txtCode\" className=\"title-field\">\r\n\r\n                                                            Code \r\n                                                            {/* <span style={{ color: \"red\" }}> * </span> */}\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-3\"\r\n                                                        id=\"txtCode\"\r\n                                                    />\r\n                                                </div>\r\n                                            </form>\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-12\" style={{ textAlign: \"center\" }}>\r\n                                                    <button\r\n                                                        class=\"btn-custom btn-reset \"\r\n                                                        style={{ marginRight: 20 }}\r\n                                                        onClick={this.handleReset}\r\n                                                    >\r\n\r\n                                                        RESET\r\n                                                    </button>\r\n                                                    <button class=\"btn-custom btn-search \">\r\n\r\n                                                        SEARCH\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content start*/}\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\" style={{ padding: 30 }}>\r\n                                    <div style={{ textAlign: \"end\", padding: 15 }}>\r\n                                        <Link to='/jobtype/{\"action\":\"create\"}'>\r\n                                            <button\r\n                                                className=\"btn-custom btn-search \"\r\n                                                style={{ width: 250 }}\r\n                                            >\r\n\r\n                                                <span className=\"btn-icon\">\r\n\r\n                                                    <IoAddOutline />\r\n                                                </span>\r\n                                                <span className=\"btn-txt-icon\">\r\n                                                    Create Job Type\r\n                        </span>\r\n                                            </button>\r\n                                        </Link>\r\n                                    </div>\r\n\r\n                                    <div style={{ padding: 20 }}>\r\n                                        <DataGrid\r\n                                            dataSource={this.state.data}\r\n                                            showBorders={true}\r\n                                            showRowLines={true}\r\n                                        >\r\n                                            <Paging defaultPageSize={3} />\r\n                                            <Pager\r\n                                                showPageSizeSelector={true}\r\n                                                allowedPageSizes={[5, 10, 20]}\r\n                                                showInfo={true}\r\n                                                showNavigationButtons={true}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                caption=\"No\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.noCellRender}\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Job Type\"\r\n                                                dataField=\"typeName\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Code\"\r\n                                                dataField=\"typeCode\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"Edit\"\r\n                                                cellRender={this.editCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.delCellRender}\r\n                                                caption=\"Delete\"\r\n                                            />\r\n                                        </DataGrid>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content end*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: true });\r\n                        this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n                        console.log(\"Work -> render -> e\", e);\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobType;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\Project\\index.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BsFillCalendarFill } from \"react-icons/bs\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport { FaClipboardList } from \"react-icons/fa\";\r\nimport { AiOutlineStepBackward } from \"react-icons/ai\";\r\nimport { AiFillStepForward } from \"react-icons/ai\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport DateBox from \"devextreme-react/date-box\";\r\nimport { IoAddOutline } from \"react-icons/io5\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AspNetData from \"devextreme-aspnet-data-nojquery\";\r\nimport _ from \"lodash\";\r\nimport { Breadcrumb } from \"antd\";\r\nimport {\r\n    HomeOutlined,\r\n    EyeOutlined,\r\n    DeleteOutlined,\r\n    FormOutlined,\r\n} from \"@ant-design/icons\";\r\nimport DataGrid, { Column, Pager, Paging } from \"devextreme-react/data-grid\";\r\nimport AlertPopUp from \"../../components/popup/alert_popup\";\r\nimport ConfirmPopup from \"../../components/popup/confirm_popup\";\r\nimport configService from \"../../config\";\r\nconst msgAlertTitle = configService.msgAlert;\r\nconst msgPopupTitle = configService.msgConfirm;\r\n\r\nconst url = \"https://js.devexpress.com/Demos/Mvc/api/TreeListTasks\";\r\n\r\nconst tasksData = AspNetData.createStore({\r\n    key: \"Task_ID\",\r\n    loadUrl: `${url}/Tasks`,\r\n    insertUrl: `${url}/InsertTask`,\r\n    updateUrl: `${url}/UpdateTask`,\r\n    deleteUrl: `${url}/DeleteTask`,\r\n    onBeforeSend: function (method, ajaxOptions) {\r\n        ajaxOptions.xhrFields = { withCredentials: true };\r\n    },\r\n});\r\n\r\nconst employeesData = AspNetData.createStore({\r\n    key: \"ID\",\r\n    loadUrl: `${url}/TaskEmployees`,\r\n});\r\n\r\nconst statusesData = [\r\n    \"Not Started\",\r\n    \"Need Assistance\",\r\n    \"In Progress\",\r\n    \"Deferred\",\r\n    \"Completed\",\r\n];\r\n\r\nclass Project extends React.Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    openModal = () => this.setState({ isOpen: true });\r\n    closeModal = () => this.setState({ isOpen: false });\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPopupSuccess: false, // alert success case\r\n            isPopupError: false, // alert error case\r\n            isPopupMsg: \"\", // alert msg\r\n            isOpen: false, // open popup confirm\r\n            isTypeShowConfirm: \"\", // ประเภทของ popup : save , del\r\n            isDataPopUp: {}, // ข้อมูลที่ใช้\r\n            isTextMsg: \"\", // msg ของ Popup\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null,\r\n            },\r\n            projectList: [],\r\n            jobtypeList: [],\r\n            data: [\r\n                {\r\n                    projectId: \"0001\",\r\n                    projectName: \"name1\",\r\n                    projectPhase: \"1\",\r\n                    projectDetail: \"....\",\r\n                    projectStartDate: \"20/01/2020\",\r\n                    projectEndDate: \"31/12/2021\",\r\n                    projectManDays: \"50\",\r\n                    customerEmail: \"test@test.com\",\r\n                    updateDate: \"01/01/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/01/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    projectId: \"0002\",\r\n                    projectName: \"name2\",\r\n                    projectPhase: \"1\",\r\n                    projectDetail: \"....\",\r\n                    projectStartDate: \"20/01/2020\",\r\n                    projectEndDate: \"31/12/2021\",\r\n                    projectManDays: \"50\",\r\n                    customerEmail: \"test@test.com\",\r\n                    updateDate: \"01/01/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/01/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    projectId: \"0003\",\r\n                    projectName: \"name3\",\r\n                    projectPhase: \"1\",\r\n                    projectDetail: \"....\",\r\n                    projectStartDate: \"20/01/2020\",\r\n                    projectEndDate: \"31/12/2021\",\r\n                    projectManDays: \"50\",\r\n                    customerEmail: \"test@test.com\",\r\n                    updateDate: \"01/01/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/01/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n                {\r\n                    projectId: \"0004\",\r\n                    projectName: \"name4\",\r\n                    projectPhase: \"1\",\r\n                    projectDetail: \"....\",\r\n                    projectStartDate: \"20/01/2020\",\r\n                    projectEndDate: \"31/12/2021\",\r\n                    projectManDays: \"50\",\r\n                    customerEmail: \"test@test.com\",\r\n                    updateDate: \"01/01/2020\",\r\n                    updateBy: \"joon\",\r\n                    createDate: \"01/01/2020\",\r\n                    createBy: \"joon\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getProjectList();\r\n        this.getJobtypeList();\r\n    }\r\n\r\n    getProjectList() {\r\n        this.setState({\r\n            projectList: [\r\n                {\r\n                    projectId: \"001\",\r\n                    projectName: \"test1\",\r\n                },\r\n                {\r\n                    projectId: \"002\",\r\n                    projectName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    getJobtypeList() {\r\n        this.setState({\r\n            jobtypeList: [\r\n                {\r\n                    typeId: \"001\",\r\n                    typeName: \"test1\",\r\n                },\r\n                {\r\n                    typeId: \"002\",\r\n                    typeName: \"test2\",\r\n                },\r\n            ],\r\n        });\r\n        console.log(\r\n            \"Work -> getJobtypeList -> this.state.jobtypeList\",\r\n            this.state.jobtypeList\r\n        );\r\n    }\r\n\r\n    handleProjectChange = (event) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        temp.projectId = event.target.value;\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: event.target.value,\r\n            },\r\n        });\r\n    };\r\n    handleTypeChange = (event) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        temp.typeId = event.target.value;\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: temp.dateFrom,\r\n                dateTo: temp.dateTo,\r\n                typeId: temp.typeId,\r\n                projectId: temp.projectId,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleChangeDate = (event, type) => {\r\n        let temp = _.cloneDeep(this.state.filter);\r\n        if (type === \"from\") {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: event.value,\r\n                    dateTo: temp.dateTo,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId,\r\n                },\r\n            });\r\n        } else {\r\n            this.setState({\r\n                filter: {\r\n                    dateFrom: temp.dateFrom,\r\n                    dateTo: event.value,\r\n                    typeId: temp.typeId,\r\n                    projectId: temp.projectId,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        console.log(\"Work -> handleReset -> this.state.filter\", this.state.filter);\r\n        this.setState({\r\n            filter: {\r\n                dateFrom: new Date(),\r\n                dateTo: new Date(),\r\n                projectId: null,\r\n                typeId: null,\r\n            },\r\n        });\r\n        setTimeout(() => {\r\n            console.log(\"Work -> handleReset -> ll\", this.state.filter);\r\n        }, 100);\r\n    };\r\n\r\n    delCellRender = (data) => {\r\n        console.log(\"project -> DelcellRender -> data\", data);\r\n        return (\r\n            <a\r\n                onClick={() => {\r\n                    console.log(\"project -> DelcellRender -> data\", data.data.typeId);\r\n                    this.setState({\r\n                        isOpen: true,\r\n                        isTypeShowConfirm: \"del\",\r\n                        isTextMsg: msgPopupTitle.deleted,\r\n                        isDataPopUp: this.state.data,\r\n                    });\r\n                }}\r\n            >\r\n\r\n                <span style={{ color: \"#111\", fontSize: \"12pt\" }}>\r\n\r\n                    <DeleteOutlined />\r\n                </span>\r\n            </a>\r\n        );\r\n    };\r\n\r\n    editCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/project\" + `/{\"action\":\"edit\",\"projectId\":\"${data.data.typeId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <FormOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n    viewCellRender = (data) => {\r\n        return (\r\n            <Link\r\n                to={\"/project\" + `/{\"action\":\"view\",\"projectId\":\"${data.data.typeId}\"}`}\r\n            >\r\n                <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                    <EyeOutlined />\r\n                </span>\r\n            </Link>\r\n        );\r\n    };\r\n    noCellRender = (data) => {\r\n        return (\r\n            <span style={{ color: \"black\", fontSize: \"12pt\" }}>\r\n\r\n                {data.component.pageIndex() * data.component.pageSize() +\r\n                    data.rowIndex +\r\n                    1}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <div id=\"boxType\" className=\"container-box-content\">\r\n                        <div className=\"row wrap-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"#\">\r\n                                    <HomeOutlined />\r\n                                    <span className=\"breadcrum-custom\"> Project </span>\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\">\r\n                                    <div className=\"box-title-search\">\r\n                                        <p className=\"font-size-search\"> Search Project </p>\r\n                                    </div>\r\n                                    <div className=\"box-content\">\r\n                                        <div className=\"box-search-border\">\r\n                                            <form>\r\n                                                <div className=\"row form-group\">\r\n                                                    <div\r\n                                                        className=\"col-4\"\r\n                                                        style={{ textAlign: \"right\" }}\r\n                                                    ></div>\r\n                                                </div>\r\n                                                {/* Job Type Name */}\r\n                                                <div className=\"row form-group\">\r\n                                                    <div className=\"col-3\" style={{ textAlign: \"right\" }}>\r\n\r\n                                                        <label\r\n                                                            className=\"title-field\"\r\n                                                            for=\"txtProject Name\"\r\n                                                        >\r\n\r\n                                                            Project Name\r\n                                                            {/* <span style={{ color: \"red\" }}> * </span> */}\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        class=\"form-control col-6\"\r\n                                                        id=\"txtJob Type\"\r\n                                                    />\r\n                                                </div>\r\n                                                {/* </div> */}\r\n                                            </form>\r\n                                            <div className=\"row form-group\">\r\n                                                <div className=\"col-12\" style={{ textAlign: \"center\" }}>\r\n                                                    <button\r\n                                                        class=\"btn-custom btn-reset \"\r\n                                                        style={{ marginRight: 20 }}\r\n                                                        onClick={this.handleReset}\r\n                                                    >\r\n\r\n                                                        RESET\r\n                                                    </button>\r\n                                                    <button class=\"btn-custom btn-search \">\r\n\r\n                                                        SEARCH\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content start*/}\r\n                            <div className=\"wrap-content\">\r\n                                <div className=\"box-search\" style={{ padding: 30 }}>\r\n                                    <div style={{ textAlign: \"end\", padding: 15 }}>\r\n                                        <Link to='/project/{\"action\":\"create\"}'>\r\n                                            <button\r\n                                                className=\"btn-custom btn-search \"\r\n                                                style={{ width: 250 }}\r\n                                            >\r\n\r\n                                                <span className=\"btn-icon\">\r\n\r\n                                                    <IoAddOutline />\r\n                                                </span>\r\n                                                <span className=\"btn-txt-icon\">\r\n                                                    Create Project\r\n                        </span>\r\n                                            </button>\r\n                                        </Link>\r\n                                    </div>\r\n\r\n                                    {/* data grid */}\r\n\r\n                                    <div style={{ padding: 20 }}>\r\n                                        <DataGrid\r\n                                            dataSource={this.state.data}\r\n                                            showBorders={true}\r\n                                            showRowLines={true}\r\n                                        >\r\n                                            <Paging defaultPageSize={3} />\r\n                                            <Pager\r\n                                                showPageSizeSelector={true}\r\n                                                allowedPageSizes={[10, 20, 50, 100, 250]}\r\n                                                showInfo={true}\r\n                                                showNavigationButtons={true}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                caption=\"No\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.noCellRender}\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Project Name\"\r\n                                                dataField=\"projectName\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                caption=\"Phase\"\r\n                                                dataField=\"projectPhase\"\r\n                                                dataType=\"string\"\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"View\"\r\n                                                cellRender={this.viewCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                caption=\"Edit\"\r\n                                                cellRender={this.editCellRender}\r\n                                            />\r\n                                            <Column\r\n                                                width=\"100\"\r\n                                                alignment=\"center\"\r\n                                                cellRender={this.delCellRender}\r\n                                                caption=\"Delete\"\r\n                                            />\r\n                                        </DataGrid>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* content end*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* POPUP */}\r\n                <AlertPopUp\r\n                    successStatus={this.state.isPopupSuccess}\r\n                    errorStatus={this.state.isPopupError}\r\n                    message={this.state.isPopupMsg}\r\n                    clearActive={() => {\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: false });\r\n                    }}\r\n                />\r\n                <ConfirmPopup\r\n                    open={this.state.isOpen}\r\n                    type={this.state.isTypeShowConfirm}\r\n                    text={this.state.isTextMsg}\r\n                    data={this.state.isDataPopUp}\r\n                    del={false}\r\n                    onClose={() => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    clearActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                    }}\r\n                    confirmActive={(e) => {\r\n                        this.setState({ isOpen: false });\r\n                        this.setState({ isPopupError: false });\r\n                        this.setState({ isPopupSuccess: true });\r\n                        this.setState({ isPopupMsg: msgAlertTitle.deleted });\r\n                        console.log(\"Work -> render -> e\", e);\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Project;\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\pages\\home\\index.js",["182"],"import React from 'react'\r\n\r\nexport default () => (\r\n  <div className=\"has-text-centered\">\r\n    {/* <section class=\"hero is-info\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Home Page</h1>\r\n        <h2 className=\"page-title\">ทำ Routing ให้กับ React ด้วย React Router v4</h2>\r\n        <p className=\"button button-large is-primary\"><a href=\"https://devahoy.com/posts/basic-web-with-react-router-v4/\" target=\"_blank\">อ่านบทความ</a></p>\r\n      </div>\r\n    </section> */}\r\n  </div>\r\n)\r\n","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\config.js",[],"D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\confirm_popup.js",["183","184","185","186","187","188","189","190","191","192"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport moment from 'moment';\r\nconst IconExitRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"window-close\" class=\"svg-inline--fa fa-window-close fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm0 394c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h404c3.3 0 6 2.7 6 6v340zM356.5 194.6L295.1 256l61.4 61.4c4.6 4.6 4.6 12.1 0 16.8l-22.3 22.3c-4.6 4.6-12.1 4.6-16.8 0L256 295.1l-61.4 61.4c-4.6 4.6-12.1 4.6-16.8 0l-22.3-22.3c-4.6-4.6-4.6-12.1 0-16.8l61.4-61.4-61.4-61.4c-4.6-4.6-4.6-12.1 0-16.8l22.3-22.3c4.6-4.6 12.1-4.6 16.8 0l61.4 61.4 61.4-61.4c4.6-4.6 12.1-4.6 16.8 0l22.3 22.3c4.7 4.6 4.7 12.1 0 16.8z\"></path></svg>\r\nconst IconSaveRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"save\" class=\"svg-inline--fa fa-save fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM272 80v80H144V80h128zm122 352H54a6 6 0 0 1-6-6V86a6 6 0 0 1 6-6h42v104c0 13.255 10.745 24 24 24h176c13.255 0 24-10.745 24-24V83.882l78.243 78.243a6 6 0 0 1 1.757 4.243V426a6 6 0 0 1-6 6zM224 232c-48.523 0-88 39.477-88 88s39.477 88 88 88 88-39.477 88-88-39.477-88-88-88zm0 128c-22.056 0-40-17.944-40-40s17.944-40 40-40 40 17.944 40 40-17.944 40-40 40z\"></path></svg>\r\nconst IconWarning = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"exclamation-triangle\" class=\"svg-inline--fa fa-exclamation-triangle fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"></path></svg>\r\nconst IconCheckRegular = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"far\" data-icon=\"check-square\" class=\"svg-inline--fa fa-check-square fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm0 400H48V80h352v352zm-35.864-241.724L191.547 361.48c-4.705 4.667-12.303 4.637-16.97-.068l-90.781-91.516c-4.667-4.705-4.637-12.303.069-16.971l22.719-22.536c4.705-4.667 12.303-4.637 16.97.069l59.792 60.277 141.352-140.216c4.705-4.667 12.303-4.637 16.97.068l22.536 22.718c4.667 4.706 4.637 12.304-.068 16.971z\"></path></svg>\r\nconst IconTrash = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"trash-alt\" class=\"svg-inline--fa fa-trash-alt fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\"></path></svg>\r\n\r\nconst ConfirmPopup = (props) => {\r\n    console.log(`auto boost: ConfirmPopup -> props`, props)\r\n    const isOpen = (props.open);\r\n    const isPopupType = (props.type);\r\n    const isDel = (props.del);\r\n\r\n    const setIsOpen = () => {\r\n        props.onClose()\r\n    }\r\n    const confirmActive = () => {\r\n        props.confirmActive(props.data)\r\n    }\r\n    return (<>\r\n\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isOpen}\r\n            width={650}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsOpen(false)\r\n            }}\r\n        >\r\n            {isPopupType === 'save' ?\r\n                <div>\r\n                    <div style={{ textAlign: 'center' , margin: 40}}>\r\n                        <p className=\"popup-title save\" style={{ color: '#38B000' }}> Confirm </p>\r\n                        <p className=\"popup-sub-title\"> {props.text}</p>\r\n                        <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6\" style={{textAlign:'end'}}>\r\n                                    <button className=\"btn-custom btn-reset\" htmlType=\"submit\" onClick={() => { props.clearActive() }} >\r\n                                        No\r\n                            </button>\r\n                                </div>\r\n                                <div className=\"col-6\" style={{textAlign:'start'}}>\r\n                                    <button className=\"btn-custom success\" style={{ background: '#38B000' }} onClick={() => {\r\n                                        confirmActive()\r\n                                    }}>\r\n                                        Yes\r\n                            </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                : <div>\r\n                <div style={{ textAlign: 'center' , margin: 40}}>\r\n                    <p className=\"popup-title del\" style={{ color: 'red' }}> Confirm </p>\r\n                    <p className=\"popup-sub-title\"> {props.text}</p>\r\n                    <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6\" style={{textAlign:'end'}}>\r\n                                <Button className=\"btn-custom  btn-reset\"  onClick={() => { props.clearActive() }} >\r\n                                    No\r\n                        </Button>\r\n                            </div>\r\n                            <div className=\"col-6\" style={{textAlign:'start'}}>\r\n                                <Button htmlType=\"submit\" className=\"btn-custom error\" style={{ background: 'red' }} onClick={() => {\r\n                                    confirmActive()\r\n                                }}>\r\n                                    Yes\r\n                        </Button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            }\r\n        </Modal>\r\n    </>)\r\n\r\n}\r\nexport default ConfirmPopup;","D:\\lerning\\Times-Sheet-Management\\tsm-fe\\src\\components\\popup\\alert_popup.js",["193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, List, Avatar, Row, Col, Tooltip, Form, TimePicker, Modal, Pagination, Select } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport moment from 'moment';\r\nimport { BsExclamationTriangle } from \"react-icons/bs\";\r\nimport { BrowserRouter as  Link } from 'react-router-dom';\r\n\r\nconst IconCorrect = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"check\" class=\"svg-inline--fa fa-check fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"></path></svg>\r\nconst IconInCorrect = (props) => <svg aria-hidden=\"true\" style={props.style} focusable=\"false\" data-prefix=\"fas\" data-icon=\"times\" class=\"svg-inline--fa fa-times fa-w-11\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\"><path fill=\"currentColor\" d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path></svg>\r\nconst AlertPopUp = (props) => {\r\n    // console.log(\"AlertPopUp -> props\", props)\r\n    const isPopupSuccess = (props.successStatus);\r\n    const isPopupError = (props.errorStatus);\r\n    const isPopupLoading = (props.loadingStatus);\r\n    const msg = (props.message);\r\n    console.log(\"TCL: AlertPopUp -> props\", props)\r\n    useEffect(() => {\r\n        // getProductItem()\r\n    }, []);\r\n    const setIsPopupError = () => {\r\n        props.onOk()\r\n    }\r\n    const setIsPopupSuccess = () => {\r\n        props.onOk()\r\n    }\r\n\r\n    const setIsPopupLoading = () => {\r\n        props.onOk()\r\n    }\r\n\r\n    return (<>\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupError}\r\n            width={650}\r\n            onOk={() => {\r\n                setIsPopupError(false);\r\n            }}\r\n            closable={false}>\r\n\r\n            {isPopupError ? <>\r\n                <span className=\"popup-icon-error\" style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                    <IconInCorrect style={{ width: '70px', color: '#fff', top: 12, position: 'relative' }} />\r\n                </span>\r\n                <div style={{ textAlign: 'center', bottom: 50, position: 'relative' }}>\r\n                    <p className=\"popup-title\"> System Error </p>\r\n                    <p className=\"popup-sub-title\"> {msg ? msg : ''} </p>\r\n                    <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                        {/* <Link to='/jobtype'> */}\r\n                        <Button style={{ background: 'red' }} className=\"btn-popup-custom error\" onClick={() => {\r\n                            props.clearActive()\r\n                        }} >OK</Button>\r\n                        {/* </Link> */}\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupSuccess}\r\n            width={650}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsPopupSuccess(false)\r\n            }}>\r\n\r\n            {isPopupSuccess ? <>\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <span className=\"popup-icon-success\" style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                        <IconCorrect style={{ width: '75px', color: '#fff', top: 20, position: 'relative' }} />\r\n                    </span>\r\n                    <div style={{ textAlign: 'center', bottom: 50, position: 'relative' }}>\r\n                        <p className=\"popup-title\"> Success </p>\r\n                        <p className=\"popup-sub-title\"> {msg ? msg : ''} </p>\r\n                        <div style={{ textAlign: 'center', position: 'relative', top: 20 }}>\r\n                            <Button className=\"btn-popup-custom success\" onClick={() => { props.clearActive() }} >OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n        <Modal centered\r\n            footer={null}\r\n            header={null}\r\n            visible={isPopupLoading}\r\n            width={500}\r\n            closable={false}\r\n            onOk={() => {\r\n                setIsPopupLoading(false)\r\n            }}\r\n        >\r\n\r\n            {isPopupLoading ? <>\r\n                <div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <div style={{ display: 'flow-root', textAlign: 'center', justifyContent: 'center' }}>\r\n                            {isPopupLoading ? <BsExclamationTriangle style={{ color: 'rgb(226 189 82)', fontSize: '75px' }} /> : null}\r\n                        </div>\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <p style={{ fontSize: 17, marginTop: 15, marginBottom: 15 }}>\r\n                                {msg ? <span dangerouslySetInnerHTML={{ __html: msg }}></span> : ''} </p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </> : null}\r\n        </Modal>\r\n\r\n\r\n    </>)\r\n};\r\n\r\nexport default AlertPopUp;\r\n",{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":2,"column":8,"nodeType":"212","messageId":"213","endLine":2,"endColumn":11},{"ruleId":"210","severity":1,"message":"214","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":14},{"ruleId":"210","severity":1,"message":"215","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":12},{"ruleId":"210","severity":1,"message":"216","line":6,"column":10,"nodeType":"212","messageId":"213","endLine":6,"endColumn":17},{"ruleId":"217","severity":1,"message":"218","line":14,"column":1,"nodeType":"219","endLine":28,"endColumn":2},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"221","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":15},{"ruleId":"210","severity":1,"message":"222","line":3,"column":17,"nodeType":"212","messageId":"213","endLine":3,"endColumn":23},{"ruleId":"210","severity":1,"message":"223","line":6,"column":8,"nodeType":"212","messageId":"213","endLine":6,"endColumn":15},{"ruleId":"210","severity":1,"message":"224","line":8,"column":22,"nodeType":"212","messageId":"213","endLine":8,"endColumn":32},{"ruleId":"210","severity":1,"message":"225","line":8,"column":34,"nodeType":"212","messageId":"213","endLine":8,"endColumn":40},{"ruleId":"210","severity":1,"message":"226","line":9,"column":24,"nodeType":"212","messageId":"213","endLine":9,"endColumn":36},{"ruleId":"210","severity":1,"message":"227","line":10,"column":8,"nodeType":"212","messageId":"213","endLine":10,"endColumn":14},{"ruleId":"210","severity":1,"message":"228","line":11,"column":27,"nodeType":"212","messageId":"213","endLine":11,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":11,"column":35,"nodeType":"212","messageId":"213","endLine":11,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":11,"column":43,"nodeType":"212","messageId":"213","endLine":11,"endColumn":48},{"ruleId":"210","severity":1,"message":"231","line":11,"column":56,"nodeType":"212","messageId":"213","endLine":11,"endColumn":64},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"221","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":15},{"ruleId":"210","severity":1,"message":"222","line":3,"column":17,"nodeType":"212","messageId":"213","endLine":3,"endColumn":23},{"ruleId":"210","severity":1,"message":"227","line":10,"column":8,"nodeType":"212","messageId":"213","endLine":10,"endColumn":14},{"ruleId":"210","severity":1,"message":"228","line":11,"column":27,"nodeType":"212","messageId":"213","endLine":11,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":11,"column":35,"nodeType":"212","messageId":"213","endLine":11,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":11,"column":43,"nodeType":"212","messageId":"213","endLine":11,"endColumn":48},{"ruleId":"210","severity":1,"message":"232","line":20,"column":5,"nodeType":"212","messageId":"213","endLine":20,"endColumn":9},{"ruleId":"210","severity":1,"message":"233","line":33,"column":5,"nodeType":"212","messageId":"213","endLine":33,"endColumn":16},{"ruleId":"210","severity":1,"message":"234","line":34,"column":5,"nodeType":"212","messageId":"213","endLine":34,"endColumn":13},{"ruleId":"210","severity":1,"message":"235","line":35,"column":5,"nodeType":"212","messageId":"213","endLine":35,"endColumn":14},{"ruleId":"210","severity":1,"message":"236","line":36,"column":5,"nodeType":"212","messageId":"213","endLine":36,"endColumn":12},{"ruleId":"210","severity":1,"message":"237","line":203,"column":17,"nodeType":"212","messageId":"213","endLine":203,"endColumn":19},{"ruleId":"238","severity":1,"message":"239","line":479,"column":77,"nodeType":"240","endLine":479,"endColumn":91},{"ruleId":"238","severity":1,"message":"239","line":516,"column":77,"nodeType":"240","endLine":516,"endColumn":91},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"221","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":15},{"ruleId":"210","severity":1,"message":"222","line":3,"column":17,"nodeType":"212","messageId":"213","endLine":3,"endColumn":23},{"ruleId":"210","severity":1,"message":"224","line":8,"column":22,"nodeType":"212","messageId":"213","endLine":8,"endColumn":32},{"ruleId":"210","severity":1,"message":"226","line":9,"column":24,"nodeType":"212","messageId":"213","endLine":9,"endColumn":36},{"ruleId":"210","severity":1,"message":"228","line":11,"column":27,"nodeType":"212","messageId":"213","endLine":11,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":11,"column":35,"nodeType":"212","messageId":"213","endLine":11,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":11,"column":43,"nodeType":"212","messageId":"213","endLine":11,"endColumn":48},{"ruleId":"210","severity":1,"message":"241","line":18,"column":7,"nodeType":"212","messageId":"213","endLine":18,"endColumn":13},{"ruleId":"210","severity":1,"message":"242","line":19,"column":7,"nodeType":"212","messageId":"213","endLine":19,"endColumn":13},{"ruleId":"210","severity":1,"message":"232","line":21,"column":5,"nodeType":"212","messageId":"213","endLine":21,"endColumn":9},{"ruleId":"210","severity":1,"message":"233","line":32,"column":5,"nodeType":"212","messageId":"213","endLine":32,"endColumn":16},{"ruleId":"210","severity":1,"message":"234","line":33,"column":5,"nodeType":"212","messageId":"213","endLine":33,"endColumn":13},{"ruleId":"210","severity":1,"message":"235","line":34,"column":5,"nodeType":"212","messageId":"213","endLine":34,"endColumn":14},{"ruleId":"210","severity":1,"message":"236","line":35,"column":5,"nodeType":"212","messageId":"213","endLine":35,"endColumn":12},{"ruleId":"210","severity":1,"message":"243","line":95,"column":13,"nodeType":"212","messageId":"213","endLine":95,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":319,"column":25,"nodeType":"246","messageId":"247","endLine":319,"endColumn":26,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":369,"column":96,"nodeType":"251","messageId":"252","endLine":369,"endColumn":98},{"ruleId":"249","severity":1,"message":"250","line":369,"column":119,"nodeType":"251","messageId":"252","endLine":369,"endColumn":121},{"ruleId":"249","severity":1,"message":"250","line":386,"column":94,"nodeType":"251","messageId":"252","endLine":386,"endColumn":96},{"ruleId":"249","severity":1,"message":"250","line":386,"column":117,"nodeType":"251","messageId":"252","endLine":386,"endColumn":119},{"ruleId":"249","severity":1,"message":"253","line":388,"column":78,"nodeType":"251","messageId":"252","endLine":388,"endColumn":80},{"ruleId":"249","severity":1,"message":"253","line":388,"column":136,"nodeType":"251","messageId":"252","endLine":388,"endColumn":138},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"228","line":7,"column":27,"nodeType":"212","messageId":"213","endLine":7,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":7,"column":35,"nodeType":"212","messageId":"213","endLine":7,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":7,"column":43,"nodeType":"212","messageId":"213","endLine":7,"endColumn":48},{"ruleId":"210","severity":1,"message":"254","line":8,"column":24,"nodeType":"212","messageId":"213","endLine":8,"endColumn":35},{"ruleId":"210","severity":1,"message":"226","line":8,"column":37,"nodeType":"212","messageId":"213","endLine":8,"endColumn":49},{"ruleId":"210","severity":1,"message":"255","line":10,"column":8,"nodeType":"212","messageId":"213","endLine":10,"endColumn":15},{"ruleId":"210","severity":1,"message":"256","line":10,"column":19,"nodeType":"212","messageId":"213","endLine":10,"endColumn":23},{"ruleId":"210","severity":1,"message":"257","line":15,"column":3,"nodeType":"212","messageId":"213","endLine":15,"endColumn":13},{"ruleId":"210","severity":1,"message":"258","line":16,"column":3,"nodeType":"212","messageId":"213","endLine":16,"endColumn":12},{"ruleId":"210","severity":1,"message":"215","line":27,"column":3,"nodeType":"212","messageId":"213","endLine":27,"endColumn":7},{"ruleId":"210","severity":1,"message":"222","line":28,"column":3,"nodeType":"212","messageId":"213","endLine":28,"endColumn":9},{"ruleId":"210","severity":1,"message":"259","line":39,"column":7,"nodeType":"212","messageId":"213","endLine":39,"endColumn":16},{"ruleId":"210","severity":1,"message":"260","line":50,"column":5,"nodeType":"212","messageId":"213","endLine":50,"endColumn":6},{"ruleId":"210","severity":1,"message":"261","line":52,"column":7,"nodeType":"212","messageId":"213","endLine":52,"endColumn":20},{"ruleId":"210","severity":1,"message":"262","line":57,"column":7,"nodeType":"212","messageId":"213","endLine":57,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":321,"column":29,"nodeType":"265","messageId":"266","endLine":321,"endColumn":30},{"ruleId":"267","severity":1,"message":"268","line":324,"column":11,"nodeType":"269","endLine":326,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":428,"column":92,"nodeType":"265","messageId":"272","endLine":428,"endColumn":94},{"ruleId":"270","severity":1,"message":"271","line":442,"column":86,"nodeType":"265","messageId":"272","endLine":442,"endColumn":88},{"ruleId":"238","severity":1,"message":"239","line":469,"column":45,"nodeType":"240","endLine":469,"endColumn":56},{"ruleId":"238","severity":1,"message":"239","line":706,"column":25,"nodeType":"240","endLine":706,"endColumn":39},{"ruleId":"238","severity":1,"message":"239","line":743,"column":25,"nodeType":"240","endLine":743,"endColumn":39},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"228","line":3,"column":27,"nodeType":"212","messageId":"213","endLine":3,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":3,"column":35,"nodeType":"212","messageId":"213","endLine":3,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":3,"column":43,"nodeType":"212","messageId":"213","endLine":3,"endColumn":48},{"ruleId":"210","severity":1,"message":"273","line":5,"column":8,"nodeType":"212","messageId":"213","endLine":5,"endColumn":9},{"ruleId":"210","severity":1,"message":"254","line":9,"column":5,"nodeType":"212","messageId":"213","endLine":9,"endColumn":16},{"ruleId":"210","severity":1,"message":"259","line":21,"column":7,"nodeType":"212","messageId":"213","endLine":21,"endColumn":16},{"ruleId":"210","severity":1,"message":"261","line":32,"column":7,"nodeType":"212","messageId":"213","endLine":32,"endColumn":20},{"ruleId":"210","severity":1,"message":"262","line":37,"column":7,"nodeType":"212","messageId":"213","endLine":37,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":148,"column":13,"nodeType":"269","endLine":157,"endColumn":14},{"ruleId":"263","severity":1,"message":"264","line":170,"column":32,"nodeType":"265","messageId":"266","endLine":170,"endColumn":33},{"ruleId":"210","severity":1,"message":"220","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"274","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":28},{"ruleId":"210","severity":1,"message":"275","line":4,"column":10,"nodeType":"212","messageId":"213","endLine":4,"endColumn":25},{"ruleId":"210","severity":1,"message":"276","line":5,"column":10,"nodeType":"212","messageId":"213","endLine":5,"endColumn":25},{"ruleId":"210","severity":1,"message":"277","line":6,"column":10,"nodeType":"212","messageId":"213","endLine":6,"endColumn":31},{"ruleId":"210","severity":1,"message":"278","line":7,"column":10,"nodeType":"212","messageId":"213","endLine":7,"endColumn":27},{"ruleId":"210","severity":1,"message":"221","line":8,"column":10,"nodeType":"212","messageId":"213","endLine":8,"endColumn":15},{"ruleId":"210","severity":1,"message":"222","line":8,"column":17,"nodeType":"212","messageId":"213","endLine":8,"endColumn":23},{"ruleId":"210","severity":1,"message":"223","line":11,"column":8,"nodeType":"212","messageId":"213","endLine":11,"endColumn":15},{"ruleId":"210","severity":1,"message":"228","line":13,"column":27,"nodeType":"212","messageId":"213","endLine":13,"endColumn":33},{"ruleId":"210","severity":1,"message":"229","line":13,"column":35,"nodeType":"212","messageId":"213","endLine":13,"endColumn":41},{"ruleId":"210","severity":1,"message":"230","line":13,"column":43,"nodeType":"212","messageId":"213","endLine":13,"endColumn":48},{"ruleId":"210","severity":1,"message":"259","line":32,"column":7,"nodeType":"212","messageId":"213","endLine":32,"endColumn":16},{"ruleId":"210","severity":1,"message":"261","line":43,"column":7,"nodeType":"212","messageId":"213","endLine":43,"endColumn":20},{"ruleId":"210","severity":1,"message":"262","line":48,"column":7,"nodeType":"212","messageId":"213","endLine":48,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":248,"column":13,"nodeType":"269","endLine":258,"endColumn":14},{"ruleId":"263","severity":1,"message":"264","line":271,"column":32,"nodeType":"265","messageId":"266","endLine":271,"endColumn":33},{"ruleId":"263","severity":1,"message":"264","line":283,"column":32,"nodeType":"265","messageId":"266","endLine":283,"endColumn":33},{"ruleId":"217","severity":1,"message":"218","line":3,"column":1,"nodeType":"219","endLine":13,"endColumn":2},{"ruleId":"210","severity":1,"message":"279","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"280","line":1,"column":28,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"273","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":9},{"ruleId":"210","severity":1,"message":"227","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":14},{"ruleId":"210","severity":1,"message":"281","line":5,"column":7,"nodeType":"212","messageId":"213","endLine":5,"endColumn":22},{"ruleId":"210","severity":1,"message":"282","line":6,"column":7,"nodeType":"212","messageId":"213","endLine":6,"endColumn":22},{"ruleId":"210","severity":1,"message":"283","line":7,"column":7,"nodeType":"212","messageId":"213","endLine":7,"endColumn":18},{"ruleId":"210","severity":1,"message":"284","line":8,"column":7,"nodeType":"212","messageId":"213","endLine":8,"endColumn":23},{"ruleId":"210","severity":1,"message":"285","line":9,"column":7,"nodeType":"212","messageId":"213","endLine":9,"endColumn":16},{"ruleId":"210","severity":1,"message":"286","line":15,"column":11,"nodeType":"212","messageId":"213","endLine":15,"endColumn":16},{"ruleId":"210","severity":1,"message":"280","line":1,"column":28,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"287","line":2,"column":18,"nodeType":"212","messageId":"213","endLine":2,"endColumn":22},{"ruleId":"210","severity":1,"message":"288","line":2,"column":24,"nodeType":"212","messageId":"213","endLine":2,"endColumn":30},{"ruleId":"210","severity":1,"message":"289","line":2,"column":32,"nodeType":"212","messageId":"213","endLine":2,"endColumn":35},{"ruleId":"210","severity":1,"message":"290","line":2,"column":37,"nodeType":"212","messageId":"213","endLine":2,"endColumn":40},{"ruleId":"210","severity":1,"message":"291","line":2,"column":42,"nodeType":"212","messageId":"213","endLine":2,"endColumn":49},{"ruleId":"210","severity":1,"message":"215","line":2,"column":51,"nodeType":"212","messageId":"213","endLine":2,"endColumn":55},{"ruleId":"210","severity":1,"message":"224","line":2,"column":57,"nodeType":"212","messageId":"213","endLine":2,"endColumn":67},{"ruleId":"210","severity":1,"message":"292","line":2,"column":76,"nodeType":"212","messageId":"213","endLine":2,"endColumn":86},{"ruleId":"210","severity":1,"message":"225","line":2,"column":88,"nodeType":"212","messageId":"213","endLine":2,"endColumn":94},{"ruleId":"210","severity":1,"message":"273","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":9},{"ruleId":"210","severity":1,"message":"227","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":14},{"ruleId":"210","severity":1,"message":"293","line":6,"column":27,"nodeType":"212","messageId":"213","endLine":6,"endColumn":31},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Form' is defined but never used.","'NavLink' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Component' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'DateBox' is defined but never used.","'TimePicker' is defined but never used.","'Select' is defined but never used.","'PlusOutlined' is defined but never used.","'moment' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'data' is assigned a value but never used.","'projectList' is assigned a value but never used.","'typeList' is assigned a value but never used.","'timeHours' is assigned a value but never used.","'timeMin' is assigned a value but never used.","'mm' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'format' is assigned a value but never used.","'Option' is assigned a value but never used.","'temp' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["296","297"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'EyeOutlined' is defined but never used.","'Toolbar' is defined but never used.","'Item' is defined but never used.","'SimpleItem' is defined but never used.","'GroupItem' is defined but never used.","'tasksData' is assigned a value but never used.","'d' is assigned a value but never used.","'employeesData' is assigned a value but never used.","'statusesData' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'_' is defined but never used.","'BsFillCalendarFill' is defined but never used.","'BsFillTrashFill' is defined but never used.","'FaClipboardList' is defined but never used.","'AiOutlineStepBackward' is defined but never used.","'AiFillStepForward' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'IconExitRegular' is assigned a value but never used.","'IconSaveRegular' is assigned a value but never used.","'IconWarning' is assigned a value but never used.","'IconCheckRegular' is assigned a value but never used.","'IconTrash' is assigned a value but never used.","'isDel' is assigned a value but never used.","'List' is defined but never used.","'Avatar' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tooltip' is defined but never used.","'Pagination' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"298","fix":"299","desc":"300"},{"messageId":"301","fix":"302","desc":"303"},"removeEscape",{"range":"304","text":"305"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"306","text":"307"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[11270,11271],"",[11270,11270],"\\"]